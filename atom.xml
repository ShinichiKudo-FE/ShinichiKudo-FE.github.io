<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>默默默默燃</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhanghao-web.github.io/"/>
  <updated>2020-03-18T12:52:56.005Z</updated>
  <id>https://zhanghao-web.github.io/</id>
  
  <author>
    <name>张白告丶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你不知道的箭头函数</title>
    <link href="https://zhanghao-web.github.io/2020/03/15/Js/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>https://zhanghao-web.github.io/2020/03/15/Js/你不知道的箭头函数/</id>
    <published>2020-03-15T10:31:16.000Z</published>
    <updated>2020-03-18T12:52:56.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h1><p>ES6的箭头函数，我们会在工作中经常知道，但是你知道什么时候使用箭头函数，什么时候不能使用箭头函数吗？</p><h2 id="什么时候使用箭头函数？"><a href="#什么时候使用箭头函数？" class="headerlink" title="什么时候使用箭头函数？"></a>什么时候使用箭头函数？</h2><blockquote><p>为啥大多数情况都使用箭头函数？</p></blockquote><p>作用域安全性:当箭头函数被一致使用时，所有东西都保证使用与根对象相同的this。如果一个标准函数回调与一堆箭头函数混合在一起，那么作用域就有可能变得混乱。</p><p>紧凑性:箭头函数更容易读写。</p><p>清晰度:使用箭头函数可明确知道当前 this 指向</p><p>其它情况使用箭头函数。</p><h2 id="什么时候不能使用箭头函数？"><a href="#什么时候不能使用箭头函数？" class="headerlink" title="什么时候不能使用箭头函数？"></a>什么时候不能使用箭头函数？</h2><h3 id="定义对象方法"><a href="#定义对象方法" class="headerlink" title="定义对象方法"></a>定义对象方法</h3><h4 id="定义字面量的方法"><a href="#定义字面量的方法" class="headerlink" title="定义字面量的方法"></a>定义字面量的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculator = &#123;</span><br><span class="line">    array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    sum: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> result + item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Throws "TypeError: Cannot read property 'reduce' of undefined"</span></span><br><span class="line">calculator.sum();</span><br></pre></td></tr></table></figure><p>calculator.sum 使用箭头函数来定义，但是调用的时候会抛出 TypeError，因为运行时 this.array 是未定义的，调用 calculator.sum 的时候，执行上下文里面的 this 仍然指向的是 window，原因是箭头函数把函数上下文绑定到了 window 上，this.array 等价于 window.array，显然后者是未定义的。</p><p><strong>解决的办法</strong>是，使用函数表达式或者方法简写（ES6 中已经支持）来定义方法，这样能确保 this 是在运行时是由包含它的上下文决定的，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculator = &#123;</span><br><span class="line">    array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    sum() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> === calculator); <span class="comment">// =&gt; true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> result + item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">calculator.sum(); <span class="comment">// =&gt; 6</span></span><br></pre></td></tr></table></figure><h4 id="定义原型方法"><a href="#定义原型方法" class="headerlink" title="定义原型方法"></a>定义原型方法</h4><p>同样的规则适用于原型方法（prototype method）的定义，使用箭头函数会导致运行时的执行上下文错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cat.prototype.sayCatName = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Mew'</span>);</span><br><span class="line">cat.sayCatName(); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>:使用传统的函数表达式就能解决问题</p><h3 id="定义事件回调函数"><a href="#定义事件回调函数" class="headerlink" title="定义事件回调函数"></a>定义事件回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'myButton'</span>);</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">'Clicked button'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在全局上下文下定义的箭头函数执行时 this 会指向 window，当单击事件发生时，浏览器会尝试用 button 作为上下文来执行事件回调函数，但是箭头函数预定义的上下文是不能被修改的，这样 this.innerHTML 就等价于 window.innerHTML，而后者是没有任何意义的。</p><p><strong>解决方法</strong>:使用传统的函数表达式就能解决问题</p><h3 id="定义构造函数"><a href="#定义构造函数" class="headerlink" title="定义构造函数"></a>定义构造函数</h3><p>构造函数中的 this 指向新创建的对象，当执行 new Car() 的时候，构造函数 Car 的上下文就是新创建的对象，也就是说 this instanceof Car === true。显然，箭头函数是不能用来做构造函数， 实际上 JS 会禁止你这么做，如果你这么做了，它就会抛出异常。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Message = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.text = text;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Throws "TypeError: Message is not a constructor"</span></span><br><span class="line"><span class="keyword">const</span> helloMessage = <span class="keyword">new</span> Message(<span class="string">'Hello World!'</span>);</span><br></pre></td></tr></table></figure><h3 id="追求过短的代码"><a href="#追求过短的代码" class="headerlink" title="追求过短的代码"></a>追求过短的代码</h3><p>在代码可读性方面，最短的代码可能并不总是最好的。一定程度上，压缩了太多逻辑的简短代码，阅读起来就没有那么直观，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multiply = <span class="function">(<span class="params">a, b</span>) =&gt;</span> b === <span class="literal">undefined</span> ? <span class="function"><span class="params">b</span> =&gt;</span> a * b : a * b;</span><br><span class="line"><span class="keyword">const</span> double = multiply(<span class="number">2</span>);</span><br><span class="line">double(<span class="number">3</span>);      <span class="comment">// =&gt; 6</span></span><br><span class="line">multiply(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// =&gt; 6</span></span><br></pre></td></tr></table></figure><p>multiply 函数会返回两个数字的乘积或者返回一个可以继续调用的固定了一个参数的函数。代码看起来很简短，但大多数人第一眼看上去可能无法立即搞清楚它干了什么，怎么让这段代码可读性更高呢？有很多办法，可以在箭头函数中加上括号、条件判断、返回语句，或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> double = multiply(<span class="number">2</span>);</span><br><span class="line">double(<span class="number">3</span>); <span class="comment">// =&gt; 6</span></span><br><span class="line">multiply(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// =&gt; 6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简言&quot;&gt;&lt;a href=&quot;#简言&quot; class=&quot;headerlink&quot; title=&quot;简言&quot;&gt;&lt;/a&gt;简言&lt;/h1&gt;&lt;p&gt;ES6的箭头函数，我们会在工作中经常知道，但是你知道什么时候使用箭头函数，什么时候不能使用箭头函数吗？&lt;/p&gt;
&lt;h2 id=&quot;什么时候使用
      
    
    </summary>
    
      <category term="Js" scheme="https://zhanghao-web.github.io/categories/Js/"/>
    
    
      <category term="ES6" scheme="https://zhanghao-web.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的 JSON.stringify() 的威力</title>
    <link href="https://zhanghao-web.github.io/2019/12/12/Js/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-JSON-stringify-%E7%9A%84%E5%A8%81%E5%8A%9B/"/>
    <id>https://zhanghao-web.github.io/2019/12/12/Js/你不知道的-JSON-stringify-的威力/</id>
    <published>2019-12-12T08:17:03.000Z</published>
    <updated>2020-01-28T10:04:15.036Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5decf09de51d45584d238319#heading-4" target="_blank" rel="noopener">原文地址</a></p><h2 id="通过需求学习JSON-stringify"><a href="#通过需求学习JSON-stringify" class="headerlink" title="通过需求学习JSON.stringify()"></a>通过需求学习JSON.stringify()</h2><p>首先我们在开发的过程当中遇到这样一个处理数据的需求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todayILearn = &#123;</span><br><span class="line">  _id: <span class="number">1</span>,</span><br><span class="line">  content: <span class="string">'今天学习 JSON.stringify()，我很开心！'</span>,</span><br><span class="line">  created_at: <span class="string">'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)'</span>,</span><br><span class="line">  updated_at: <span class="string">'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要将上面这个对象处理成下面这个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todayILearn = &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  content: <span class="string">'今天学习 JSON.stringify()，我很开心！'</span>,</span><br><span class="line">  createdAt: <span class="string">'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)'</span>,</span><br><span class="line">  updatedAt: <span class="string">'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是在不改变属性的值的前提下，将对象属性修改一下。 把_id  改成 id，把 updated_at 改成 updatedAt，把 created_at 改成 createdAt。我们现在通过这个小小的需求来见识一下 JSON.stringify() 的强大吧。</p><p>首先要解决这个问题我们有很多种解决方式，我们先提供两种不优雅的解决方案：</p><p><strong>方案一：一次遍历+多声明一个变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多一个变量存储</span></span><br><span class="line"><span class="keyword">const</span> todayILearnTemp = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(todayILearn)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">"_id"</span>) todayILearnTemp[<span class="string">"id"</span>] = value;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">"created_at"</span>) todayILearnTemp[<span class="string">"createdAt"</span>] = value;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">"updatedAt"</span>) todayILearnTemp[<span class="string">"updatedAt"</span>] = value;</span><br><span class="line">  <span class="keyword">else</span> todayILearnTemp[key] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(todayILearnTemp);</span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// &#123; id: 1,</span></span><br><span class="line"><span class="comment">//  content: '今天学习 JSON.stringify()，我很开心！',</span></span><br><span class="line"><span class="comment">//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',</span></span><br><span class="line"><span class="comment">//  updated_at: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)' </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>方案一完全没有问题，可以实现。但是多声明了一个变量又加上一层循环并且还有很多的 if else 语句，怎么都显得不太优雅。</p><p><strong>方案二：暴力 delete 属性和增加属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 极致的暴力美学</span></span><br><span class="line">todayILearn.id = todayILearn._id;</span><br><span class="line">todayILearn.createdAt = todayILearn.created_at;</span><br><span class="line">todayILearn.updatedAt = todayILearn.updated_at;</span><br><span class="line"><span class="keyword">delete</span> todayILearn._id;</span><br><span class="line"><span class="keyword">delete</span> todayILearn.created_at;</span><br><span class="line"><span class="keyword">delete</span> todayILearn.updated_at;</span><br><span class="line"><span class="built_in">console</span>.log(todayILearn);</span><br><span class="line"><span class="comment">// 太暴力😢</span></span><br><span class="line"><span class="comment">//&#123; </span></span><br><span class="line"><span class="comment">//  content: '今天学习 JSON.stringify()，我很开心！',</span></span><br><span class="line"><span class="comment">//  id: 1,</span></span><br><span class="line"><span class="comment">//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',</span></span><br><span class="line"><span class="comment">//  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)' </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>直接 delete 暴力解决太粗鲁了，而且有一个缺点，属性的顺序变了。</p><p><strong>方案三：序列化+ replace 美学典范</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapObj = &#123;</span><br><span class="line">  _id: <span class="string">"id"</span>,</span><br><span class="line">  created_at: <span class="string">"createdAt"</span>,</span><br><span class="line">  updated_at: <span class="string">"updatedAt"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.parse(</span><br><span class="line">  <span class="built_in">JSON</span>.stringify(todayILearn).replace(</span><br><span class="line">    /_id|created_at|updated_at/gi,</span><br><span class="line">    matched =&gt; mapObj[matched])</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; </span></span><br><span class="line"><span class="comment">// id: 1,</span></span><br><span class="line"><span class="comment">//  content: '今天学习 JSON.stringify()，我很开心！',</span></span><br><span class="line"><span class="comment">//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',</span></span><br><span class="line"><span class="comment">//  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)' </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/12/8/16ee5ace18ca5dbb?imageslim" alt="Json.Stringify"></p><a id="more"></a><h2 id="JSON-stringify-九大特性"><a href="#JSON-stringify-九大特性" class="headerlink" title="JSON.stringify() 九大特性"></a>JSON.stringify() 九大特性</h2><h3 id="JSON-stringify-第一大特性"><a href="#JSON-stringify-第一大特性" class="headerlink" title="JSON.stringify()第一大特性"></a>JSON.stringify()第一大特性</h3><p><strong>对于 undefined、任意的函数以及 symbol 三个特殊的值分别作为对象属性的值、数组元素、单独的值时 JSON.stringify()将返回不同的结果</strong>。</p><p>首先，我们来复习一下知识点，看一道非常简单的面试题目：请问下面代码会输出什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  a: <span class="string">"aaa"</span>,</span><br><span class="line">  b: <span class="literal">undefined</span>,</span><br><span class="line">  c: <span class="built_in">Symbol</span>(<span class="string">"dd"</span>),</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(data); <span class="comment">// 输出：？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "&#123;"a":"aaa"&#125;"</span></span><br></pre></td></tr></table></figure><p>很简单这道题目面试官主要考察的知识点是：</p><ul><li>undefined、任意的函数以及 symbol 作为对象属性值时 JSON.stringify() 将跳过（忽略）对它们进行序列化</li></ul><p>面试官追问：假设 undefined、任意的函数以及 symbol 值作为数组元素会是怎样呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify([<span class="string">"aaa"</span>, <span class="literal">undefined</span>, <span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;, <span class="built_in">Symbol</span>(<span class="string">'dd'</span>)])  <span class="comment">// 输出：？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "["aaa",null,null,null]"</span></span><br></pre></td></tr></table></figure><p>知识点是：</p><ul><li>undefined、任意的函数以及 symbol 作为数组元素值时，JSON.stringify() 会将它们序列化为 null</li></ul><p>我们稍微再动下脑筋，如果单独序列化这些值会是什么样的结果呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'a'</span>)&#125;)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">undefined</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="built_in">Symbol</span>(<span class="string">'dd'</span>))</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>单独转换的结果就是：</p><p>undefined、任意的函数以及 symbol 被 JSON.stringify() 作为单独的值进行序列化时都会返回 undefined</p><blockquote><p>JSON.stringify() 第一大特性总结<br>undefined、任意的函数以及 symbol 作为对象属性值时 JSON.stringify() 对跳过（忽略）它们进行序列化<br>undefined、任意的函数以及 symbol 作为数组元素值时，JSON.stringify() 将会将它们序列化为 null<br>undefined、任意的函数以及 symbol 被 JSON.stringify() 作为单独的值进行序列化时，都会返回 undefined</p></blockquote><h3 id="JSON-stringify-第二大特性"><a href="#JSON-stringify-第二大特性" class="headerlink" title="JSON.stringify() 第二大特性"></a>JSON.stringify() 第二大特性</h3><p><strong>非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  a: <span class="string">"aaa"</span>,</span><br><span class="line">  b: <span class="literal">undefined</span>,</span><br><span class="line">  c: <span class="built_in">Symbol</span>(<span class="string">"dd"</span>),</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  d: <span class="string">"ddd"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(data); <span class="comment">// 输出：？</span></span><br><span class="line"><span class="comment">// "&#123;"a":"aaa","d":"ddd"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify([<span class="string">"aaa"</span>, <span class="literal">undefined</span>, <span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;, <span class="built_in">Symbol</span>(<span class="string">'dd'</span>),<span class="string">"eee"</span>])  <span class="comment">// 输出：？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "["aaa",null,null,null,"eee"]"</span></span><br></pre></td></tr></table></figure><p>正如我们在第一特性所说，JSON.stringify() 序列化时<strong>会忽略一些特殊的值</strong>，所以不能保证序列化后的字符串还是以特定的顺序出现（数组除外）。</p><h3 id="JSON-stringify-第三大特性"><a href="#JSON-stringify-第三大特性" class="headerlink" title="JSON.stringify() 第三大特性"></a>JSON.stringify() 第三大特性</h3><ul><li>转换值如果<strong>有 toJSON() 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    say: <span class="string">"hello JSON.stringify"</span>,</span><br><span class="line">    toJSON: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"today i learn"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// "today i learn"</span></span><br></pre></td></tr></table></figure><h3 id="JSON-stringify-第四大特性"><a href="#JSON-stringify-第四大特性" class="headerlink" title="JSON.stringify()第四大特性"></a>JSON.stringify()第四大特性</h3><p>JSON.stringify() 将会<strong>正常序列化 Date</strong> 的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">now</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;);</span><br><span class="line"><span class="comment">// "&#123;"now":"2019-12-08T07:42:11.973Z"&#125;"</span></span><br></pre></td></tr></table></figure><p>实际上 Date 对象自己部署了 toJSON() 方法（同Date.toISOString()），因此 Date 对象会被当做字符串处理。</p><h3 id="JSON-stringify-第五大特性"><a href="#JSON-stringify-第五大特性" class="headerlink" title="JSON.stringify() 第五大特性"></a>JSON.stringify() 第五大特性</h3><p><strong>NaN 和 Infinity 格式的数值及 null 都会被当做 null。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// "null"</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// "null"</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// "null"</span></span><br></pre></td></tr></table></figure><h3 id="JSON-stringify-第六大特性"><a href="#JSON-stringify-第六大特性" class="headerlink" title="JSON.stringify() 第六大特性"></a>JSON.stringify() 第六大特性</h3><p><strong>布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify([<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>), <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"false"</span>), <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>)]);</span><br><span class="line"><span class="comment">// "[1,"false",false]"</span></span><br></pre></td></tr></table></figure><h3 id="JSON-stringify-第七大特性"><a href="#JSON-stringify-第七大特性" class="headerlink" title="JSON.stringify() 第七大特性"></a>JSON.stringify() 第七大特性</h3><p>关于对象属性的是否可枚举：</p><p><strong>其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不可枚举的属性默认会被忽略：</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify( </span><br><span class="line">    <span class="built_in">Object</span>.create(</span><br><span class="line">        <span class="literal">null</span>, </span><br><span class="line">        &#123; </span><br><span class="line">            x: &#123; <span class="attr">value</span>: <span class="string">'json'</span>, <span class="attr">enumerable</span>: <span class="literal">false</span> &#125;, </span><br><span class="line">            y: &#123; <span class="attr">value</span>: <span class="string">'stringify'</span>, <span class="attr">enumerable</span>: <span class="literal">true</span> &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">// "&#123;"y":"stringify"&#125;"</span></span><br></pre></td></tr></table></figure><h3 id="JSON-stringify-第八大特性"><a href="#JSON-stringify-第八大特性" class="headerlink" title="JSON.stringify() 第八大特性"></a>JSON.stringify() 第八大特性</h3><p>我们都知道实现深拷贝最简单粗暴的方式就是序列化：<code>JSON.parse(JSON.stringify())</code>，这个方式实现深拷贝会因为序列化的诸多特性从而导致诸多的坑点：比如现在我们要说的循环引用问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。 </span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"loopObj"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> loopObj = &#123;</span><br><span class="line">  obj</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 对象之间形成循环引用，形成闭环</span></span><br><span class="line">obj.loopObj = loopObj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个深拷贝的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行深拷贝，抛出错误</span></span><br><span class="line">deepClone(obj)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> VM44:9 Uncaught TypeError: Converting circular structure to JSON</span></span><br><span class="line"><span class="comment">    --&gt; starting at object with constructor 'Object'</span></span><br><span class="line"><span class="comment">    |     property 'loopObj' -&gt; object with constructor 'Object'</span></span><br><span class="line"><span class="comment">    --- property 'obj' closes the circle</span></span><br><span class="line"><span class="comment">    at JSON.stringify (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="comment">    at deepClone (&lt;anonymous&gt;:9:26)</span></span><br><span class="line"><span class="comment">    at &lt;anonymous&gt;:11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。</li></ul><p>这也就是为什么用序列化去实现深拷贝时，遇到循环引用的对象会抛出错误的原因</p><h3 id="JSON-stringify-第九大特性"><a href="#JSON-stringify-第九大特性" class="headerlink" title="JSON.stringify() 第九大特性"></a>JSON.stringify() 第九大特性</h3><p><strong>所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123; [<span class="built_in">Symbol</span>.for(<span class="string">"json"</span>)]: <span class="string">"stringify"</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">k, v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> k === <span class="string">"symbol"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>replacer</code> 是 <code>JSON.stringify()</code> 的第二个参数，我们比较少用到，所以很多时候我们会忘记 <code>JSON.stringify()</code> 第二个、第三个参数，场景不多，但是用的好的话会非常方便，关于 <code>JSON.stringify()</code> 第九大特性的例子中对 replacer 参数不明白的同学先别急，其实很简单，我们马上就会在下面的学习中弄懂。</p><h2 id="第二个参数和第三个参数"><a href="#第二个参数和第三个参数" class="headerlink" title="第二个参数和第三个参数"></a>第二个参数和第三个参数</h2><p>JSON.stringify() 第二个参数和第三个参数</p><h3 id="强大的第二个参数："><a href="#强大的第二个参数：" class="headerlink" title="强大的第二个参数："></a>强大的第二个参数：</h3><p>作为函数时，它有两个参数，键（key）和值（value），函数类似就是数组方法 map、filter 等方法的回调函数，对每一个属性值都会执行一次该函数（期间我们还简单实现过一个 map 函数）。<br>如果 replacer 是一个数组，数组的值代表将被序列化成 JSON 字符串的属性名。</p><h3 id="华丽的第三个参数："><a href="#华丽的第三个参数：" class="headerlink" title="华丽的第三个参数："></a>华丽的第三个参数：</h3><p>如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）；</p><p>如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5decf09de51d45584d238319#heading-4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;通过需求学习JSON-stringify&quot;&gt;&lt;a href=&quot;#通过需求学习JSON-stringify&quot; class=&quot;headerlink&quot; title=&quot;通过需求学习JSON.stringify()&quot;&gt;&lt;/a&gt;通过需求学习JSON.stringify()&lt;/h2&gt;&lt;p&gt;首先我们在开发的过程当中遇到这样一个处理数据的需求&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; todayILearn = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _id: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content: &lt;span class=&quot;string&quot;&gt;&#39;今天学习 JSON.stringify()，我很开心！&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  created_at: &lt;span class=&quot;string&quot;&gt;&#39;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  updated_at: &lt;span class=&quot;string&quot;&gt;&#39;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们需要将上面这个对象处理成下面这个对象&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; todayILearn = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  id: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content: &lt;span class=&quot;string&quot;&gt;&#39;今天学习 JSON.stringify()，我很开心！&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  createdAt: &lt;span class=&quot;string&quot;&gt;&#39;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  updatedAt: &lt;span class=&quot;string&quot;&gt;&#39;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是在不改变属性的值的前提下，将对象属性修改一下。 把_id  改成 id，把 updated_at 改成 updatedAt，把 created_at 改成 createdAt。我们现在通过这个小小的需求来见识一下 JSON.stringify() 的强大吧。&lt;/p&gt;
&lt;p&gt;首先要解决这个问题我们有很多种解决方式，我们先提供两种不优雅的解决方案：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案一：一次遍历+多声明一个变量&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 多一个变量存储&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; todayILearnTemp = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [key, value] &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.entries(todayILearn)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key === &lt;span class=&quot;string&quot;&gt;&quot;_id&quot;&lt;/span&gt;) todayILearnTemp[&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key === &lt;span class=&quot;string&quot;&gt;&quot;created_at&quot;&lt;/span&gt;) todayILearnTemp[&lt;span class=&quot;string&quot;&gt;&quot;createdAt&quot;&lt;/span&gt;] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key === &lt;span class=&quot;string&quot;&gt;&quot;updatedAt&quot;&lt;/span&gt;) todayILearnTemp[&lt;span class=&quot;string&quot;&gt;&quot;updatedAt&quot;&lt;/span&gt;] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; todayILearnTemp[key] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(todayILearnTemp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 结果：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; id: 1,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  content: &#39;今天学习 JSON.stringify()，我很开心！&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  createdAt: &#39;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  updated_at: &#39;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#39; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方案一完全没有问题，可以实现。但是多声明了一个变量又加上一层循环并且还有很多的 if else 语句，怎么都显得不太优雅。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案二：暴力 delete 属性和增加属性&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 极致的暴力美学&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todayILearn.id = todayILearn._id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todayILearn.createdAt = todayILearn.created_at;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todayILearn.updatedAt = todayILearn.updated_at;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; todayILearn._id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; todayILearn.created_at;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; todayILearn.updated_at;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(todayILearn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 	太暴力😢&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&amp;#123; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  content: &#39;今天学习 JSON.stringify()，我很开心！&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  id: 1,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  createdAt: &#39;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  updatedAt: &#39;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#39; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直接 delete 暴力解决太粗鲁了，而且有一个缺点，属性的顺序变了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案三：序列化+ replace 美学典范&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mapObj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _id: &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  created_at: &lt;span class=&quot;string&quot;&gt;&quot;createdAt&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  updated_at: &lt;span class=&quot;string&quot;&gt;&quot;updatedAt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(todayILearn).replace(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /_id|created_at|updated_at/gi,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    matched =&amp;gt; mapObj[matched])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// id: 1,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  content: &#39;今天学习 JSON.stringify()，我很开心！&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  createdAt: &#39;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  updatedAt: &#39;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#39; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/8/16ee5ace18ca5dbb?imageslim&quot; alt=&quot;Json.Stringify&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="https://zhanghao-web.github.io/categories/Js/"/>
    
    
      <category term="Js" scheme="https://zhanghao-web.github.io/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>使用vue高阶组件</title>
    <link href="https://zhanghao-web.github.io/2019/11/25/Vue/%E4%BD%BF%E7%94%A8vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
    <id>https://zhanghao-web.github.io/2019/11/25/Vue/使用vue高阶组件/</id>
    <published>2019-11-25T02:48:54.000Z</published>
    <updated>2020-01-28T10:04:15.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h1><p><code>高阶组件(HOC)</code>是一种架构模式，在 React 中非常常见，但也可以在 Vue 中使用。它可以被描述为一种<strong>在组件之间共享公共功能而不需要重复代码</strong>的方法。HOC 的目的是增强组件的功能。它允许在项目中实现可重用性和可维护性。</p><ul><li>只要你向一个方法传入组件，然后返回一个新的组件，这就是一个 HOC。</li></ul><blockquote><p>高阶组件在以下方面非常有用: 1.操作属性。 2.操作数据和数据抽象。 3.代码重用</p></blockquote><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>在我们开始教程之前，需要了解以下几点：</p><p>使用 Vue 框架的经验。<br>知道如何使用 vue-cli 设置应用程序。<br>JavaScript 和 Vue 的基本知识<br>Node (8)<br>npm (5.2.0)</p><h2 id="Vue-中的高阶组件模式"><a href="#Vue-中的高阶组件模式" class="headerlink" title="Vue 中的高阶组件模式"></a>Vue 中的高阶组件模式</h2><p>虽然高阶组件通常与 React 相关联，但是为 Vue 组件创建高阶组件是很有可能的。在 Vue 中创建高阶组件的模式如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hoccomponent.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> ComponentExample <span class="keyword">from</span> <span class="string">'@/components/ComponentExample.vue'</span></span><br><span class="line"><span class="keyword">const</span> HoComponent = <span class="function">(<span class="params">component</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Vue.component(<span class="string">'withSubscription'</span>, &#123;</span><br><span class="line">        render(createElement) &#123;</span><br><span class="line">            <span class="keyword">return</span> createElement(component)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> HoComponentEnhanced = HoComponent(ComponentExample);</span><br></pre></td></tr></table></figure><p>如上面的代码块所示，<code>HoComponent</code> 函数接受一个组件作为参数，并创建一个新组件来渲染传进来的组件。</p><h2 id="一个简单的-HOC-示例"><a href="#一个简单的-HOC-示例" class="headerlink" title="一个简单的 HOC 示例"></a>一个简单的 HOC 示例</h2><p>在本教程中，我们将介绍一个使用高阶组件的示例。在介绍高阶组件之前，我们将了解在没有高阶组件的情况下，当前的代码库是如何工作的，然后了解如何进行抽象。</p><p><a href="https://codesandbox.io/embed/llvq04nx4l" target="_blank" rel="noopener">https://codesandbox.io/embed/llvq04nx4l</a></p><p>正如上面的 CodeSandbox 所示，该应用程序会显示一个纸业公司及其净资产的列表，以及《办公室》(美国)中的人物及其获奖情况。</p><p>我们获得应用程序所需的所有数据来源只有一个，那就是<code>mockData.js</code>文件。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/mockData.js</span></span><br><span class="line"><span class="keyword">const</span> staff = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"Michael Scott"</span>,</span><br><span class="line">    id: <span class="number">0</span>,</span><br><span class="line">    awards: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"Toby Flenderson"</span>,</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    awards: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"Dwight K. Schrute"</span>,</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    awards: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"Jim Halpert"</span>,</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    awards: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"Andy Bernard"</span>,</span><br><span class="line">    id: <span class="number">4</span>,</span><br><span class="line">    awards: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"Phyllis Vance"</span>,</span><br><span class="line">    id: <span class="number">5</span>,</span><br><span class="line">    awards: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"Stanley Hudson"</span>,</span><br><span class="line">    id: <span class="number">6</span>,</span><br><span class="line">    awards: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> paperCompanies = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">0</span>,</span><br><span class="line">    name: <span class="string">"Staples"</span>,</span><br><span class="line">    net: <span class="number">10000000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">"Dundler Mufflin"</span>,</span><br><span class="line">    net: <span class="number">5000000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">"Michael Scott Paper Company"</span>,</span><br><span class="line">    net: <span class="number">300000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    name: <span class="string">"Prince Family Paper"</span>,</span><br><span class="line">    net: <span class="number">30000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  getStaff() &#123;</span><br><span class="line">    <span class="keyword">return</span> staff;</span><br><span class="line">  &#125;,</span><br><span class="line">  getCompanies() &#123;</span><br><span class="line">    <span class="keyword">return</span> paperCompanies;</span><br><span class="line">  &#125;,</span><br><span class="line">  increaseAward(id) &#123;</span><br><span class="line">    staff[id].awards++;</span><br><span class="line">  &#125;,</span><br><span class="line">  decreaseAward(id) &#123;</span><br><span class="line">    staff[id].awards--;</span><br><span class="line">  &#125;,</span><br><span class="line">  setNetWorth(id) &#123;</span><br><span class="line">    paperCompanies[id].net = <span class="built_in">Math</span>.random() * (<span class="number">5000000</span> - <span class="number">50000</span>) + <span class="number">50000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的代码片段中，有几个 const 变量保存了公司和员工列表的信息。我们也导出了一些函数，</p><blockquote><p>实现以下功能：<br>返回员工列表<br>返回公司列表<br>增加和减少对特定员工的奖励，最后<br>最后，设定公司的净值</p></blockquote><p>接下来，我们看看 <code>Staff.vue</code> 和 <code>Companies.vue</code> 组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Staff.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Staff List<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(staff, i) in staffList"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">      &#123;&#123; staff.name &#125;&#125;: &#123;&#123; staff.awards &#125;&#125; Salesman of the year Award 🎉</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increaseAwards(staff.id);"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decreaseAwards(staff.id);"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> mockData <span class="keyword">from</span> <span class="string">"./mockData.js"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        staffList: mockData.getStaff()</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increaseAwards(id) &#123;</span><br><span class="line">        mockData.increaseAward(id);</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.staffList = mockData.getStaff();</span></span><br><span class="line">      &#125;,</span><br><span class="line">      decreaseAwards(id) &#123;</span><br><span class="line">        mockData.decreaseAward(id);</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.staffList = mockData.getStaff();</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码块中，数据实例变量staffList被赋值为函数mockData.getStaff()返回的内容。我们也有increaseAwards和decreaseAwards函数，分别调用mockData.increaseAward 和 mockData.decreaseAward。传递给这些函数的id 是从渲染的模板中获得的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Companies.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Paper Companies<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(companies, i) in companies"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">      &#123;&#123; companies.name &#125;&#125; - $&#123;&#123; companies.net</span><br><span class="line">      &#125;&#125;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setWorth(companies.id);"</span>&gt;</span>Set Company Value<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> mockData <span class="keyword">from</span> <span class="string">"./mockData.js"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        companies: mockData.getCompanies()</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      setWorth(id) &#123;</span><br><span class="line">        mockData.setNetWorth(id);</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.companies = mockData.getCompanies();</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码块中，数据实例变量companies 被赋值为函数mockData.getCompanies()的返回内容。我们还有setWorth函数，它通过将公司的 id 传递给mockData.setNetWorth来设置一个随机值作为净值。传递给函数的id是从渲染的模板中获得的。</p><p>现在我们已经看到了这两个组件是如何工作的，我们可以</p><blockquote><p>找出它们之间的共同点，并将其抽象如下：</p></blockquote><p>从数据源获取数据 (mockData.js)<br>onClick 函数</p><p>我们来看看如何将上面的操作放到高阶组件中，以避免代码重复并确保可重用性。</p><p>HoComponent 函数接受两个参数，一个组件和fetchData。fetchData方法用于确定要在表示组件中显示什么。这意味着无论在哪里使用高阶组件，作为fetchData 传递的函数都将被用来从mockData 中获取数据。</p><p>然后将数据实例returnedData 设置为fetchData的内容，然后作为props 传递给在高阶组件中创建的新组件。</p><p>让我们看看新创建的高阶组件如何在应用程序中使用。我们需要编辑Staff.vue 和Companies.vue。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Staff.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Staff List<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(staff, i) in returnedData"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">      &#123;&#123; staff.name &#125;&#125;: &#123;&#123; staff.awards &#125;&#125; Salesman of the year Award 🎉</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increaseAwards(staff.id);"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decreaseAwards(staff.id);"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">"returnedData"</span>]</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Companies.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Paper Companies<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(companies, i) in returnedData"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">      &#123;&#123; companies.name &#125;&#125; - $&#123;&#123; companies.net</span><br><span class="line">      &#125;&#125;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setWorth(companies.id);"</span>&gt;</span>Set Company Value<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">"returnedData"</span>]</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正如你在上面的代码块中看到的，对于这两个组件，我们去掉了函数和数据实例变量，显示内容所需的所有数据现在都将从这些props中获得。对于删掉的函数，我们将很快会讲到。</p><p>在 App.vue 组件中，用以下代码编辑script 标签中的现有内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// src/App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// import the Companies component</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Companies <span class="keyword">from</span> <span class="string">"./components/Companies"</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// import the Staff component</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Staff <span class="keyword">from</span> <span class="string">"./components/Staff"</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// import the higher order component</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HoComponent <span class="keyword">from</span> <span class="string">"./components/HoComponent.js"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// Create a const variable which contains the Companies component wrapped in the higher order component</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> CompaniesComponent = HoComponent(Companies, mockData =&gt; mockData.getCompanies()</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// Create a const variable which contains the Staff component wrapped in the higher order component</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> StaffComponent = HoComponent(Staff, mockData =&gt; mockData.getStaff());</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"App"</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      CompaniesComponent,</span><br><span class="line">      StaffComponent</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码块中，HoComponent用于包装 Staff 和 Companies 组件。</p><p>每个组件作为HoComponent 的第一个参数传入，第二个参数是一个函数，它返回另一个函数，指定应该从mockData获取什么数据。这是我们之前创建的高阶组件(HoComponent.js)中的fetchData 函数。</p><p>如果你现在刷新应用程序，你应该仍然可以看到来自mockData 文件的数据像往常一样呈现。唯一的区别是，这些按钮无法工作，因为它们还没有绑定到任何函数。让我们解决这个问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// src/App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CompaniesComponent</span> @<span class="attr">click</span>=<span class="string">"onEventHappen"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StaffComponent</span> @<span class="attr">click</span>=<span class="string">"onEventHappen"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// import the Companies component</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Companies <span class="keyword">from</span> <span class="string">"./components/Companies"</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// import the Staff component</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Staff <span class="keyword">from</span> <span class="string">"./components/Staff"</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// import the higher order component</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HoComponent <span class="keyword">from</span> <span class="string">"./components/HoComponent.js"</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// import the source data from mockData only to be used for event handlers</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> sourceData <span class="keyword">from</span> <span class="string">"./components/mockData.js"</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// Create a const variable which contains the Companies component wrapped in the higher order component</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> CompaniesComponent = HoComponent(Companies, mockData =&gt;</span></span><br><span class="line">  mockData.getCompanies()</span><br><span class="line">  );</span><br><span class="line"><span class="actionscript">  <span class="comment">// Create a const variable which contains the Staff component wrapped in the higher order component</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> StaffComponent = HoComponent(Staff, mockData =&gt; mockData.getStaff());</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"App"</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      CompaniesComponent,</span><br><span class="line">      StaffComponent</span><br><span class="line">      &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onEventHappen(value) &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// set the variable setFunction to the name of the function that was passed iin the value emitted from child component i.e. if value.name is 'increaseAward', setFunction is set to increaseAward()</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> setFunction = sourceData[value.name];</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// call the corresponding function with the id passed as an argument.</span></span></span><br><span class="line">        setFunction(value.id);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line">  font-family: "Avenir", Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码块中，我们在App.vue组件中添加了一个事件监听器。</p><p>vue的组件。每当Staff.vue 或Companies.vue 组件被点击时，onEventHappen 方法将会被调用。</p><p>在onEventHappen方法中，我们将变量setFunction 设置为从子组件发出的值中传递的函数名，也就是说，如果value.name是’increaseAward’，那么setFunction设置为increaseAward()。setFunction 将以id作为参数执行。</p><p>最后，为了将事件监听器传递给封装在高阶组件中的组件，我们需要在 HoComponent.js文件中添加下面这行代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">returnedData: <span class="keyword">this</span>.returnedData</span><br><span class="line">&#125;,</span><br><span class="line">on: &#123; ...this.$listeners &#125;</span><br></pre></td></tr></table></figure><h2 id="vue-hoc"><a href="#vue-hoc" class="headerlink" title="vue-hoc"></a>vue-hoc</h2><p>或者，您可以使用<a href="https://github.com/jackmellis/vue-hoc" target="_blank" rel="noopener">vue-hoc</a>库来帮助创建高阶组件。vue-hoc帮助你轻松地创建高阶组件，你要做的就是传递基本组件、应用于HOC的一系列组件选项和在渲染阶段传递给组件的数据属性。<br>vue-hoc 可用如下命令安装：<br>    <code>npm install --save vue-hoc</code></p><p>复制代码vue-hoc插件有一些例子可以让你开始创建更高阶的组件，你可以<a href="https://github.com/jackmellis/vue-hoc/blob/master/packages/vue-hoc/README.md" target="_blank" rel="noopener">查看这里</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前文&quot;&gt;&lt;a href=&quot;#前文&quot; class=&quot;headerlink&quot; title=&quot;前文&quot;&gt;&lt;/a&gt;前文&lt;/h1&gt;&lt;p&gt;&lt;code&gt;高阶组件(HOC)&lt;/code&gt;是一种架构模式，在 React 中非常常见，但也可以在 Vue 中使用。它可以被描述为一种&lt;strong&gt;在组件之间共享公共功能而不需要重复代码&lt;/strong&gt;的方法。HOC 的目的是增强组件的功能。它允许在项目中实现可重用性和可维护性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只要你向一个方法传入组件，然后返回一个新的组件，这就是一个 HOC。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;高阶组件在以下方面非常有用: 1.操作属性。 2.操作数据和数据抽象。 3.代码重用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h2&gt;&lt;p&gt;在我们开始教程之前，需要了解以下几点：&lt;/p&gt;
&lt;p&gt;使用 Vue 框架的经验。&lt;br&gt;知道如何使用 vue-cli 设置应用程序。&lt;br&gt;JavaScript 和 Vue 的基本知识&lt;br&gt;Node (8)&lt;br&gt;npm (5.2.0)&lt;/p&gt;
&lt;h2 id=&quot;Vue-中的高阶组件模式&quot;&gt;&lt;a href=&quot;#Vue-中的高阶组件模式&quot; class=&quot;headerlink&quot; title=&quot;Vue 中的高阶组件模式&quot;&gt;&lt;/a&gt;Vue 中的高阶组件模式&lt;/h2&gt;&lt;p&gt;虽然高阶组件通常与 React 相关联，但是为 Vue 组件创建高阶组件是很有可能的。在 Vue 中创建高阶组件的模式如下所示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// hoccomponent.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Vue &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;vue&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ComponentExample &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;@/components/ComponentExample.vue&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; HoComponent = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;component&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Vue.component(&lt;span class=&quot;string&quot;&gt;&#39;withSubscription&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        render(createElement) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; createElement(component)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; HoComponentEnhanced = HoComponent(ComponentExample);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上面的代码块所示，&lt;code&gt;HoComponent&lt;/code&gt; 函数接受一个组件作为参数，并创建一个新组件来渲染传进来的组件。&lt;/p&gt;
&lt;h2 id=&quot;一个简单的-HOC-示例&quot;&gt;&lt;a href=&quot;#一个简单的-HOC-示例&quot; class=&quot;headerlink&quot; title=&quot;一个简单的 HOC 示例&quot;&gt;&lt;/a&gt;一个简单的 HOC 示例&lt;/h2&gt;&lt;p&gt;在本教程中，我们将介绍一个使用高阶组件的示例。在介绍高阶组件之前，我们将了解在没有高阶组件的情况下，当前的代码库是如何工作的，然后了解如何进行抽象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/embed/llvq04nx4l&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codesandbox.io/embed/llvq04nx4l&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正如上面的 CodeSandbox 所示，该应用程序会显示一个纸业公司及其净资产的列表，以及《办公室》(美国)中的人物及其获奖情况。&lt;/p&gt;
&lt;p&gt;我们获得应用程序所需的所有数据来源只有一个，那就是&lt;code&gt;mockData.js&lt;/code&gt;文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zhanghao-web.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://zhanghao-web.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>一张图理清 Vue 3.0 的响应式系统</title>
    <link href="https://zhanghao-web.github.io/2019/10/29/Vue/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%90%86%E6%B8%85-Vue-3-0-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zhanghao-web.github.io/2019/10/29/Vue/一张图理清-Vue-3-0-的响应式系统/</id>
    <published>2019-10-29T09:03:11.000Z</published>
    <updated>2020-01-28T10:04:15.071Z</updated>
    
    <content type="html"><![CDATA[<p>转自</p><p>作者：Jrain<br><a href="https://juejin.im/post/5d9da45af265da5b8072de5d" target="_blank" rel="noopener">链接</a></p><p><img src="https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageslim" alt="vue reactive"></p><h2 id="一个基本的例子"><a href="#一个基本的例子" class="headerlink" title="一个基本的例子"></a>一个基本的例子</h2><p>Vue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 <code>packages/reactivity</code> 模块下调试。</p><p>1.在项目根目录运行 <code>yarn dev reactivity</code>，然后进入 <code>packages/reactivity</code> 目录找到产出的 <code>dist/reactivity.global.js</code> 文件。<br>2.新建一个 <code>index.html</code>，写入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/reactivity.global.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> &#123; reactive, effect &#125; = VueObserver</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> origin = &#123;</span></span><br><span class="line">  count: 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> state = reactive(origin)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> count = state.count</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">`set count to <span class="subst">$&#123;count&#125;</span>`</span>)</span></span><br><span class="line">&#125;</span><br><span class="line">effect(fn)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在浏览器打开该文件，于控制台执行 <code>state.count++</code>，便可看到输出 <code>set count to 1</code>。</li></ol><p>在上述的例子中，我们使用 <code>reactive()</code> 函数把 <code>origin</code> 对象转化成了<code>Proxy</code> 对象 <code>state</code>；使用 <code>effect()</code> 函数把 <code>fn()</code> 作为响应式回调。当 <code>state.count</code> 发生变化时，便触发了 <code>fn()</code>。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。</p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><blockquote><p>在初始化阶段，主要做了两件事。</p></blockquote><p>1.把 origin 对象转化成响应式的 Proxy 对象 state。<br>2.把函数 fn() 作为一个响应式的 effect 函数。</p><p>大家都知道，Vue 3.0 使用了 <code>Proxy</code> 来代替之前的 <code>Object.defineProperty()</code>，改写了对象的 <code>getter/setter</code>，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 <code>getter/setter</code> 的，这个在后续的”<strong>依赖收集阶段</strong>“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 <code>reactive()</code> 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reactive (target)&#123;</span><br><span class="line">    <span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler);</span><br><span class="line">    <span class="keyword">return</span> observed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个普通的函数 <code>fn()</code> 被 <code>effect()</code> 包裹之后，就会变成一个响应式的 effect 函数，而 <code>fn()</code> 也会被立即执行一次。</p><p><strong>由于在 fn() 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集</strong>。</p><p>除此之外，这个 effect 函数也会被压入一个名为”<code>activeReactiveEffectStack</code>“（此处为 <code>effectStack</code>）的栈中，供后续依赖收集的时候使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">effect</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 构造一个 effect</span></span><br><span class="line">  <span class="keyword">const</span> effect = <span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> run(effect, fn, args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 立即执行一次</span></span><br><span class="line">  effect()</span><br><span class="line">  <span class="keyword">return</span> effect</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">effect, fn, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (effectStack.indexOf(effect) === <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 往池子里放入当前 effect</span></span><br><span class="line">      effectStack.push(effect)</span><br><span class="line">      <span class="comment">// 立即执行一遍 fn()</span></span><br><span class="line">      <span class="comment">// fn() 执行过程会完成依赖收集，会用到 effect</span></span><br><span class="line">      <span class="keyword">return</span> fn(...args)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 完成依赖收集后从池子中扔掉这个 effect</span></span><br><span class="line">      effectStack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。<br><a id="more"></a></p><h3 id="依赖收集阶段"><a href="#依赖收集阶段" class="headerlink" title="依赖收集阶段"></a>依赖收集阶段</h3><p>这个阶段的触发时机，就是在 <code>effect</code> 被立即执行，其内部的 <code>fn()</code> 触发了 <code>Proxy</code> 对象的 <code>getter</code> 的时候。简单来说，只要执行到类似 <code>state.count</code> 的语句，就会触发 <code>state 的 getter</code>。</p><p>依赖收集阶段最重要的目的，就是建立一份”依赖收集表“，也就是图示的”<code>targetMap</code>“。<code>targetMap</code> 是一个 <code>WeakMap</code>，其 key 值是<del>当前的 <code>Prox</code>y 对象 <code>state</code></del>代理前的对象origin，而 value 则是该对象所对应的 <code>depsMap</code>。</p><p><code>depsMap</code> 是一个 Map，key 值为触发 <code>getter</code> 时的属性值（此处为 count），而 value 则是触发过该属性值所对应的各个 effect。</p><p>还是有点绕？那么我们再举个例子。假设有个 Proxy 对象和 effect 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> effect1 = effect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'effect1: '</span> + state.count)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> effect2 = effect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'effect2: '</span> + state.age)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> effect3 = effect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'effect3: '</span> + state.count, state.age)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样，<code>{ target -&gt; key -&gt; dep }</code> 的对应关系就建立起来了，依赖收集也就完成了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">track</span> (<span class="params">target, operationType, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> effect = effectStack[effectStack.length - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span> (effect) &#123;</span><br><span class="line">    <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">    <span class="keyword">if</span> (depsMap === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      targetMap.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">    <span class="keyword">if</span> (dep === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      depsMap.set(key, (dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dep.has(effect)) &#123;</span><br><span class="line">      dep.add(effect)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弄明白依赖收集表 targetMap 是非常重要的，因为这是整个响应式系统核心中的核心。</p><h3 id="响应阶段"><a href="#响应阶段" class="headerlink" title="响应阶段"></a>响应阶段</h3><p>回顾上一章节的例子，我们得到了一个 <code>{ count: 0, age: 18 }</code> 的 Proxy，并构造了三个 effect。在控制台上看看效果：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/9/16dafca37dadf75d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="effect"></p><p>当修改对象的某个属性值的时候，会触发对应的 <code>setter</code>。</p><p>setter 里面的 <code>trigger()</code> 函数会从依赖收集表里找到当前属性对应的各个 <code>dep</code>，然后把它们推入到 <code>effects</code> 和 <code>computedEffects</code>（计算属性） 队列中，最后通过 <code>scheduleRun()</code> 挨个执行里面的 effect。</p><p>由于已经建立了依赖收集表，所以要找到属性所对应的 dep 也就轻而易举了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span> (<span class="params">target, operationType, key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 取得对应的 depsMap</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span> (depsMap === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取得对应的各个 dep</span></span><br><span class="line">  <span class="keyword">const</span> effects = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  <span class="keyword">if</span> (key !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">    dep &amp;&amp; dep.forEach(<span class="function"><span class="params">effect</span> =&gt;</span> &#123;</span><br><span class="line">      effects.add(effect)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 简化版 scheduleRun，挨个执行 effect</span></span><br><span class="line">  effects.forEach(<span class="function"><span class="params">effect</span> =&gt;</span> &#123;</span><br><span class="line">    effect()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，响应式阶段完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;/p&gt;
&lt;p&gt;作者：Jrain&lt;br&gt;&lt;a href=&quot;https://juejin.im/post/5d9da45af265da5b8072de5d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageslim&quot; alt=&quot;vue reactive&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一个基本的例子&quot;&gt;&lt;a href=&quot;#一个基本的例子&quot; class=&quot;headerlink&quot; title=&quot;一个基本的例子&quot;&gt;&lt;/a&gt;一个基本的例子&lt;/h2&gt;&lt;p&gt;Vue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 &lt;code&gt;packages/reactivity&lt;/code&gt; 模块下调试。&lt;/p&gt;
&lt;p&gt;1.在项目根目录运行 &lt;code&gt;yarn dev reactivity&lt;/code&gt;，然后进入 &lt;code&gt;packages/reactivity&lt;/code&gt; 目录找到产出的 &lt;code&gt;dist/reactivity.global.js&lt;/code&gt; 文件。&lt;br&gt;2.新建一个 &lt;code&gt;index.html&lt;/code&gt;，写入如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./dist/reactivity.global.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; reactive, effect &amp;#125; = VueObserver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; origin = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  count: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state = reactive(origin)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; count = state.count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`set count to &lt;span class=&quot;subst&quot;&gt;$&amp;#123;count&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;effect(fn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;在浏览器打开该文件，于控制台执行 &lt;code&gt;state.count++&lt;/code&gt;，便可看到输出 &lt;code&gt;set count to 1&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在上述的例子中，我们使用 &lt;code&gt;reactive()&lt;/code&gt; 函数把 &lt;code&gt;origin&lt;/code&gt; 对象转化成了&lt;code&gt;Proxy&lt;/code&gt; 对象 &lt;code&gt;state&lt;/code&gt;；使用 &lt;code&gt;effect()&lt;/code&gt; 函数把 &lt;code&gt;fn()&lt;/code&gt; 作为响应式回调。当 &lt;code&gt;state.count&lt;/code&gt; 发生变化时，便触发了 &lt;code&gt;fn()&lt;/code&gt;。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。&lt;/p&gt;
&lt;h3 id=&quot;初始化阶段&quot;&gt;&lt;a href=&quot;#初始化阶段&quot; class=&quot;headerlink&quot; title=&quot;初始化阶段&quot;&gt;&lt;/a&gt;初始化阶段&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在初始化阶段，主要做了两件事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.把 origin 对象转化成响应式的 Proxy 对象 state。&lt;br&gt;2.把函数 fn() 作为一个响应式的 effect 函数。&lt;/p&gt;
&lt;p&gt;大家都知道，Vue 3.0 使用了 &lt;code&gt;Proxy&lt;/code&gt; 来代替之前的 &lt;code&gt;Object.defineProperty()&lt;/code&gt;，改写了对象的 &lt;code&gt;getter/setter&lt;/code&gt;，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 &lt;code&gt;getter/setter&lt;/code&gt; 的，这个在后续的”&lt;strong&gt;依赖收集阶段&lt;/strong&gt;“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 &lt;code&gt;reactive()&lt;/code&gt; 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; reactive (target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; observed = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Proxy&lt;/span&gt;(target,handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; observed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当一个普通的函数 &lt;code&gt;fn()&lt;/code&gt; 被 &lt;code&gt;effect()&lt;/code&gt; 包裹之后，就会变成一个响应式的 effect 函数，而 &lt;code&gt;fn()&lt;/code&gt; 也会被立即执行一次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于在 fn() 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;除此之外，这个 effect 函数也会被压入一个名为”&lt;code&gt;activeReactiveEffectStack&lt;/code&gt;“（此处为 &lt;code&gt;effectStack&lt;/code&gt;）的栈中，供后续依赖收集的时候使用。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;effect&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 构造一个 effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; effect = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;effect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;...args&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; run(effect, fn, args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 立即执行一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  effect()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; effect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;effect, fn, args&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (effectStack.indexOf(effect) === &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 往池子里放入当前 effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      effectStack.push(effect)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 立即执行一遍 fn()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// fn() 执行过程会完成依赖收集，会用到 effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fn(...args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 完成依赖收集后从池子中扔掉这个 effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      effectStack.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。&lt;br&gt;
    
    </summary>
    
      <category term="Vue3.x" scheme="https://zhanghao-web.github.io/categories/Vue3-x/"/>
    
    
      <category term="Vue" scheme="https://zhanghao-web.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Node.js中的进程与线程</title>
    <link href="https://zhanghao-web.github.io/2019/09/30/Node/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Node-js%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>https://zhanghao-web.github.io/2019/09/30/Node/深入理解Node-js中的进程与线程/</id>
    <published>2019-09-30T05:30:38.000Z</published>
    <updated>2020-01-28T10:04:15.049Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5d43017be51d4561f40adcf9" target="_blank" rel="noopener">原文地址</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>进程</code>与<code>线程</code>是一个程序员的必知概念，面试经常被问及，但是一些文章内容只是讲讲理论知识，可能一些小伙伴并没有真的理解，在实际开发中应用也比较少。本篇文章除了介绍概念，通过Node.js 的角度讲解<code>进程</code>与<code>线程</code>，并且讲解一些在项目中的实战的应用，让你不仅能迎战面试官还可以在实战中完美应用</p><h2 id="文章导览"><a href="#文章导览" class="headerlink" title="文章导览"></a>文章导览</h2><p><img src="https://user-gold-cdn.xitu.io/2019/8/8/16c6cf612c275894?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="进程与线程"></p><h2 id="面试会问"><a href="#面试会问" class="headerlink" title="面试会问"></a>面试会问</h2><ul><li>Node.js是单线程吗？</li></ul><ul><li>Node.js 做耗时的计算时候，如何避免阻塞？</li></ul><ul><li>Node.js如何实现多进程的开启和关闭？</li></ul><ul><li>Node.js可以创建线程吗？</li></ul><ul><li>你们开发过程中如何实现进程守护的？</li></ul><ul><li>除了使用第三方模块，你们自己是否封装过一个多进程架构?</li></ul><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程<code>Process</code>是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，进程是线程的容器（来自百科）。进程是资源分配的最小单位。我们启动一个服务、运行一个实例，就是开一个服务进程，例如 Java 里的 JVM 本身就是一个进程，Node.js 里通过 node app.js 开启一个服务进程，多进程就是进程的复制（fork），fork 出来的<strong>每个进程都拥有自己的独立空间地址、数据栈，一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了 IPC 通信，进程之间才可数据共享</strong>。</p><ul><li>Node.js开启服务进程例子</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    process.title=<span class="string">'程序员成长指北测试进程'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'进程id'</span>,process.pid)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行上面代码后，以下为 Mac 系统自带的监控工具 “活动监视器” 所展示的效果，可以看到我们刚开启的 Nodejs 进程 7663</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/1/16c4dc0ca13fec40?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="进程1"></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程是操作系统能够进行运算调度的最小单位，首先我们要清楚线程是隶属于进程的，被包含于进程之中。<strong>一个线程只能隶属于一个进程，但是一个进程是可以拥有多个线程的</strong>。</p><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p><strong>单线程就是一个进程只开一个线程</strong></p><p>Javascript 就是属于单线程，程序顺序执行(这里暂且不提JS异步)，可以想象一下队列，前面一个执行完之后，后面才可以执行，当你在使用单线程语言编码时切勿有过多耗时的同步操作，否则线程会造成阻塞，导致后续响应无法处理。你如果采用 Javascript 进行编码时候，请尽可能的利用Javascript异步操作的特性。</p><p><strong>经典计算耗时造成线程阻塞的例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> longComputation = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e10</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">'/compute'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'计算开始'</span>,<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    <span class="keyword">const</span> sum = longComputation();</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'计算结束'</span>,<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    <span class="keyword">return</span> res.end(<span class="string">`Sum is <span class="subst">$&#123;sum&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.end(<span class="string">'Ok'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="comment">//计算开始 2019-07-28T07:08:49.849Z</span></span><br><span class="line"><span class="comment">//计算结束 2019-07-28T07:09:04.522Z</span></span><br></pre></td></tr></table></figure><p>查看打印结果，当我们调用<code>127.0.0.1:3000/compute</code><br>的时候，如果想要调用其他的路由地址比如<code>127.0.0.1/</code>大约需要15秒时间，也可以说一个用户请求完第一个compute接口后需要等待15秒，这对于用户来说是极其不友好的。下文我会通过创建多进程的方式child_process.fork 和cluster 来解决解决这个问题。<br><a id="more"></a></p><blockquote><p>单线程的一些说明</p><ul><li>Node.js 虽然是单线程模型，但是其基于事件驱动、异步非阻塞模式，可以应用于高并发场景，避免了线程创建、线程之间上下文切换所产生的资源开销。</li><li>当你的项目中需要有大量计算，CPU 耗时的操作时候，要注意考虑开启多进程来完成了。</li><li>Node.js 开发过程中，错误会引起整个应用退出，应用的健壮性值得考验，尤其是错误的异常抛出，以及进程守护是必须要做的。</li><li>单线程无法利用多核CPU，但是后来Node.js 提供的API以及一些第三方工具相应都得到了解决，文章后面都会讲到。</li></ul></blockquote><h2 id="Node-js-中的进程与线程"><a href="#Node-js-中的进程与线程" class="headerlink" title="Node.js 中的进程与线程"></a>Node.js 中的进程与线程</h2><p>Node.js 是 Javascript 在服务端的运行环境，构建在 chrome 的 V8 引擎之上，基于事件驱动、非阻塞I/O模型，充分利用操作系统提供的异步 I/O 进行多任务的执行，适合于 I/O 密集型的应用场景，因为异步，程序无需阻塞等待结果返回，而是基于回调通知的机制，原本同步模式等待的时间，则可以用来处理其它任务</p><blockquote><p>科普：在 Web 服务器方面，著名的 Nginx 也是采用此模式（事件驱动），避免了多线程的线程创建、线程上下文切换的开销，Nginx 采用 C 语言进行编写，主要用来做高性能的 Web 服务器，不适合做业务。</p></blockquote><p>Web业务开发中，如果你有高并发应用场景那么 Node.js 会是你不错的选择。</p><p>在单核 CPU 系统之上我们采用 单进程 + 单线程 的模式来开发。在多核 CPU 系统之上，可以通过 <code>child_process.fork</code> 开启多个进程（Node.js 在 v0.8 版本之后新增了Cluster 来实现多进程架构） ，即 多进程 + 单线程 模式。注意：开启多进程不是为了解决高并发，主要是解决了单进程模式下 Node.js CPU 利用率不足的情况，充分利用多核 CPU 的性能。</p><h3 id="Node-js-中的进程"><a href="#Node-js-中的进程" class="headerlink" title="Node.js 中的进程"></a>Node.js 中的进程</h3><h4 id="process-模块"><a href="#process-模块" class="headerlink" title="process 模块"></a>process 模块</h4><p>Node.js 中的进程 Process 是一个全局对象，无需 require 直接使用，给我们提供了当前进程中的相关信息。官方文档提供了详细的说明，感兴趣的可以亲自实践下 Process 文档。</p><ul><li>process.env：环境变量，例如通过  process.env.NODE_ENV 获取不同环境项目配置信息</li><li>process.nextTick：这个在谈及 Event Loop 时经常为会提到</li><li>process.pid：获取当前进程id</li><li>process.ppid：当前进程对应的父进程</li><li>process.cwd()：获取当前进程工作目录，</li><li>process.platform：获取当前进程运行的操作系统平台</li><li>process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值</li><li>进程事件：process.on(‘uncaughtException’, cb) 捕获异常信息、process.on(‘exit’, cb）进程推出监听</li><li>三个标准流：process.stdout 标准输出、process.stdin 标准输入、process.stderr 标准错误输出</li><li>process.title 指定进程名称，有的时候需要给进程指定一个名称</li></ul><p>以上仅列举了部分常用到功能点，除了 Process 之外 Node.js 还提供了 child_process 模块用来对子进程进行操作，在下文 Nodejs进程创建会继续讲述。</p><h3 id="Node-js-进程创建"><a href="#Node-js-进程创建" class="headerlink" title="Node.js 进程创建"></a>Node.js 进程创建</h3><p>进程创建有多种方式，本篇文章以child_process模块和cluster模块进行讲解。</p><h4 id="child-process模块"><a href="#child-process模块" class="headerlink" title="child_process模块"></a>child_process模块</h4><p>child_process 是 Node.js 的内置模块，官网地址：</p><blockquote><p>child_process 官网地址：<a href="https://link.juejin.im/?target=http%3A%2F%2Fnodejs.cn%2Fapi%2Fchild_process.html%23child_process_child_process">nodejs.cn/api/child_p…</a></p></blockquote><p>几个常用函数： 四种方式</p><ul><li><code>child_process.spawn()</code>：适用于返回大量数据，例如图像处理，二进制数据处理。</li><li><code>child_process.exec()</code>：适用于小量数据，maxBuffer 默认值为 200 * 1024 超出这个默认值将会导致程序崩溃，数据量过大可采用 spawn。</li><li><code>child_process.execFile()</code>：类似 child_process.exec()，区别是不能通过 shell 来执行，不支持像 I/O 重定向和文件查找这样的行为</li><li><code>child_process.fork()</code>： 衍生新的进程，进程之间是相互独立的，每个进程都有自己的 V8 实例、内存，系统资源是有限的，不建议衍生太多的子进程出来，通长根据系统<strong> CPU 核心数</strong>设置。</li></ul><blockquote><p>CPU 核心数这里特别说明下，fork 确实可以开启多个进程，但是并不建议衍生出来太多的进程，cpu核心数的获取方式<code>const cpus = require(&#39;os&#39;).cpus()</code>;,这里 cpus 返回一个对象数组，包含所安装的每个 CPU/内核的信息，二者总和的数组哦。假设主机装有两个cpu，每个cpu有4个核，那么总核数就是8。</p></blockquote><p><em>fork开启子进程 Demo</em></p><p>fork开启子进程解决文章起初的计算耗时造成线程阻塞。 在进行 compute 计算时创建子进程，子进程计算完成通过 send 方法将结果发送给主进程，主进程通过 message 监听到信息后处理并退出。</p><blockquote><p>fork_app.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fork = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.url == <span class="string">'/compute'</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> compute = fork(<span class="string">'./fork_compute.js'</span>);</span><br><span class="line">        compute.send(<span class="string">'开启一个新的子进程'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当一个子进程使用 process.send() 发送消息时会触发 'message' 事件</span></span><br><span class="line">        compute.on(<span class="string">'message'</span>, sum =&gt; &#123;</span><br><span class="line">            res.end(<span class="string">`Sum is <span class="subst">$&#123;sum&#125;</span>`</span>);</span><br><span class="line">            compute.kill();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子进程监听到一些错误消息退出</span></span><br><span class="line">        compute.on(<span class="string">'close'</span>, (code, signal) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`收到close事件，子进程收到信号 <span class="subst">$&#123;signal&#125;</span> 而终止，退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">            compute.kill();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.end(<span class="string">`ok`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server started at http://<span class="subst">$&#123;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#125;</span>:<span class="subst">$&#123;<span class="number">3000</span>&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>fork_compute.js</p></blockquote><p>针对文初需要进行计算的的例子我们创建子进程拆分出来单独进行运算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> computation = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'计算开始'</span>);</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">'计算耗时'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e10</span>; i++) &#123;</span><br><span class="line">        sum += i</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'计算结束'</span>);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'计算耗时'</span>);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg, <span class="string">'process.pid'</span>, process.pid); <span class="comment">// 子进程id</span></span><br><span class="line">    <span class="keyword">const</span> sum = computation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果Node.js进程是通过进程间通信产生的，那么，process.send()方法可以用来给父进程发送消息</span></span><br><span class="line">    process.send(sum);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="cluster模块"><a href="#cluster模块" class="headerlink" title="cluster模块"></a>cluster模块</h4><p>cluster 开启子进程Demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length;</span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</span><br><span class="line"><span class="keyword">if</span>(cluster.isMaster)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Master proces id is'</span>,process.pid);</span><br><span class="line">    <span class="comment">// fork workers</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;numCPUs;i++)&#123;</span><br><span class="line">        cluster.fork();</span><br><span class="line">    &#125;</span><br><span class="line">    cluster.on(<span class="string">'exit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">worker,code,signal</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'worker process died,id'</span>,worker.process.pid)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// Worker可以共享同一个TCP连接</span></span><br><span class="line">    <span class="comment">// 这里是一个http服务器</span></span><br><span class="line">    http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>);</span><br><span class="line">        res.end(<span class="string">'hello word'</span>);</span><br><span class="line">    &#125;).listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cluster原理分析</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/3/16c5658b2e97e9b2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="cluster原理分析"></p><p>cluster模块调用fork方法来创建子进程，该方法与child_process中的fork是同一个方法。</p><p>cluster模块采用的是经典的主从模型，Cluster会创建一个master，然后根据你指定的数量复制出多个子进程，可以使用cluster.isMaster属性判断当前进程是master还是worker(工作进程)。由master进程来管理所有的子进程，主进程不负责具体的任务处理，主要工作是负责调度和管理。</p><p>cluster模块使用内置的负载均衡来更好地处理线程之间的压力，该负载均衡使用了Round-robin算法（也被称之为循环算法）。当使用Round-robin调度策略时，master accepts()所有传入的连接请求，然后将相应的TCP请求处理发送给选中的工作进程（该方式仍然通过IPC来进行通信）。</p><p>开启多进程时候端口疑问讲解：如果多个Node进程监听同一个端口时会出现 Error:listen EADDRIUNS的错误，而cluster模块为什么可以让多个子进程监听同一个端口呢?原因是master进程内部启动了一个TCP服务器，而真正监听端口的只有这个服务器，当来自前端的请求触发服务器的connection事件后，master会将对应的socket具柄发送给子进程。</p><h4 id="child-process-模块与cluster-模块总结"><a href="#child-process-模块与cluster-模块总结" class="headerlink" title="child_process 模块与cluster 模块总结"></a>child_process 模块与cluster 模块总结</h4><p>无论是 child_process 模块还是 cluster 模块，为了解决 Node.js 实例单线程运行，无法利用多核 CPU 的问题而出现的。核心就是<strong>父进程（即 master 进程）负责监听端口，接收到新的请求后将其分发给下面的 worker 进程</strong>。</p><p>cluster模块的一个弊端：</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/3/16c565aaeb065b4a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="cluster弊端"></p><p>cluster内部隐时的构建TCP服务器的方式来说对使用者确实简单和透明了很多，但是这种方式无法像使用child_process那样灵活，因为一直主进程只能管理一组相同的工作进程，而自行通过child_process来创建工作进程，一个主进程可以控制多组进程。原因是child_process操作子进程时，可以隐式的创建多个TCP服务器，对比上面的两幅图应该能理解我说的内容。</p><h4 id="Node-js进程通信原理"><a href="#Node-js进程通信原理" class="headerlink" title="Node.js进程通信原理"></a>Node.js进程通信原理</h4><p>前面讲解的无论是child_process模块，还是cluster模块，都需要主进程和工作进程之间的通信。通过fork()或者其他API，创建了子进程之后，为了实现父子进程之间的通信，父子进程之间才能通过message和send()传递信息。</p><p>IPC这个词我想大家并不陌生，不管那一张开发语言只要提到进程通信，都会提到它。IPC的全称是Inter-Process Communication,即进程间通信。它的目的是为了让不同的进程能够互相访问资源并进行协调工作。实现进程间通信的技术有很多，如命名管道，匿名管道，socket，信号量，共享内存，消息队列等。Node中实现IPC通道是依赖于libuv。windows下由命名管道(name pipe)实现，*nix系统则采用Unix Domain Socket实现。表现在应用层上的进程间通信只有简单的message事件和send()方法，接口十分简洁和消息化。</p><p>IPC创建和实现示意图</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/4/16c5b379ad12199e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="IPC"></p><p>IPC通信管道是如何创建的</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/4/16c5b3812e3bb7d9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="IPC通信"></p><p>父进程在实际创建子进程之前，会创建IPC通道并监听它，然后才真正的创建出子进程，这个过程中也会通过环境变量（NODE_CHANNEL_FD）告诉子进程这个IPC通道的文件描述符。子进程在启动的过程中，根据文件描述符去连接这个已存在的IPC通道，从而完成父子进程之间的连接</p><h4 id="Node-js句柄传递"><a href="#Node-js句柄传递" class="headerlink" title="Node.js句柄传递"></a>Node.js句柄传递</h4><p>讲句柄之前，先想一个问题，send句柄发送的时候，真的是将服务器对象发送给了子进程？</p><h4 id="子进程对象send-方法可以发送的句柄类型"><a href="#子进程对象send-方法可以发送的句柄类型" class="headerlink" title="子进程对象send()方法可以发送的句柄类型"></a>子进程对象send()方法可以发送的句柄类型</h4><p>net.Socket TCP套接字<br>net.Server TCP服务器，任意建立在TCP服务上的应用层服务都可以享受它带来的好处<br>net.Native C++层面的TCP套接字或IPC管道<br>dgram.Socket UDP套接字<br>dgram.Native C++层面的UDP套接字</p><h4 id="send句柄发送原理分析"><a href="#send句柄发送原理分析" class="headerlink" title="send句柄发送原理分析"></a>send句柄发送原理分析</h4><p>结合句柄的发送与还原示意图更容易理解。</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/4/16c5b52b15d87bbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="send句"></p><p>send()方法在将消息发送到IPC管道前，实际将消息组装成了两个对象，一个参数是hadler，另一个是message。message参数如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    cmd:<span class="string">'NODE_HANDLE'</span>,</span><br><span class="line">    type:<span class="string">'net.Server'</span>,</span><br><span class="line">    msg:message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送到IPC管道中的实际上是我们要发送的句柄文件描述符。这个message对象在写入到IPC管道时，也会通过<code>JSON.stringfy()</code>进行序列化。所以最终发送到IPC通道中的信息都是字符串，send()方法能发送消息和句柄并不意味着它能发送任何对象。</p><p>连接了IPC通道的子线程可以读取父进程发来的消息，将字符串通过<code>JSON.parse()</code>解析还原为对象后，才触发message事件将消息传递给应用层使用。在这个过程中，消息对象还要被进行过滤处理，message.cmd的值如果以NODE_为前缀，它将响应一个内部事件internalMessage，如果message.cmd值为NODE_HANDLE,它将取出<code>message.type</code>值和得到的文件描述符一起还原出一个对应的对象。</p><p>以发送的TCP服务器句柄为例，子进程收到消息后的还原过程代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">message,handle,emit</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> server = <span class="keyword">new</span> net.Server();</span><br><span class="line">    server.listen(handler,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      emit(server);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>多进程 vs 多线程</p><p>属性<br>多进程<br>多线程<br>比较</p><p>数据<br>数据共享复杂，需要用IPC；数据是分开的，同步简单<br>因为共享进程数据，数据共享简单，同步复杂<br>各有千秋</p><p>CPU、内存<br>占用内存多，切换复杂，CPU利用率低<br>占用内存少，切换简单，CPU利用率高<br>多线程更好</p><p>销毁、切换<br>创建销毁、切换复杂，速度慢<br>创建销毁、切换简单，速度很快<br>多线程更好</p><p>coding<br>编码简单、调试方便<br>编码、调试复杂<br>编码、调试复杂</p><p>可靠性<br>进程独立运行，不会相互影响<br>线程同呼吸共命运<br>多进程更好</p><p>分布式<br>可用于多机多核分布式，易于扩展<br>只能用于多核分布式<br>多进程更好</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5d43017be51d4561f40adcf9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;进程&lt;/code&gt;与&lt;code&gt;线程&lt;/code&gt;是一个程序员的必知概念，面试经常被问及，但是一些文章内容只是讲讲理论知识，可能一些小伙伴并没有真的理解，在实际开发中应用也比较少。本篇文章除了介绍概念，通过Node.js 的角度讲解&lt;code&gt;进程&lt;/code&gt;与&lt;code&gt;线程&lt;/code&gt;，并且讲解一些在项目中的实战的应用，让你不仅能迎战面试官还可以在实战中完美应用&lt;/p&gt;
&lt;h2 id=&quot;文章导览&quot;&gt;&lt;a href=&quot;#文章导览&quot; class=&quot;headerlink&quot; title=&quot;文章导览&quot;&gt;&lt;/a&gt;文章导览&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/8/8/16c6cf612c275894?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;进程与线程&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;面试会问&quot;&gt;&lt;a href=&quot;#面试会问&quot; class=&quot;headerlink&quot; title=&quot;面试会问&quot;&gt;&lt;/a&gt;面试会问&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node.js是单线程吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Node.js 做耗时的计算时候，如何避免阻塞？&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Node.js如何实现多进程的开启和关闭？&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Node.js可以创建线程吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;你们开发过程中如何实现进程守护的？&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;除了使用第三方模块，你们自己是否封装过一个多进程架构?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;p&gt;进程&lt;code&gt;Process&lt;/code&gt;是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，进程是线程的容器（来自百科）。进程是资源分配的最小单位。我们启动一个服务、运行一个实例，就是开一个服务进程，例如 Java 里的 JVM 本身就是一个进程，Node.js 里通过 node app.js 开启一个服务进程，多进程就是进程的复制（fork），fork 出来的&lt;strong&gt;每个进程都拥有自己的独立空间地址、数据栈，一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了 IPC 通信，进程之间才可数据共享&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js开启服务进程例子&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; server = http.createServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;,()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    process.title=&lt;span class=&quot;string&quot;&gt;&#39;程序员成长指北测试进程&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;进程id&#39;&lt;/span&gt;,process.pid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行上面代码后，以下为 Mac 系统自带的监控工具 “活动监视器” 所展示的效果，可以看到我们刚开启的 Nodejs 进程 7663&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/8/1/16c4dc0ca13fec40?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;进程1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h2&gt;&lt;p&gt;线程是操作系统能够进行运算调度的最小单位，首先我们要清楚线程是隶属于进程的，被包含于进程之中。&lt;strong&gt;一个线程只能隶属于一个进程，但是一个进程是可以拥有多个线程的&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;单线程&quot;&gt;&lt;a href=&quot;#单线程&quot; class=&quot;headerlink&quot; title=&quot;单线程&quot;&gt;&lt;/a&gt;单线程&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;单线程就是一个进程只开一个线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Javascript 就是属于单线程，程序顺序执行(这里暂且不提JS异步)，可以想象一下队列，前面一个执行完之后，后面才可以执行，当你在使用单线程语言编码时切勿有过多耗时的同步操作，否则线程会造成阻塞，导致后续响应无法处理。你如果采用 Javascript 进行编码时候，请尽可能的利用Javascript异步操作的特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;经典计算耗时造成线程阻塞的例子&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; longComputation = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1e10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum += i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; server = http.createServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.on(&lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;, (req, res) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.url === &lt;span class=&quot;string&quot;&gt;&#39;/compute&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.info(&lt;span class=&quot;string&quot;&gt;&#39;计算开始&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sum = longComputation();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.info(&lt;span class=&quot;string&quot;&gt;&#39;计算结束&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.end(&lt;span class=&quot;string&quot;&gt;`Sum is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;sum&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.end(&lt;span class=&quot;string&quot;&gt;&#39;Ok&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//打印结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//计算开始 2019-07-28T07:08:49.849Z&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//计算结束 2019-07-28T07:09:04.522Z&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看打印结果，当我们调用&lt;code&gt;127.0.0.1:3000/compute&lt;/code&gt;&lt;br&gt;的时候，如果想要调用其他的路由地址比如&lt;code&gt;127.0.0.1/&lt;/code&gt;大约需要15秒时间，也可以说一个用户请求完第一个compute接口后需要等待15秒，这对于用户来说是极其不友好的。下文我会通过创建多进程的方式child_process.fork 和cluster 来解决解决这个问题。&lt;br&gt;
    
    </summary>
    
      <category term="Node" scheme="https://zhanghao-web.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://zhanghao-web.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>在17道题中理解javascript的类型转换</title>
    <link href="https://zhanghao-web.github.io/2019/08/08/Js/%E5%9C%A817%E9%81%93%E9%A2%98%E4%B8%AD%E7%90%86%E8%A7%A3javascript%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://zhanghao-web.github.io/2019/08/08/Js/在17道题中理解javascript的类型转换/</id>
    <published>2019-08-08T07:50:44.000Z</published>
    <updated>2020-01-28T10:04:15.039Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5d4999fff265da038f47f5c7" target="_blank" rel="noopener">原文地址</a></p><p>类型转换是将值从一种类型转换为另一种类型的过程（比如字符串转数字，对象转布尔值等）。任何类型不论是原始类型还是对象类型都可以进行类型转换，JavaScript 的原始类型有：<code>number, string, boolean, null, undefined, Symbol</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> + <span class="literal">false</span></span><br><span class="line"><span class="number">12</span> / <span class="string">"6"</span></span><br><span class="line"><span class="string">"number"</span> + <span class="number">15</span> + <span class="number">3</span></span><br><span class="line"><span class="number">15</span> + <span class="number">3</span> + <span class="string">"number"</span></span><br><span class="line">[<span class="number">1</span>] &gt; <span class="literal">null</span></span><br><span class="line"><span class="string">"foo"</span> + + <span class="string">"bar"</span></span><br><span class="line"><span class="string">"true"</span> == <span class="literal">true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">"false"</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">""</span></span><br><span class="line">!!<span class="string">"false"</span> == !!<span class="string">"true"</span></span><br><span class="line">[<span class="string">"x"</span>] == <span class="string">"x"</span></span><br><span class="line">[] + <span class="literal">null</span> + <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#123;&#125; + [] + &#123;&#125; + [<span class="number">1</span>]</span><br><span class="line">! + [] + [] + ![]</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) - <span class="number">0</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) + <span class="number">0</span></span><br></pre></td></tr></table></figure><p>类似于上面的这些问题大概率也会在 JS 面试中被问到, 所以继续往下读。</p><h2 id="隐式转换VS显示转换"><a href="#隐式转换VS显示转换" class="headerlink" title="隐式转换VS显示转换"></a>隐式转换VS显示转换</h2><p>类型转换可以分为<strong>隐式类型转换</strong>和<strong>显式类型转换</strong>。</p><p>当开发人员通过编写适当的代码(如Number(value))用于在类型之间进行转换时，就称为<code>显式类型强制转换(或强制类型转换)</code>。</p><p>然而 JavaScript 是弱类型语言，在某些操作下，值可以在两种类型之间自动的转换，这叫做<code>隐式类型转换</code>。在对不同类型的值使用运算符时通常会发生隐式类型转换。比如 1 == null, 2 / “5”, null + new Date()。当值被 if 语句包裹时也有可能发生，比如 if(value) {} 会将 value 转换为 boolean类型。</p><p><code>严格相等运算符</code>（===）不会触发类型隐式转换，所以它可以用来比较值和类型是否都相等。</p><p><strong>隐式类型转换是一把双刃剑，使用它虽然可以写更少的代码但有时候会出现难以被发现的bug</strong>。</p><h2 id="三种类型转换"><a href="#三种类型转换" class="headerlink" title="三种类型转换"></a>三种类型转换</h2><p>我们需要知道的第一个规则是：<strong>在 JS 中只有 3 种类型的转换</strong></p><ul><li>to string</li><li>to boolean</li><li>to number</li></ul><p>第二，<strong>类型转换的逻辑在原始类型和对象类型上是不同的，但是他们都只会转换成上面 3 种类型之一</strong>。</p><p>我们首先分析一下原始类型转换。</p><h2 id="String-类型转换"><a href="#String-类型转换" class="headerlink" title="String 类型转换"></a>String 类型转换</h2><p><code>String()</code> 方法可以用来显式将值转为字符串，隐式转换通常在有 <code>+</code> 运算符并且有一个操作数是 <code>string</code> 类型时被触发，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">123</span>) <span class="comment">// 显式类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span> + <span class="string">''</span> <span class="comment">// 隐式类型转换</span></span><br></pre></td></tr></table></figure><p>所有原始类型转 String 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">123</span>)  <span class="comment">// '123'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">-12.3</span>)  <span class="comment">// '-12.3'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>)  <span class="comment">// 'null'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>)  <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)  <span class="comment">// 'true'</span></span><br></pre></td></tr></table></figure><p>Symbol 类型转 String 类型是比较严格的，它只能被显式的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="built_in">Symbol</span>(<span class="string">'symbol'</span>))  <span class="comment">// 'Symbol(symbol)'</span></span><br><span class="line"></span><br><span class="line"><span class="string">''</span> + <span class="built_in">Symbol</span>(<span class="string">'symbol'</span>)  <span class="comment">// TypeError is thrown</span></span><br></pre></td></tr></table></figure><h2 id="Boolean-类型转换"><a href="#Boolean-类型转换" class="headerlink" title="Boolean 类型转换"></a>Boolean 类型转换</h2><p><code>Boolean()</code> 方法可以用来显式将值转换成 boolean 型。</p><p>隐式类型转换通常在逻辑判断或者有逻辑运算符时被触发<code>（|| &amp;&amp; !）</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="number">2</span>)    <span class="comment">// 显示类型转换</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>) &#123;&#125;      <span class="comment">// 逻辑判断触发隐式类型转换</span></span><br><span class="line">!!<span class="number">2</span>           <span class="comment">// 逻辑运算符触发隐式类型转换</span></span><br><span class="line"><span class="number">2</span> || <span class="string">'hello'</span>  <span class="comment">// 逻辑运算符触发隐式类型转换</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>注意: 逻辑运算符（比如 || 和 &amp;&amp;）是在内部做了 boolean 类型转换，但实际上返回的是<code>原始操作数的值</code>，即使他们都不是 boolean 类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 number 类型 123，而不是 boolean 型 true</span></span><br><span class="line"><span class="comment">// 'hello' 和 '123' 仍然在内部会转换成 boolean 型来计算表达式</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">'hello'</span> &amp;&amp; <span class="number">123</span>  <span class="comment">// x === 123</span></span><br></pre></td></tr></table></figure><p>boolean 类型转换只会有 true 或者 false 两种结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>)           <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)            <span class="comment">// false  </span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">-0</span>)           <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>)          <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>)         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">false</span>)        <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>任何不在上面列表中的值都会转换为 true</strong>, 包括 <code>object, function, Array, Date</code> 等，<code>Symbol</code> 类型是真值，空对象和空数组也是真值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;)             <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>([])             <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="built_in">Symbol</span>())       <span class="comment">// true</span></span><br><span class="line">!!<span class="built_in">Symbol</span>()              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Number-类型转换"><a href="#Number-类型转换" class="headerlink" title="Number 类型转换"></a>Number 类型转换</h2><p>和 <code>Boolean()</code>、<code>String()</code> 方法一样， <code>Number()</code> 方法可以用来显式将值转换成 number 类型。<br>number 的隐式类型转换是比较复杂的，因为它可以在下面多种情况下被触发。</p><ul><li>比较操作（&gt;, &lt;, &lt;=, &gt;=）</li><li>按位操作（| &amp; ^ ~）</li><li>算数操作（- + * / %）， 注意，当 + 操作存在任意的操作数是 string 类型时，不会触发 number 类型的隐式转换</li><li>一 元 + 操作</li><li>非严格相等操作（== 或者 != ），注意，== 操作两个操作数都是 string 类型时，不会发生 number 类型的隐式转换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'123'</span>)    <span class="comment">// 显示类型转换</span></span><br><span class="line">+ <span class="string">'123'</span>          <span class="comment">//  隐式类型转换</span></span><br><span class="line"><span class="number">123</span> != <span class="string">"456"</span>    <span class="comment">//  隐式类型转换</span></span><br><span class="line"><span class="number">4</span> &gt; <span class="string">"5"</span>        <span class="comment">//  隐式类型转换</span></span><br><span class="line"><span class="number">5</span> / <span class="literal">null</span>      <span class="comment">//  隐式类型转换</span></span><br><span class="line"><span class="literal">true</span> | <span class="number">0</span>      <span class="comment">//  隐式类型转换</span></span><br></pre></td></tr></table></figure><p>接下来看一下原始类型显示转换 number 类型会发生什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)              <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)                   <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)                  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">" 12 "</span>)                 <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"-12.34"</span>)               <span class="comment">// -12.34</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"\n"</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">" 12s "</span>)                <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">123</span>)                    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>当将一个字符串转换为一个数字时，引擎首先删除前尾空格、<code>\n、\t</code> 字符，如果被修剪的字符串不成为一个有效的数字，则返回 NaN。如果字符串为空，则返回 0。</p><p>Number() 方法对于 null 和 undefined 的处理是不同的， null 会转换为 0, undefined 会转换为 NaN</p><p><strong>不管是显式还是隐式转换都不能将 Symbol 类型转为 number 类型，当试图这样操作时，会抛出错误</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="built_in">Symbol</span>(<span class="string">'my symbol'</span>))    <span class="comment">// TypeError is thrown</span></span><br><span class="line">+<span class="built_in">Symbol</span>(<span class="string">'123'</span>)                 <span class="comment">// TypeError is thrown</span></span><br></pre></td></tr></table></figure><p>这里<strong>有 2 个特殊的规则</strong>需要记住：</p><ol><li>当将 == 应用于 null 或 undefined 时，不会发生数值转换。null 只等于 null 或 undefined，不等于其他任何值。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="number">0</span>               <span class="comment">// false, null is not converted to 0</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">null</span>            <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>       <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="number">0</span>          <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li>NaN 不等于任何值，包括它自己</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(value !== value) &#123; <span class="built_in">console</span>.log(<span class="string">'the value is NaN'</span>) &#125;</span><br></pre></td></tr></table></figure><h2 id="object-类型转换"><a href="#object-类型转换" class="headerlink" title="object 类型转换"></a>object 类型转换</h2><p>到这里我们已经深入了解了原始类型的转换，接下来我们来看一下 object 类型的转换。</p><p>当涉及到对象的操作比如：<code>[1] + [2,3]</code>，引擎首先会尝试将 object 类型转为原始类型，然后在将原始类型转为最终需要的类型，而且仍然只有 3 种类型的转换：<code>number, string, boolean</code></p><p>最简单的情况是 boolean 类型的转换，任何非原始类型总是会转换成 true,无论对象或数组是否为空。</p><p>对象通过内部 <code>[[ToPrimitive]]</code> 方法转换为原始类型，该方法负责数字和字符串转换。</p><p><code>[[ToPrimitive]]</code> 方法接受两个参数一个输入值和一个需要转换的类型<code>（Numer or String）</code><br>number 和 string的转换都使用了对象的两个方法： <code>valueOf</code> 和 <code>toString</code>。这两个方法都在 <code>Object.prototype</code> 上被声明，因此可用于任何派生类，比如 <code>Date, Array</code>等。</p><blockquote><p>通常上 [[ToPrimitive]] 算法如下：</p></blockquote><ul><li>如果输入的值已经是原始类型，直接返回这个值。</li><li>输入的值调用 toString() 方法，如果结果是原始类型，则返回。</li><li>输入的值调用 valueOf() 方法，如果结果是原始类型，则返回。</li><li>如果上面 3 个步骤之后，转换后的值仍然不是原始类型，则抛出 TypeError 错误。</li></ul><p>number 类型的转换首先会调用 <code>valueOf()</code> 方法，如果不是原始值在调用 <code>toString()</code> 方法。 string 类型的转换则相反。</p><p>大多数 JS 内置对象类型的 valueOf() 返回这个对象本身，其结果经常被忽略，因为它不是一个原始类型。所以大多数情况下当 object 需要转换成 number 或 string 类型时最终都调用了 <code>toString()</code> 方法。</p><p>当运算符不同时，<code>[[ToPrimitive]]</code> 方法接受的转换类型参数也不相同。当存在 == 或者 + 运算符时一般会先触发 number 类型的转换再触发 string 类型转换。</p><p>在 JS 中你可以通过重写对象的 <code>toString 和 valueOf</code> 方法来修改对象到原始类型转换的逻辑。</p><h2 id="答案解析"><a href="#答案解析" class="headerlink" title="答案解析"></a>答案解析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> + <span class="literal">false</span> <span class="comment">// 1  </span></span><br><span class="line"><span class="comment">// '+' 运算符会触发 number 类型转换对于 true 和 false</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span> / <span class="string">"6"</span> <span class="comment">// 2       </span></span><br><span class="line"><span class="comment">//算数运算符会把字符串 ‘6’ 转为 number 类型</span></span><br><span class="line"></span><br><span class="line"><span class="string">"number"</span> + <span class="number">15</span> + <span class="number">3</span> <span class="comment">// 'number153'</span></span><br><span class="line"><span class="comment">// '+' 运算符按从左到右的顺序的执行，所以优先执行 “number” + 15, 把 15 转为 string 类型，得到 “number15” 然后同理执行 “number15” + 3</span></span><br><span class="line"></span><br><span class="line"><span class="number">15</span> + <span class="number">3</span> + <span class="string">"number"</span>  <span class="comment">// "18number"</span></span><br><span class="line"><span class="comment">// 15 + 3 先执行，运算符两边都是 number 类型 ，不用转换，然后执行 18 + “number” 最终得到 “18number”</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] &gt; <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// ==&gt; '1' &gt; 0</span></span><br><span class="line"><span class="comment">// ==&gt; 1 &gt; 0</span></span><br><span class="line"><span class="comment">// ==&gt; true</span></span><br><span class="line"><span class="comment">// 比较运算符 &gt; 执行 number 类型隐式转换。</span></span><br><span class="line"></span><br><span class="line"><span class="string">"foo"</span> + + <span class="string">"bar"</span> <span class="comment">// "fooNaN"</span></span><br><span class="line"><span class="comment">// ==&gt; "foo" + (+"bar")</span></span><br><span class="line"><span class="comment">// ==&gt; "foo" + NaN</span></span><br><span class="line"><span class="comment">// ==&gt; "fooNaN"</span></span><br><span class="line"><span class="comment">// 一元 + 运算符比二元 + 运算符具有更高的优先级。所以 + bar表达式先求值。一元加号执行字符串“bar” 的 number 类型转换。因为字符串不代表一个有效的数字，所以结果是NaN。在第二步中，计算表达式'foo' + NaN。</span></span><br><span class="line"></span><br><span class="line"><span class="string">"true"</span> == <span class="literal">true</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">"false"</span> <span class="comment">// false</span></span><br><span class="line"><span class="comment">// == 运算符执行 number 类型转换，'true' 转换为 NaN， boolean 类型 true 转换为 1</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> == <span class="string">""</span> <span class="comment">// false</span></span><br><span class="line"><span class="comment">// null 不等于任何值除了 null 和 undefined</span></span><br><span class="line"></span><br><span class="line">!!<span class="string">"false"</span> == !!<span class="string">"true"</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// !! 运算符将字符串 'true' 和 'false' 转为 boolean 类型 true, 因为不是空字符串，然后两边都是 boolean 型不在执行隐式转换操作。</span></span><br><span class="line"></span><br><span class="line">[<span class="string">"x"</span>] == <span class="string">"x"</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// == 运算符对数组类型执行 number 转换，先调用对象的 valueOf() 方法，结果是数组本身，不是原始类型值，所以执行对象的 toString() 方法，得到字符串 'x'</span></span><br><span class="line"></span><br><span class="line">[] + <span class="literal">null</span> + <span class="number">1</span> <span class="comment">// 'null1'</span></span><br><span class="line"><span class="comment">// '+' 运算符执行 number 类型转换，先调用对象的 valueOf() 方法，结果是数组本身，不是原始类型值，所以执行对象的 toString() 方法，得到字符串 ''， 接下来执行表达式 '' + null + 1。</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 当运算符两边类型相同时，不会执行类型转换，两个数组的内存地址不一样，所以返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> || <span class="string">"0"</span> &amp;&amp; &#123;&#125;  <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="comment">// 逻辑运算符 || 和 &amp;&amp; 将值转为 boolean 型，但是会返回原始值（不是 boolean）。</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; + [] + &#123;&#125; + [<span class="number">1</span>] <span class="comment">// '0[object Object]1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的操作数都不是原始类型，所以会按照从左到右的顺序执行 number 类型的隐式转换， object 和 array 类型的 valueOf() 方法返回它们本身，所以直接忽略，执行 toString() 方法。 这里的技巧是，第一个 &#123;&#125; 不被视为 object，而是块声明语句，因此它被忽略。计算从 +[] 表达式开始，该表达式通过toString()方法转换为空字符串，然后转换为0。</span></span><br><span class="line"></span><br><span class="line">! + [] + [] + ![] <span class="comment">// 'truefalse'</span></span><br><span class="line"><span class="comment">// 一元运算符优先执行，+[] 转为 number 类型 0，![] 转为 boolean 型 false。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) - <span class="number">0</span> <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// '-' 运算符执行 number 类型隐式转换对于 Date 型的值，Date.valueOf() 返回到毫秒的时间戳。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) + <span class="number">0</span> <span class="comment">//"Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)0"</span></span><br><span class="line"><span class="comment">// +' 运算符触发默认转换，因此使用 toString() 方法，而不是 valueOf()。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5d4999fff265da038f47f5c7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;类型转换是将值从一种类型转换为另一种类型的过程（比如字符串转数字，对象转布尔值等）。任何类型不论是原始类型还是对象类型都可以进行类型转换，JavaScript 的原始类型有：&lt;code&gt;number, string, boolean, null, undefined, Symbol&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; + &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; / &lt;span class=&quot;string&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; + + &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!!&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; == !!&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[] + &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] == [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125; + [] + &amp;#123;&amp;#125; + [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;! + [] + [] + ![]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类似于上面的这些问题大概率也会在 JS 面试中被问到, 所以继续往下读。&lt;/p&gt;
&lt;h2 id=&quot;隐式转换VS显示转换&quot;&gt;&lt;a href=&quot;#隐式转换VS显示转换&quot; class=&quot;headerlink&quot; title=&quot;隐式转换VS显示转换&quot;&gt;&lt;/a&gt;隐式转换VS显示转换&lt;/h2&gt;&lt;p&gt;类型转换可以分为&lt;strong&gt;隐式类型转换&lt;/strong&gt;和&lt;strong&gt;显式类型转换&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当开发人员通过编写适当的代码(如Number(value))用于在类型之间进行转换时，就称为&lt;code&gt;显式类型强制转换(或强制类型转换)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然而 JavaScript 是弱类型语言，在某些操作下，值可以在两种类型之间自动的转换，这叫做&lt;code&gt;隐式类型转换&lt;/code&gt;。在对不同类型的值使用运算符时通常会发生隐式类型转换。比如 1 == null, 2 / “5”, null + new Date()。当值被 if 语句包裹时也有可能发生，比如 if(value) {} 会将 value 转换为 boolean类型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;严格相等运算符&lt;/code&gt;（===）不会触发类型隐式转换，所以它可以用来比较值和类型是否都相等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;隐式类型转换是一把双刃剑，使用它虽然可以写更少的代码但有时候会出现难以被发现的bug&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;三种类型转换&quot;&gt;&lt;a href=&quot;#三种类型转换&quot; class=&quot;headerlink&quot; title=&quot;三种类型转换&quot;&gt;&lt;/a&gt;三种类型转换&lt;/h2&gt;&lt;p&gt;我们需要知道的第一个规则是：&lt;strong&gt;在 JS 中只有 3 种类型的转换&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to string&lt;/li&gt;
&lt;li&gt;to boolean&lt;/li&gt;
&lt;li&gt;to number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二，&lt;strong&gt;类型转换的逻辑在原始类型和对象类型上是不同的，但是他们都只会转换成上面 3 种类型之一&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们首先分析一下原始类型转换。&lt;/p&gt;
&lt;h2 id=&quot;String-类型转换&quot;&gt;&lt;a href=&quot;#String-类型转换&quot; class=&quot;headerlink&quot; title=&quot;String 类型转换&quot;&gt;&lt;/a&gt;String 类型转换&lt;/h2&gt;&lt;p&gt;&lt;code&gt;String()&lt;/code&gt; 方法可以用来显式将值转为字符串，隐式转换通常在有 &lt;code&gt;+&lt;/code&gt; 运算符并且有一个操作数是 &lt;code&gt;string&lt;/code&gt; 类型时被触发，如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 显式类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 隐式类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所有原始类型转 String 类型&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// &#39;123&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;-12.3&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// &#39;-12.3&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// &#39;null&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// &#39;undefined&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// &#39;true&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Symbol 类型转 String 类型是比较严格的，它只能被显式的转换&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;symbol&#39;&lt;/span&gt;))  &lt;span class=&quot;comment&quot;&gt;// &#39;Symbol(symbol)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;symbol&#39;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// TypeError is thrown&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Boolean-类型转换&quot;&gt;&lt;a href=&quot;#Boolean-类型转换&quot; class=&quot;headerlink&quot; title=&quot;Boolean 类型转换&quot;&gt;&lt;/a&gt;Boolean 类型转换&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Boolean()&lt;/code&gt; 方法可以用来显式将值转换成 boolean 型。&lt;/p&gt;
&lt;p&gt;隐式类型转换通常在逻辑判断或者有逻辑运算符时被触发&lt;code&gt;（|| &amp;amp;&amp;amp; !）&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;// 显示类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&amp;#125;      &lt;span class=&quot;comment&quot;&gt;// 逻辑判断触发隐式类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!!&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// 逻辑运算符触发隐式类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; || &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 逻辑运算符触发隐式类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Js" scheme="https://zhanghao-web.github.io/categories/Js/"/>
    
    
      <category term="Js" scheme="https://zhanghao-web.github.io/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript异步编程回调地狱的一些解决方案</title>
    <link href="https://zhanghao-web.github.io/2019/08/01/Js/JavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://zhanghao-web.github.io/2019/08/01/Js/JavaScript异步编程回调地狱的一些解决方案/</id>
    <published>2019-08-01T01:36:56.000Z</published>
    <updated>2020-01-28T10:04:15.032Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/bc7b8d542dcd" target="_blank" rel="noopener">原文地址</a></p><blockquote><p>异步编程在JavaScript中非常重要。过多的异步编程也带了回调嵌套的问题，本文会提供一些解决“回调地狱”的方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"延时触发"</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">fs.readFile(<span class="string">'./samp.txt'</span>,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res,error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面就是典型的回调函数，不论是在浏览器中，还是在node中，JavaScript本身是单线程，因此，为了应对一些单线程带来的问题，异步编程成为了JavaScript中非常重要的一部分。</p><p>不论是浏览器中最为常见的<strong>ajax、事件监听，还是node中文件读取、网络编程、数据库等操作</strong>，都离不开异步编程。在异步编程中，许多操作都会放<strong>在回调函数（callback）</strong>中。同步与异步的混杂、过多的回调嵌套都会使得代码变得难以理解与维护，这也是常受人诟病的地方。</p><p>先看下面这段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'./sample.txt'</span>, <span class="string">'utf-8'</span>, (err, content) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> keyword = content.substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    db.find(<span class="string">`select * from sample where kw = <span class="subst">$&#123;keyword&#125;</span>`</span>, (err, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">get</span>(`/sampleget?count=$&#123;res.length&#125;<span class="string">`, data =&gt; &#123;</span></span><br><span class="line"><span class="string">           console.log(data);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>首先我们读取的一个文件中的关键字keyword，然后根据该keyword进行数据库查询，最后依据查询结果请求数据。</p><ul><li>文件读取：fs.readFile</li><li>数据库查询：db.find</li><li>http请求：get</li></ul><p>可以看到，我们没增加一个异步请求，就会多添加一层回调函数的嵌套，这段代码中三个异步函数的嵌套已经开始使一段本可以语言明确的代码编程不易阅读与维护了。</p><p>抽象出来这种代码会变成下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">asyncFunc1(opt, (...args1) =&gt; &#123;</span><br><span class="line">    asyncFunc2(opt, (...args2) =&gt; &#123;</span><br><span class="line">        asyncFunc3(opt, (...args3) =&gt; &#123;</span><br><span class="line">            asyncFunc4(opt, (...args4) =&gt; &#123;</span><br><span class="line">                <span class="comment">// some operation</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>左侧明显出现了一个三角形的缩进区域，过多的回调也就让我们陷入<code>“回调地狱”</code>。接下来会介绍一些方法来规避回调地狱。</p><h2 id="一、拆解function"><a href="#一、拆解function" class="headerlink" title="一、拆解function"></a>一、拆解function</h2><p>回调嵌套所带来的一个重要问题就是代码不易阅读与维护。因为普遍来说，过多的缩进（嵌套）会极大的影响代码的可读性。基于这一点，可以进行一个最简单的优化——将各步拆解为单个的<code>function</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">get</span>(`/sampleget?count=$&#123;count&#125;<span class="string">`, data =&gt; &#123;</span></span><br><span class="line"><span class="string">        console.log(data);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function queryDB(kw) &#123;</span></span><br><span class="line"><span class="string">    db.find(`</span>select * <span class="keyword">from</span> sample where kw = $&#123;kw&#125;<span class="string">`, (err, res) =&gt; &#123;</span></span><br><span class="line"><span class="string">        getData(res.length);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function readFile(filepath) &#123;</span></span><br><span class="line"><span class="string">    fs.readFile(filepath, 'utf-8', (err, content) =&gt; &#123;</span></span><br><span class="line"><span class="string">        let keyword = content.substring(0, 5);</span></span><br><span class="line"><span class="string">        queryDB(keyword);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">readFile('./sample.txt');</span></span><br></pre></td></tr></table></figure><p>可以看到，通过上面的改写方式，代码清晰了许多。该方法非常简单，具有一定的效果，但是缺少通用性。</p><h2 id="二、事件发布-监听模式"><a href="#二、事件发布-监听模式" class="headerlink" title="二、事件发布/监听模式"></a>二、事件发布/监听模式</h2><p>如果在浏览器中写过事件监听<code>addEventListener</code>，那么你对这种事件发布/监听的模式一定不陌生。</p><p>借鉴这种思想，一方面，我们可以监听某一事件，当事件发生时，进行相应回调操作；另一方面，当某些操作完成后，通过发布事件触发回调。这样就可以将原本捆绑在一起的代码解耦。<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">const</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line">eventEmitter.on(<span class="string">'db'</span>, (err, kw) =&gt; &#123;</span><br><span class="line">    db.find(<span class="string">`select * from sample where kw = <span class="subst">$&#123;kw&#125;</span>`</span>, (err, res) =&gt; &#123;</span><br><span class="line">        eventEmitter(<span class="string">'get'</span>, res.length);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">eventEmitter.on(<span class="string">'get'</span>, (err, count) =&gt; &#123;</span><br><span class="line">    <span class="keyword">get</span>(`/sampleget?count=$&#123;count&#125;<span class="string">`, data =&gt; &#123;</span></span><br><span class="line"><span class="string">        console.log(data);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fs.readFile('./sample.txt', 'utf-8', (err, content) =&gt; &#123;</span></span><br><span class="line"><span class="string">    let keyword = content.substring(0, 5);</span></span><br><span class="line"><span class="string">    eventEmitter. emit('db', keyword);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure></p><p>使用这种模式的实现需要一个事件发布/监听的库。上面代码中使用node原生的events模块，当然你可以使用任何你喜欢的库。</p><h2 id="三、Promise"><a href="#三、Promise" class="headerlink" title="三、Promise"></a>三、Promise</h2><p><code>Promise</code>是一种异步解决方案，最早由社区提出并实现，后来写进了es6规范。</p><p>目前一些主流的浏览器已经原生实现了Promise的API，可以在Can I use里查看浏览器的支持情况。当然，如果想要做浏览器的兼容，可以考虑使用一些<code>Promise</code>的实现库，例如bluebird、 Q等。下面以bluebird为例：</p><p>首先，我们需要将异步方法改写为<code>Promise</code>，对于符合node规范的回调函数（第一个参数必须是Error），可以使用<code>bluebird</code>的promisify方法。该方法接收一个标准的异步方法并返回一个<code>Promise</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bluebird = <span class="built_in">require</span>(<span class="string">'bluebird'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> readFile = bluebird.promisify(fs.readFile);</span><br></pre></td></tr></table></figure><p>这样，readFile就变成了一个Promise对象。</p><p>但是，有的异步方法无法进行转换，或者我们需要使用原生<code>Promise</code>，这就需要我们手动进行一些改造。下面提供一种改造的方法。</p><p>以fs.readFile为例，借助原生<code>Promise</code>来改造该方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">filepath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resolve,</span><br><span class="line">        reject;</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">_resolve, _reject</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve = _resolve;</span><br><span class="line">        reject = _reject;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> deferred = &#123;</span><br><span class="line">        resolve,</span><br><span class="line">        reject,</span><br><span class="line">        promise</span><br><span class="line">    &#125;;</span><br><span class="line">    fs.readFile(filepath, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, ...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            deferred.reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            deferred.resolve(...args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在方法中创建了一个Promise对象，并在异步回调中根据不同的情况使用reject与resolve来改变Promise对象的状态。该方法返回这个Promise对象。其他的一些异步方法也可以参照这种方式进行改造。</p><p>假设通过改造，readFile、queryDB与getData方法均会返回一个Promise对象。代码就变为了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">readFile(<span class="string">'./sample.txt'</span>).then(<span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> keyword = content.substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> queryDB(keyword);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getData(res.length);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，之前的嵌套操作编程了通过then连接的链式操作。代码的整洁度上有了一个较大的提高。</p><h2 id="四、generator"><a href="#四、generator" class="headerlink" title="四、generator"></a>四、generator</h2><p><code>generator</code>是es6中的一个新的语法。在function关键字后添加*即可将函数变为<code>generator</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gen = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>generator</code>将会返回一个遍历器对象，用于遍历<code>generator</code>内部的状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> g = gen();</span><br><span class="line">g.next(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 3, done: true &#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>generator</code>函数有一个最大的特点，可以在内部执行的过程中交出程序的控制权，<code>yield</code>相当于起到了一个暂停的作用；而当一定情况下，外部又将控制权再移交回来。</p><p>想象一下，我们用<code>generator</code>来封装代码，在异步任务处使用<code>yield</code>关键词，此时<code>generator</code>会将程序执行权交给其他代码，而在异步任务完成后，调用next方法来恢复<code>yield</code>下方代码的执行。以readFile为例，大致流程如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们的主任务——显示关键字</span></span><br><span class="line"><span class="comment">// 使用yield暂时中断下方代码执行</span></span><br><span class="line"><span class="comment">// yield后面为promise对象</span></span><br><span class="line"><span class="keyword">const</span> showKeyword = <span class="function"><span class="keyword">function</span>* (<span class="params">filepath</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始读取'</span>);</span><br><span class="line">    <span class="keyword">let</span> keyword = <span class="keyword">yield</span> readFile(filepath);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`关键字为<span class="subst">$&#123;filepath&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generator的流程控制</span></span><br><span class="line"><span class="keyword">let</span> gen = showKeyword();</span><br><span class="line"><span class="keyword">let</span> res = gen.next();</span><br><span class="line">res.value.then(<span class="function"><span class="params">res</span> =&gt;</span> gen.next(res));</span><br></pre></td></tr></table></figure><p>在主任务部分，原本<code>readFile</code>异步的部分变成了类似同步的写法，代码变得非常清晰。而在下半部分，则是对于什么时候需要移交回控制权给<code>generator</code>的流程控制。</p><p>然而，我们需要手动控制<code>generator</code>的流程，如果能够自动执行<code>generator</code>——在需要的时候自动移交控制权，那么会更加具有实用性。<br>为此，我们可以使用 co 这个库。它可以是省去我们对于<code>generator</code>流程控制的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> co = reuqire(<span class="string">'co'</span>);</span><br><span class="line"><span class="comment">// 我们的主任务——显示关键字</span></span><br><span class="line"><span class="comment">// 使用yield暂时中断下方代码执行</span></span><br><span class="line"><span class="comment">// yield后面为promise对象</span></span><br><span class="line"><span class="keyword">const</span> showKeyword = <span class="function"><span class="keyword">function</span>* (<span class="params">filepath</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始读取'</span>);</span><br><span class="line">    <span class="keyword">let</span> keyword = <span class="keyword">yield</span> readFile(filepath);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`关键字为<span class="subst">$&#123;filepath&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用co</span></span><br><span class="line">co(showKeyword);</span><br></pre></td></tr></table></figure><p>其中，yeild关键字后面需要是<code>functio, promise, generator, array或object</code>。可以改写文章一开始的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> co = reuqire(<span class="string">'co'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task = <span class="function"><span class="keyword">function</span>* (<span class="params">filepath</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> keyword = <span class="keyword">yield</span> readFile(filepath);</span><br><span class="line">   <span class="keyword">let</span> count = <span class="keyword">yield</span> queryDB(keyword);</span><br><span class="line">   <span class="keyword">let</span> data = <span class="keyword">yield</span> getData(res.length);</span><br><span class="line">   <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">co(task, <span class="string">'./sample.txt'</span>);</span><br></pre></td></tr></table></figure><p>五、async/await</p><p>可以看到，上面的方法虽然都在一定程度上解决了异步编程中回调带来的问题。然而</p><ul><li>function拆分的方式其实仅仅只是拆分代码块，时常会不利于后续维护；</li><li>事件发布/监听方式模糊了异步方法之间的流程关系；</li><li>Promise虽然使得多个嵌套的异步调用能够通过链式的API进行操作，但是过多的then也增加了代码的冗余，也对阅读代码中各阶段的异步任务产生了一定干扰；</li><li>通过generator虽然能提供较好的语法结构，但是毕竟generator与yield的语境用在这里多少还有些不太贴切。</li></ul><p>因此，这里再介绍一个方法，它就是es7中的async/await。</p><p>简单介绍一下async/await。基本上，任何一个函数都可以成为async函数，以下都是合法的书写形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure><p>在async函数中可以使用await语句。await后一般是一个Promise对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始'</span>);</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> post(data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`post已完成，结果为：<span class="subst">$&#123;res&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当上面的函数执行到await时，可以简单理解为，函数挂起，等待<code>await</code>后的<code>Promise</code>返回，再执行下面的语句。</p><p>值得注意的是，这段异步操作的代码，看起来就像是“同步操作”。这就大大方便了异步代码的编写与阅读。下面改写我们的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> printData = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">filepath</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> keyword = <span class="keyword">await</span> readFile(filepath);</span><br><span class="line">   <span class="keyword">let</span> count = <span class="keyword">await</span> queryDB(keyword);</span><br><span class="line">   <span class="keyword">let</span> data = <span class="keyword">await</span> getData(res.length);</span><br><span class="line">   <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">printData(<span class="string">'./sample.txt'</span>);</span><br></pre></td></tr></table></figure><p>可以看到，代码简洁清晰，异步代码也具有了“同步”代码的结构。</p><p>注意，其中<code>readFile、queryDB与getData</code>方法都需要返回一个<code>Promise</code>对象。这可以通过在第三部分Promise里提供的方式进行改写。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>异步编程作为JavaScript中的一部分，具有非常重要的位置，它帮助我们避免同步代码带来的线程阻塞的同时，也为编码与阅读带来了一定的困难。过多的回调嵌套很容易会让我们陷入“回调地狱”中，使代码变成一团乱麻。为了解决“回调地狱”，我们可以使用文中所述的这五种常用方法：</p><ul><li>function拆解</li><li>事件发布/订阅模式</li><li>Promise</li><li>Generator</li><li>async / await</li></ul><p>理解各类方法的原理与实现方式，了解其中利弊，可以帮助我们更好得进行异步编程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/bc7b8d542dcd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;异步编程在JavaScript中非常重要。过多的异步编程也带了回调嵌套的问题，本文会提供一些解决“回调地狱”的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;延时触发&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;./samp.txt&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res,error&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面就是典型的回调函数，不论是在浏览器中，还是在node中，JavaScript本身是单线程，因此，为了应对一些单线程带来的问题，异步编程成为了JavaScript中非常重要的一部分。&lt;/p&gt;
&lt;p&gt;不论是浏览器中最为常见的&lt;strong&gt;ajax、事件监听，还是node中文件读取、网络编程、数据库等操作&lt;/strong&gt;，都离不开异步编程。在异步编程中，许多操作都会放&lt;strong&gt;在回调函数（callback）&lt;/strong&gt;中。同步与异步的混杂、过多的回调嵌套都会使得代码变得难以理解与维护，这也是常受人诟病的地方。&lt;/p&gt;
&lt;p&gt;先看下面这段代码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;./sample.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;, (err, content) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; keyword = content.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.find(&lt;span class=&quot;string&quot;&gt;`select * from sample where kw = &lt;span class=&quot;subst&quot;&gt;$&amp;#123;keyword&amp;#125;&lt;/span&gt;`&lt;/span&gt;, (err, res) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(`/sampleget?count=$&amp;#123;res.length&amp;#125;&lt;span class=&quot;string&quot;&gt;`, data =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;           console.log(data);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先我们读取的一个文件中的关键字keyword，然后根据该keyword进行数据库查询，最后依据查询结果请求数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件读取：fs.readFile&lt;/li&gt;
&lt;li&gt;数据库查询：db.find&lt;/li&gt;
&lt;li&gt;http请求：get&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，我们没增加一个异步请求，就会多添加一层回调函数的嵌套，这段代码中三个异步函数的嵌套已经开始使一段本可以语言明确的代码编程不易阅读与维护了。&lt;/p&gt;
&lt;p&gt;抽象出来这种代码会变成下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;asyncFunc1(opt, (...args1) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    asyncFunc2(opt, (...args2) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        asyncFunc3(opt, (...args3) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            asyncFunc4(opt, (...args4) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// some operation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;左侧明显出现了一个三角形的缩进区域，过多的回调也就让我们陷入&lt;code&gt;“回调地狱”&lt;/code&gt;。接下来会介绍一些方法来规避回调地狱。&lt;/p&gt;
&lt;h2 id=&quot;一、拆解function&quot;&gt;&lt;a href=&quot;#一、拆解function&quot; class=&quot;headerlink&quot; title=&quot;一、拆解function&quot;&gt;&lt;/a&gt;一、拆解function&lt;/h2&gt;&lt;p&gt;回调嵌套所带来的一个重要问题就是代码不易阅读与维护。因为普遍来说，过多的缩进（嵌套）会极大的影响代码的可读性。基于这一点，可以进行一个最简单的优化——将各步拆解为单个的&lt;code&gt;function&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;count&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(`/sampleget?count=$&amp;#123;count&amp;#125;&lt;span class=&quot;string&quot;&gt;`, data =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        console.log(data);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;function queryDB(kw) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    db.find(`&lt;/span&gt;select * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sample where kw = $&amp;#123;kw&amp;#125;&lt;span class=&quot;string&quot;&gt;`, (err, res) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        getData(res.length);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;function readFile(filepath) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    fs.readFile(filepath, &#39;utf-8&#39;, (err, content) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        let keyword = content.substring(0, 5);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        queryDB(keyword);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;readFile(&#39;./sample.txt&#39;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，通过上面的改写方式，代码清晰了许多。该方法非常简单，具有一定的效果，但是缺少通用性。&lt;/p&gt;
&lt;h2 id=&quot;二、事件发布-监听模式&quot;&gt;&lt;a href=&quot;#二、事件发布-监听模式&quot; class=&quot;headerlink&quot; title=&quot;二、事件发布/监听模式&quot;&gt;&lt;/a&gt;二、事件发布/监听模式&lt;/h2&gt;&lt;p&gt;如果在浏览器中写过事件监听&lt;code&gt;addEventListener&lt;/code&gt;，那么你对这种事件发布/监听的模式一定不陌生。&lt;/p&gt;
&lt;p&gt;借鉴这种思想，一方面，我们可以监听某一事件，当事件发生时，进行相应回调操作；另一方面，当某些操作完成后，通过发布事件触发回调。这样就可以将原本捆绑在一起的代码解耦。&lt;br&gt;
    
    </summary>
    
      <category term="Js" scheme="https://zhanghao-web.github.io/categories/Js/"/>
    
    
      <category term="Js" scheme="https://zhanghao-web.github.io/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>Webpack Freestyle 之 Long Term Cache(webpack 实现持久性缓存)</title>
    <link href="https://zhanghao-web.github.io/2019/07/31/Tools/Webpack-Freestyle-%E4%B9%8B-Long-Term-Cache-webpack-%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E6%80%A7%E7%BC%93%E5%AD%98/"/>
    <id>https://zhanghao-web.github.io/2019/07/31/Tools/Webpack-Freestyle-之-Long-Term-Cache-webpack-实现持久性缓存/</id>
    <published>2019-07-31T06:36:29.000Z</published>
    <updated>2020-01-28T10:04:15.063Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/27710902" target="_blank" rel="noopener">原文地址</a></p><h2 id="How-Browser-Cache-Works"><a href="#How-Browser-Cache-Works" class="headerlink" title="How Browser Cache Works"></a>How Browser Cache Works</h2><p>首先，我们要搞清楚浏览器缓存是怎么工作的。 那么，就让我画一张图来告诉大家吧，嘻嘻。</p><p><img src="https://pic2.zhimg.com/80/v2-5babc40038bcc8add9c5f8bcb717c7b5_hd.png" alt="pic"></p><ul><li>浏览器: 我需要 foo.js</li><li>服务器: 让我找找。找到了，给你，缓存有效期为 1 年。</li><li>浏览器: 好，我把他缓存到磁盘里。</li></ul><p>过了 2 天，</p><p><img src="https://pic4.zhimg.com/80/v2-b5e4a95482e0008758b94ec96c0f60a3_hd.png" alt="pic1"></p><p>浏览器: 我需要 foo.js ，在缓存里找到了。缓存还有效，那直接读缓存。<br>用户：哇塞，这网页秒开啊。</p><p>又过了 2 天，foo.js 的代码更新了。（内容从 Hello world 变成了 Goodbye world ）</p><p><img src="https://pic2.zhimg.com/80/v2-680f699d7e09991af4f6bf260559aef1_hd.png" alt="pic2"></p><p>浏览器：我需要 foo.js ，在缓存里找到了。缓存还有效，那直接读缓存。<br>产品经理：？？？这页面怎么跟以前一样啊？</p><p>很尴尬。foo.js 明明更新了，但是浏览器还是读取在缓存中旧的 foo.js ，原因是我们用了缓存，不用缓存就没这事儿了。?</p><p>解决办法嘛，当然有的。比如每次利用缓存之前，<code>先向服务器确认文件是否有更新，有更新则使用新的否则读缓存</code>。还有一种方法是<code>把缓存破坏掉，也就是下面要说的*Cache Busting Technique*</code> </p><h2 id="Cache-Busting-Technique"><a href="#Cache-Busting-Technique" class="headerlink" title="Cache Busting Technique"></a>Cache Busting Technique</h2><p>因为 foo.js 的代码变化了，但是他的缓存还没失效，此时浏览器还是会读取以前的缓存了的 foo.js ，并不会去服务器下载最新的。这显然不是我们想要的，怎么办呢？我们需要破坏缓存（ Cache Busting ）。</p><p>破坏缓存并不是禁止缓存，而是换一种方式让缓存失效。比如：</p><p>1.修改文件的名字：foo.js -&gt; foo.v2.js<br>2.修改文件的路径：/static/foo.js -&gt; /static/v2/foo.js<br>3.加 query string : foo.js -&gt; foo.js?v=qwer</p><p>我们下面将采用第一种方法，也就是修改文件的名字。我们把更新后的 foo.js 的文件名改成 foo.v2.js 。这样，浏览器就不会去读取缓存里的旧的 foo.js ，而是向服务请请求 foo.v2.js ，如下图所示：</p><p><img src="https://pic2.zhimg.com/80/v2-103471cbe5d028bc9e1122db6e4243b9_hd.png" alt="pic4"></p><p>那么，假设我们现在有很多很多的静态文件，然后每次需要更新很多很多的文件，那是不是要手动地一个一个地修改文件的名字呢？我们的理想当然是：哪个文件更新了，就<strong>自动</strong>地生成一个新的文件名。</p><p>另外，如果我们打包出来的静态文件只有一个单独的 JavaScript 文件 app.js ，那么每次改动一点代码，app.js 的文件名肯定都会变。但实际上，我只改动了某个模块的代码（其他模块并没有修改），就破坏了其他模块的缓存，这显然没有充分利用到缓存啊。我们的想法是：哪个模块更新了破坏他的缓存，没更新的模块继续利用缓存。</p><p>这个时候，我们就需要用到 webpack 的 code splitting（如果还不会的话，可以阅读 <a href="https://zhuanlan.zhihu.com/p/26710831?refer=ElemeFE" target="_blank" rel="noopener">Webpack 大法之 Code Splitting</a> ）。把整个 App 分成一个个 chunk ，然后哪个 chunk 发生改变，我就破坏他的缓存；没有更新的 chunk ，则继续利用缓存。这样一来，我们就把缓存的作用发挥到淋漓尽致～</p><p>所以，<code>code splitting</code> 的作用除了”减少文件大小”之外，还能更充分地利用缓存。所以，下面就让我们用 webpack 来实现持久性缓存吧。</p><h2 id="Webpack-amp-Caching"><a href="#Webpack-amp-Caching" class="headerlink" title="Webpack &amp; Caching"></a>Webpack &amp; Caching</h2><p>首先，把我们的 <a href="https://link.zhihu.com/?target=https%3A//github.com/lyyourc/webpack-code-splitting-demo">demo 项目</a>（已经实现了 code splitting ）下载并安装好依赖。</p><p>接着，修改 webpack 配置文件，给我们打包后的静态文件生成随机的唯一的名字。（ changed files ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    filename: <span class="string">'[name].[chunkhash:8].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[chunkhash:8].chunk.js'</span>,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用了 <code>[chunkhash]</code> 这个占位符，并且为了更好地分辨和展示 demo ，我们截取了他的前 8 个字符 <code>[chunkhash:8]</code>，但是在实际生产中我们不要那么做！</p><p>好咯，现在来看看我们的打包后的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                    Asset            Size    Chunk Names</span><br><span class="line">common-<span class="keyword">in</span>-lazy.fa79d198.chunk.js    <span class="number">11.6</span> kB  common-<span class="keyword">in</span>-lazy</span><br><span class="line">    used-twice.c2c4927c.chunk.js    <span class="number">17.1</span> kB  used-twice</span><br><span class="line">        Photos<span class="number">.28</span>d663ec.chunk.js    <span class="number">8.57</span> kB  Photos</span><br><span class="line">         Emoji.d3ea8991.chunk.js    <span class="number">1.15</span> kB  Emoji</span><br><span class="line">                 app<span class="number">.724</span>a238a.js    <span class="number">2.53</span> kB  app</span><br><span class="line">              vendor<span class="number">.05</span>be8f94.js     <span class="number">104</span> kB  vendor</span><br></pre></td></tr></table></figure><p>那么，现在我们来修改一下 App.vue ，添加个 <code>&lt;footer&gt;</code> 标签（ changed files ） :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- old codes --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span> A Footer <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>此时的打包变成了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                        Asset       Size  Chunk Names</span><br><span class="line">common-<span class="keyword">in</span>-lazy.fa79d198.chunk.js    <span class="number">11.6</span> kB  common-<span class="keyword">in</span>-lazy</span><br><span class="line">    used-twice.c2c4927c.chunk.js    <span class="number">17.1</span> kB  used-twice</span><br><span class="line">        Photos<span class="number">.28</span>d663ec.chunk.js    <span class="number">8.57</span> kB  Photos</span><br><span class="line">         Emoji.d3ea8991.chunk.js    <span class="number">1.15</span> kB  Emoji</span><br><span class="line">                 app.fdc2eedb.js    <span class="number">2.57</span> kB  app</span><br><span class="line">              vendor.b611a5da.js     <span class="number">104</span> kB  vendor</span><br></pre></td></tr></table></figure><p>注意到，我们的 app chunk 的 hash 从 724a238a 变成了 fdc2eedb ，这是我们所希望看到的东西。但是，与此同时 vendor chunk 的 hash 也变了（05be8f94 -&gt; b611a5da）。然而，我们并没有修改 vendor chunk 的代码，为什么他的 hash 也变了呢？?</p><p>原因是 <code>vendor chunk</code> 里面包含了 <code>webpack</code> 的 <code>runtime</code> 代码（用来解析和加载模块之类的运行时代码）：</p><p>解决办法就是把 webpack 的 runtime 代码提取出来（ changed files ）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123; </span><br><span class="line">  name: [<span class="string">'manifast'</span>] </span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>把之前 App.vue 更新了的代码暂时去掉，也就是上面添加的 <code>&lt;footer&gt;</code> 标签去掉：</p><p>接着按照之前的，修改 App.vue ，添加 `` 标签（ changed files ）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- old codes --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span> A Footer <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而此时的打包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                        Asset       Size  Chunk Names</span><br><span class="line">common-<span class="keyword">in</span>-lazy.fa79d198.chunk.js    <span class="number">11.6</span> kB  common-<span class="keyword">in</span>-lazy</span><br><span class="line">    used-twice.c2c4927c.chunk.js    <span class="number">17.1</span> kB  used-twice</span><br><span class="line">        Photos<span class="number">.28</span>d663ec.chunk.js    <span class="number">8.57</span> kB  Photos</span><br><span class="line">         Emoji.d3ea8991.chunk.js    <span class="number">1.15</span> kB  Emoji</span><br><span class="line">                 app.fdc2eedb.js    <span class="number">2.57</span> kB  app</span><br><span class="line">              vendor<span class="number">.3</span>b70f9d8.js     <span class="number">103</span> kB  vendor</span><br><span class="line">            manifast<span class="number">.1442e3</span>f3.js    <span class="number">1.54</span> kB  manifast</span><br></pre></td></tr></table></figure><p>很开心，此时只有 <code>app.js</code> 和 <code>manifast.js</code> 这 2 个 chunk 的文件名的 hash 发生了改变，vendor.js chunk 和其他 chunk 都没变，舒服。</p><p>但是，假如我们给 App.vue 随便引入一个模块的话，比如（ changed files ）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">import</span> noop <span class="keyword">from</span> <span class="string">'./shared/utils.js'</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>而此时的打包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                        Asset       Size  Chunk Names</span><br><span class="line">common-<span class="keyword">in</span>-lazy<span class="number">.30</span>b1e9b6.chunk.js    <span class="number">11.6</span> kB  common-<span class="keyword">in</span>-lazy</span><br><span class="line">    used-twice<span class="number">.9</span>eccbe5a.chunk.js    <span class="number">17.1</span> kB  used-twice</span><br><span class="line">        Photos<span class="number">.6096611</span>c.chunk.js    <span class="number">8.57</span> kB  Photos</span><br><span class="line">         Emoji<span class="number">.6208</span>da60.chunk.js    <span class="number">1.15</span> kB  Emoji</span><br><span class="line">                 app<span class="number">.4675</span>a374.js    <span class="number">2.61</span> kB  app</span><br><span class="line">              vendor<span class="number">.8</span>b538297.js     <span class="number">103</span> kB  vendor</span><br><span class="line">            manifast<span class="number">.25580296</span>.js    <span class="number">1.54</span> kB  manifast</span><br></pre></td></tr></table></figure><p>卧槽居然所有 chunk 的 hash 都发生了改变，这是为什么？</p><p><strong>原因是在 webpack 里每个模块都有一个 module id </strong>，module id 是该模块在<a href="https://link.zhihu.com/?target=https%3A//webpack.js.org/concepts/dependency-graph/">模块依赖关系图</a>里按顺序分配的序号，如果这个 module id 发生了变化，那么他的 chunkhash 也会发生变化。（不确定这里是否正确，希望大佬指出错误）</p><p><img src="https://pic4.zhimg.com/80/v2-5a4b6bef5809e00512873d481a3670e7_hd.png" alt="pic5"></p><p>所以呢，我们需要用一种新的方式来计算 module id 。 <strong>HashedModuleIdsPlugin</strong> 这个插件，他是根据模块所在路径来映射其 module id ，这样就算引入了新的模块，也不会影响 module id 的值，只要模块的路径不改变的话。</p><p>修改我们的 webpack 配置。并且，去掉上面 App.vue 引入的 noop 模块。（ changed files ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>可以看到，只有 app chunk 和 manifast chunk 的 hash 发生了改变，其他 chunk 不变所以他们的缓存就没被破坏。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用 webpack 实现 long term cache ：</p><ul><li>生成稳定的 hash 文件名</li><li>提取 webpack 的 runtime 代码</li><li>code splitting</li></ul><p>还有一些东西我们是没讲到的，比如 CSS 的 cache ，内联 manifast chunk 等等，就留给大家去探索咯。</p><p>最后需要注意的是，webpack 是允许其他 plugin 来修改 chunkhash 的，如果他们不能正确地处理的话，那么，假设你更新了代码，但是对应的 chunkhash 没变，并且此时缓存还没失效，就会导致线上的代码还是旧的，用户看到的还是以前的页面。因此，一定要特别注意 chunkhash 到底正不正确！！</p><p>希望本文可以帮助到大家，这样我会很开心的。(<em> </em>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27710902&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;How-Browser-Cache-Works&quot;&gt;&lt;a href=&quot;#How-Browser-Cache-Works&quot; class=&quot;headerlink&quot; title=&quot;How Browser Cache Works&quot;&gt;&lt;/a&gt;How Browser Cache Works&lt;/h2&gt;&lt;p&gt;首先，我们要搞清楚浏览器缓存是怎么工作的。 那么，就让我画一张图来告诉大家吧，嘻嘻。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-5babc40038bcc8add9c5f8bcb717c7b5_hd.png&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器: 我需要 foo.js&lt;/li&gt;
&lt;li&gt;服务器: 让我找找。找到了，给你，缓存有效期为 1 年。&lt;/li&gt;
&lt;li&gt;浏览器: 好，我把他缓存到磁盘里。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过了 2 天，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-b5e4a95482e0008758b94ec96c0f60a3_hd.png&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;
&lt;p&gt;浏览器: 我需要 foo.js ，在缓存里找到了。缓存还有效，那直接读缓存。&lt;br&gt;用户：哇塞，这网页秒开啊。&lt;/p&gt;
&lt;p&gt;又过了 2 天，foo.js 的代码更新了。（内容从 Hello world 变成了 Goodbye world ）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-680f699d7e09991af4f6bf260559aef1_hd.png&quot; alt=&quot;pic2&quot;&gt;&lt;/p&gt;
&lt;p&gt;浏览器：我需要 foo.js ，在缓存里找到了。缓存还有效，那直接读缓存。&lt;br&gt;产品经理：？？？这页面怎么跟以前一样啊？&lt;/p&gt;
&lt;p&gt;很尴尬。foo.js 明明更新了，但是浏览器还是读取在缓存中旧的 foo.js ，原因是我们用了缓存，不用缓存就没这事儿了。?&lt;/p&gt;
&lt;p&gt;解决办法嘛，当然有的。比如每次利用缓存之前，&lt;code&gt;先向服务器确认文件是否有更新，有更新则使用新的否则读缓存&lt;/code&gt;。还有一种方法是&lt;code&gt;把缓存破坏掉，也就是下面要说的*Cache Busting Technique*&lt;/code&gt; &lt;/p&gt;
&lt;h2 id=&quot;Cache-Busting-Technique&quot;&gt;&lt;a href=&quot;#Cache-Busting-Technique&quot; class=&quot;headerlink&quot; title=&quot;Cache Busting Technique&quot;&gt;&lt;/a&gt;Cache Busting Technique&lt;/h2&gt;&lt;p&gt;因为 foo.js 的代码变化了，但是他的缓存还没失效，此时浏览器还是会读取以前的缓存了的 foo.js ，并不会去服务器下载最新的。这显然不是我们想要的，怎么办呢？我们需要破坏缓存（ Cache Busting ）。&lt;/p&gt;
&lt;p&gt;破坏缓存并不是禁止缓存，而是换一种方式让缓存失效。比如：&lt;/p&gt;
&lt;p&gt;1.修改文件的名字：foo.js -&amp;gt; foo.v2.js&lt;br&gt;2.修改文件的路径：/static/foo.js -&amp;gt; /static/v2/foo.js&lt;br&gt;3.加 query string : foo.js -&amp;gt; foo.js?v=qwer&lt;/p&gt;
&lt;p&gt;我们下面将采用第一种方法，也就是修改文件的名字。我们把更新后的 foo.js 的文件名改成 foo.v2.js 。这样，浏览器就不会去读取缓存里的旧的 foo.js ，而是向服务请请求 foo.v2.js ，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-103471cbe5d028bc9e1122db6e4243b9_hd.png&quot; alt=&quot;pic4&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么，假设我们现在有很多很多的静态文件，然后每次需要更新很多很多的文件，那是不是要手动地一个一个地修改文件的名字呢？我们的理想当然是：哪个文件更新了，就&lt;strong&gt;自动&lt;/strong&gt;地生成一个新的文件名。&lt;/p&gt;
&lt;p&gt;另外，如果我们打包出来的静态文件只有一个单独的 JavaScript 文件 app.js ，那么每次改动一点代码，app.js 的文件名肯定都会变。但实际上，我只改动了某个模块的代码（其他模块并没有修改），就破坏了其他模块的缓存，这显然没有充分利用到缓存啊。我们的想法是：哪个模块更新了破坏他的缓存，没更新的模块继续利用缓存。&lt;/p&gt;
&lt;p&gt;这个时候，我们就需要用到 webpack 的 code splitting（如果还不会的话，可以阅读 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/26710831?refer=ElemeFE&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Webpack 大法之 Code Splitting&lt;/a&gt; ）。把整个 App 分成一个个 chunk ，然后哪个 chunk 发生改变，我就破坏他的缓存；没有更新的 chunk ，则继续利用缓存。这样一来，我们就把缓存的作用发挥到淋漓尽致～&lt;/p&gt;
&lt;p&gt;所以，&lt;code&gt;code splitting&lt;/code&gt; 的作用除了”减少文件大小”之外，还能更充分地利用缓存。所以，下面就让我们用 webpack 来实现持久性缓存吧。&lt;/p&gt;
&lt;h2 id=&quot;Webpack-amp-Caching&quot;&gt;&lt;a href=&quot;#Webpack-amp-Caching&quot; class=&quot;headerlink&quot; title=&quot;Webpack &amp;amp; Caching&quot;&gt;&lt;/a&gt;Webpack &amp;amp; Caching&lt;/h2&gt;&lt;p&gt;首先，把我们的 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/lyyourc/webpack-code-splitting-demo&quot;&gt;demo 项目&lt;/a&gt;（已经实现了 code splitting ）下载并安装好依赖。&lt;/p&gt;
&lt;p&gt;接着，修改 webpack 配置文件，给我们打包后的静态文件生成随机的唯一的名字。（ changed files ）&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].[chunkhash:8].js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    chunkFilename: &lt;span class=&quot;string&quot;&gt;&#39;[name].[chunkhash:8].chunk.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们使用了 &lt;code&gt;[chunkhash]&lt;/code&gt; 这个占位符，并且为了更好地分辨和展示 demo ，我们截取了他的前 8 个字符 &lt;code&gt;[chunkhash:8]&lt;/code&gt;，但是在实际生产中我们不要那么做！&lt;/p&gt;
&lt;p&gt;好咯，现在来看看我们的打包后的文件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                    Asset            Size    Chunk Names&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;common-&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;-lazy.fa79d198.chunk.js    &lt;span class=&quot;number&quot;&gt;11.6&lt;/span&gt; kB  common-&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;-lazy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    used-twice.c2c4927c.chunk.js    &lt;span class=&quot;number&quot;&gt;17.1&lt;/span&gt; kB  used-twice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Photos&lt;span class=&quot;number&quot;&gt;.28&lt;/span&gt;d663ec.chunk.js    &lt;span class=&quot;number&quot;&gt;8.57&lt;/span&gt; kB  Photos&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         Emoji.d3ea8991.chunk.js    &lt;span class=&quot;number&quot;&gt;1.15&lt;/span&gt; kB  Emoji&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 app&lt;span class=&quot;number&quot;&gt;.724&lt;/span&gt;a238a.js    &lt;span class=&quot;number&quot;&gt;2.53&lt;/span&gt; kB  app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              vendor&lt;span class=&quot;number&quot;&gt;.05&lt;/span&gt;be8f94.js     &lt;span class=&quot;number&quot;&gt;104&lt;/span&gt; kB  vendor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么，现在我们来修改一下 App.vue ，添加个 &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; 标签（ changed files ） :&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- old codes --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt; A Footer &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://zhanghao-web.github.io/categories/Tools/"/>
    
    
      <category term="Webpack" scheme="https://zhanghao-web.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>通过一个问题学习map,filter,reduce语法</title>
    <link href="https://zhanghao-web.github.io/2019/07/24/Js/%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98%E5%AD%A6%E4%B9%A0map-filter-reduce%E8%AF%AD%E6%B3%95/"/>
    <id>https://zhanghao-web.github.io/2019/07/24/Js/通过一个问题学习map-filter-reduce语法/</id>
    <published>2019-07-24T01:44:52.000Z</published>
    <updated>2020-01-28T10:04:15.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比如一个从1-10的简单的数组，需要从中取奇数，你会怎么做？"><a href="#比如一个从1-10的简单的数组，需要从中取奇数，你会怎么做？" class="headerlink" title="比如一个从1-10的简单的数组，需要从中取奇数，你会怎么做？"></a>比如一个从1-10的简单的数组，需要从中取奇数，你会怎么做？</h2><p>这个问题不难，有的少侠可能会使用for循环来过滤出偶数，某些少侠可能会使用while循环，又或是使用数组自带的filter方法。</p><p>这里，我们先不考虑使用for和while这些迭代方法，我们选择使用数组自带的filter方法，如果使用filter方法的话，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="comment">// 过滤出所有奇数</span></span><br><span class="line">nums.filter(<span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br></pre></td></tr></table></figure><p>还是挺简单的对吧？</p><p>相信大部分少侠都能很轻松完成。</p><p>在filter函数内部，我们使用 <code>num % 2 !== 0</code> 来判断 是否是一个奇数，如果是一个奇数，就过滤出来。</p><p>在这里，有的少侠可能就会想到，如果把这个判断过程单独分成一个函数，会方便一些，也方便以后的修改扩展。</p><p>比如单独写一个isOdd函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>然后在filter里面使用这个函数，是吧？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 过滤出所有奇数</span></span><br><span class="line"><span class="keyword">const</span> odd = nums.filter(isOdd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(odd);</span><br></pre></td></tr></table></figure><h2 id="如果要把nums里面的数字翻倍，用map函数，又该怎么做呢？"><a href="#如果要把nums里面的数字翻倍，用map函数，又该怎么做呢？" class="headerlink" title="如果要把nums里面的数字翻倍，用map函数，又该怎么做呢？"></a>如果要把nums里面的数字翻倍，用map函数，又该怎么做呢？</h2><p>聪明的少侠这次肯定一下就明白了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> doubleNumbers = nums.map(double);</span><br><span class="line"><span class="built_in">console</span>.log(doubleNumbers);</span><br></pre></td></tr></table></figure><h2 id="从nums里面过滤出所有奇数，并翻倍这些奇数。"><a href="#从nums里面过滤出所有奇数，并翻倍这些奇数。" class="headerlink" title="从nums里面过滤出所有奇数，并翻倍这些奇数。"></a>从nums里面过滤出所有奇数，并翻倍这些奇数。</h2><p>这个问题也不难是吧？</p><p>让我猜一下，一些少侠应该会写成下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doubleNums = nums.filter(isOdd).map(double);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubleNums);</span><br></pre></td></tr></table></figure><h2 id="如果我们还想继续算出所有奇数翻倍后的和的话"><a href="#如果我们还想继续算出所有奇数翻倍后的和的话" class="headerlink" title="如果我们还想继续算出所有奇数翻倍后的和的话"></a>如果我们还想继续算出所有奇数翻倍后的和的话</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">sum,num</span>) =&gt;</span> sum += num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doubleNums = nums.filter(isOdd).map(double).reduce(add,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubleNums);</span><br></pre></td></tr></table></figure><p>嗯，一个串一个看起来很酷是吧？ 最后的结果也是正确的。</p><p>这样串起来的后果就是，我们会遍历3次数组，filter的时候遍历一次，map的时候遍历一次，reduce的时候再遍历一次。</p><p>现在数组只有10个数字，影响还不大，但是如果是很大的数组，比如100万个数字，遍历3遍的话，那么就会多访问<strong>150万次</strong>，</p><p>想象一下，如果让你自己从中间取出所有奇数，翻倍，并求和，你会觉得怎么做简单一些呢？</p><blockquote><p>是不是觉得下面这样才比较正常？</p></blockquote><ul><li>首先，从第一个数字开始，如果它是奇数，就拿出来，翻倍，然后找个地方放起来</li><li>接着，继续看第二个数字，如果是偶数，就跳过，如果是奇数，就拿出来，翻倍，然后和开始的翻倍后的奇数加起来，找个地方放起来。</li><li>接着看第三个数字，以此类推，只要是奇数，就翻倍，然后和之前的结果加起来。</li><li>直到我们找寻到最后一个数字，就可以算出最终结果了，</li></ul><p>如果使用迭代的话，就是下面这样:<br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">sum,num</span>) =&gt;</span> sum += num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存最终结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">0</span>; i&lt; nums.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i]%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">        result = result + nums[i]*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><p>没错，通常这样才是正常的操作。</p><p>但是，</p><p>这样的代码不太方便，</p><p>少侠你肯定也不想每次都写这么一大堆for循环语句吧？</p><p>所以，我们可以先试着继续优化一下。</p><p>我们首先试着用一个叫做magic(魔法)的函数把这些步骤包裹起来:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> magic = <span class="function"><span class="params">array</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = array.length,</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i, i &lt; length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i] % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">            sum = sum + array[i]*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(magic(nums)); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><p>现在看起来好多了，不过，magic内部的操作看起来不是很清晰，</p><p>其他少侠看见了可能很难一眼就明白magic函数在做什么,</p><p>我们可以试着把里面的一些步骤分成更小的函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">sum,num</span>) =&gt;</span> sum += num;</span><br><span class="line"><span class="keyword">const</span> magic = <span class="function"><span class="params">array</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = array.length,</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i, i &lt; length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isOdd(array[i]))&#123;</span><br><span class="line">            sum = add(sum,double(array[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(magic(nums)); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><p>现在比较简洁也比较清晰了，不过，假如我们现在要计算是偶数而不是奇数怎么办呢？</p><p>或者如果更复杂些，如果是偶数，就反过来，除以二，然后求和，又该怎么办呢？</p><p>难道我们又要复制一次magic函数，然后改动for循环里面的逻辑吗？</p><p>也许，我们可以把for循环内部的逻辑单独提取成一个外部函数！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> isEvent = <span class="function"><span class="params">num</span> =&gt;</span> !isOdd(num)</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> part = <span class="function"><span class="params">num</span> =&gt;</span> num /<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">sum,num</span>) =&gt;</span> sum += num;</span><br><span class="line"><span class="keyword">const</span> magic = <span class="function">(<span class="params">array,fn,sum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = array.length,</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i, i &lt; length; i++)&#123;</span><br><span class="line">        sum = magicFriends(sum,array[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">magicFriends</span>(<span class="params">sum,num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isOdd(num))&#123;</span><br><span class="line">        sum = add(sum,double(num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(magic(nums,magicFriends,<span class="number">0</span>)); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><h2 id="接下来就是见证奇迹的时刻！"><a href="#接下来就是见证奇迹的时刻！" class="headerlink" title="接下来就是见证奇迹的时刻！"></a>接下来就是见证奇迹的时刻！</h2><p>首先，我们给代码里面部分函数和参数改一下名字:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> isEvent = <span class="function"><span class="params">num</span> =&gt;</span> !isOdd(num)</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> part = <span class="function"><span class="params">num</span> =&gt;</span> num /<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">sum,num</span>) =&gt;</span> sum += num;</span><br><span class="line"><span class="keyword">const</span> reduce = <span class="function">(<span class="params">array,reducer,result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = array.length,</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i, i &lt; length; i++)&#123;</span><br><span class="line">        result = reducer(sum,array[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consot magicFriends = <span class="function">(<span class="params">sum,num</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isOdd(num))&#123;</span><br><span class="line">        sum = add(sum,double(num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(reduce(nums,magicFriends,<span class="number">0</span>)); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><p>是不是有点眼熟了？ 接着，我们换成数组自带的reduce函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> isEvent = <span class="function"><span class="params">num</span> =&gt;</span> !isOdd(num)</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> part = <span class="function"><span class="params">num</span> =&gt;</span> num /<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">sum,num</span>) =&gt;</span> sum += num;</span><br><span class="line">consot magicFriends = <span class="function">(<span class="params">sum,num</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isOdd(num))&#123;</span><br><span class="line">        sum = add(sum,double(num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(nums.reduce(magicFriends,<span class="number">0</span>)); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><h2 id="最后回到我们上面的问题"><a href="#最后回到我们上面的问题" class="headerlink" title="最后回到我们上面的问题:"></a>最后回到我们上面的问题:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> isOdd = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">sum,num</span>) =&gt;</span> sum += num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = nums.reduces(<span class="function">(<span class="params">sum,num</span>)=&gt;</span> isOdd(num) ? add(sum,dobule(num) : sum,<span class="number">0</span>));</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><p>这次我们用reduce只遍历了一次数组就完成了之前的操作！</p><p>现在知道为什么之前要把reduce叫做magic(魔法)了吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;比如一个从1-10的简单的数组，需要从中取奇数，你会怎么做？&quot;&gt;&lt;a href=&quot;#比如一个从1-10的简单的数组，需要从中取奇数，你会怎么做？&quot; class=&quot;headerlink&quot; title=&quot;比如一个从1-10的简单的数组，需要从中取奇数，你会怎么做？&quot;&gt;&lt;/a&gt;比如一个从1-10的简单的数组，需要从中取奇数，你会怎么做？&lt;/h2&gt;&lt;p&gt;这个问题不难，有的少侠可能会使用for循环来过滤出偶数，某些少侠可能会使用while循环，又或是使用数组自带的filter方法。&lt;/p&gt;
&lt;p&gt;这里，我们先不考虑使用for和while这些迭代方法，我们选择使用数组自带的filter方法，如果使用filter方法的话，&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 过滤出所有奇数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nums.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt; =&amp;gt;&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; !== &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nums);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还是挺简单的对吧？&lt;/p&gt;
&lt;p&gt;相信大部分少侠都能很轻松完成。&lt;/p&gt;
&lt;p&gt;在filter函数内部，我们使用 &lt;code&gt;num % 2 !== 0&lt;/code&gt; 来判断 是否是一个奇数，如果是一个奇数，就过滤出来。&lt;/p&gt;
&lt;p&gt;在这里，有的少侠可能就会想到，如果把这个判断过程单独分成一个函数，会方便一些，也方便以后的修改扩展。&lt;/p&gt;
&lt;p&gt;比如单独写一个isOdd函数&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isOdd = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt; =&amp;gt;&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; !== &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在filter里面使用这个函数，是吧？&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isOdd = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt; =&amp;gt;&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; !== &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 过滤出所有奇数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; odd = nums.filter(isOdd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(odd);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;如果要把nums里面的数字翻倍，用map函数，又该怎么做呢？&quot;&gt;&lt;a href=&quot;#如果要把nums里面的数字翻倍，用map函数，又该怎么做呢？&quot; class=&quot;headerlink&quot; title=&quot;如果要把nums里面的数字翻倍，用map函数，又该怎么做呢？&quot;&gt;&lt;/a&gt;如果要把nums里面的数字翻倍，用map函数，又该怎么做呢？&lt;/h2&gt;&lt;p&gt;聪明的少侠这次肯定一下就明白了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; double = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt; =&amp;gt;&lt;/span&gt; num *&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; doubleNumbers = nums.map(double);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(doubleNumbers);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;从nums里面过滤出所有奇数，并翻倍这些奇数。&quot;&gt;&lt;a href=&quot;#从nums里面过滤出所有奇数，并翻倍这些奇数。&quot; class=&quot;headerlink&quot; title=&quot;从nums里面过滤出所有奇数，并翻倍这些奇数。&quot;&gt;&lt;/a&gt;从nums里面过滤出所有奇数，并翻倍这些奇数。&lt;/h2&gt;&lt;p&gt;这个问题也不难是吧？&lt;/p&gt;
&lt;p&gt;让我猜一下，一些少侠应该会写成下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isOdd = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt; =&amp;gt;&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; !== &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; double = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt; =&amp;gt;&lt;/span&gt; num *&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; doubleNums = nums.filter(isOdd).map(double);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(doubleNums);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;如果我们还想继续算出所有奇数翻倍后的和的话&quot;&gt;&lt;a href=&quot;#如果我们还想继续算出所有奇数翻倍后的和的话&quot; class=&quot;headerlink&quot; title=&quot;如果我们还想继续算出所有奇数翻倍后的和的话&quot;&gt;&lt;/a&gt;如果我们还想继续算出所有奇数翻倍后的和的话&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isOdd = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt; =&amp;gt;&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; !== &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; double = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt; =&amp;gt;&lt;/span&gt; num *&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; add = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;sum,num&lt;/span&gt;) =&amp;gt;&lt;/span&gt; sum += num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; doubleNums = nums.filter(isOdd).map(double).reduce(add,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(doubleNums);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;嗯，一个串一个看起来很酷是吧？ 最后的结果也是正确的。&lt;/p&gt;
&lt;p&gt;这样串起来的后果就是，我们会遍历3次数组，filter的时候遍历一次，map的时候遍历一次，reduce的时候再遍历一次。&lt;/p&gt;
&lt;p&gt;现在数组只有10个数字，影响还不大，但是如果是很大的数组，比如100万个数字，遍历3遍的话，那么就会多访问&lt;strong&gt;150万次&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;想象一下，如果让你自己从中间取出所有奇数，翻倍，并求和，你会觉得怎么做简单一些呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是不是觉得下面这样才比较正常？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先，从第一个数字开始，如果它是奇数，就拿出来，翻倍，然后找个地方放起来&lt;/li&gt;
&lt;li&gt;接着，继续看第二个数字，如果是偶数，就跳过，如果是奇数，就拿出来，翻倍，然后和开始的翻倍后的奇数加起来，找个地方放起来。&lt;/li&gt;
&lt;li&gt;接着看第三个数字，以此类推，只要是奇数，就翻倍，然后和之前的结果加起来。&lt;/li&gt;
&lt;li&gt;直到我们找寻到最后一个数字，就可以算出最终结果了，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果使用迭代的话，就是下面这样:&lt;br&gt;
    
    </summary>
    
      <category term="Js" scheme="https://zhanghao-web.github.io/categories/Js/"/>
    
    
      <category term="Js" scheme="https://zhanghao-web.github.io/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 vue + typescript 编写页面(1)</title>
    <link href="https://zhanghao-web.github.io/2019/07/15/Ts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-vue-typescript-%E7%BC%96%E5%86%99%E9%A1%B5%E9%9D%A2-1/"/>
    <id>https://zhanghao-web.github.io/2019/07/15/Ts/如何使用-vue-typescript-编写页面-1/</id>
    <published>2019-07-15T09:10:33.000Z</published>
    <updated>2020-01-28T10:04:15.067Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5c662a7de51d4562e71c4277#comment" target="_blank" rel="noopener">原文地址</a></p><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p>使用 vue-cli 创建项目</p><p><code>vue create demo</code> ，demo就是创建项目的名称<br>提示选择预设，选择 <code>Manually select features</code> 回车确认<br>选择<code>typescript</code> <code>vuex</code>  <code>router</code> <code>babel</code> <code>css pre-processors</code>，不使用<code>linter</code>，不选单元测试有需要另说<br>回车后按照需要选择合适的选项<br>选择完毕后回车等待资源准备</p><h2 id="编码开始"><a href="#编码开始" class="headerlink" title="编码开始"></a>编码开始</h2><p>熟悉几个vue的装饰器 <code>vue-property-decorator</code></p><p>以下的装饰器的功能和原js编写的功能相同/相似，可以参照官方文档类比解读。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Vue, Component, Inject, Provide, Prop, Model, Watch, Emit, Mixins &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br></pre></td></tr></table></figure><h3 id="1-Vue-实际上就是-Vue-本身-继承vue相关属性和函数"><a href="#1-Vue-实际上就是-Vue-本身-继承vue相关属性和函数" class="headerlink" title="1. Vue 实际上就是 Vue 本身,继承vue相关属性和函数"></a>1. Vue 实际上就是 Vue 本身,继承vue相关属性和函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="2-Component-声明成一个vue的组件实例，如果不使用，则不能得到一个vue组件"><a href="#2-Component-声明成一个vue的组件实例，如果不使用，则不能得到一个vue组件" class="headerlink" title="2. @Component 声明成一个vue的组件实例，如果不使用，则不能得到一个vue组件"></a>2. @Component 声明成一个vue的组件实例，如果不使用，则不能得到一个vue组件</h3><p>第一种方式，不需要定义额外内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>第二种方式，定义相关内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    <span class="comment">/* 这里和js版本编写的 vue 组件内容相同，</span></span><br><span class="line"><span class="comment">     * 凡是不能在ts里面完成的都可以在这里完成 </span></span><br><span class="line"><span class="comment">     * 最终会被合并到一个实例中。</span></span><br><span class="line"><span class="comment">     * 在这里定义的内容，不会被语法器获取到，因此必须要同步在class中声明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">myname</span>:<span class="string">""</span>,<span class="attr">age</span>:<span class="number">18</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    private myname:string;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        <span class="keyword">this</span>.myname;    </span><br><span class="line">        <span class="keyword">this</span>.age;<span class="comment">// 语法器报错，当前类找不到age属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Provide-向任意层级的子组件提供可访问的属性，默认为当前属性的名称，可以指定名称"><a href="#3-Provide-向任意层级的子组件提供可访问的属性，默认为当前属性的名称，可以指定名称" class="headerlink" title="3.@Provide 向任意层级的子组件提供可访问的属性，默认为当前属性的名称，可以指定名称"></a>3.@Provide 向任意层级的子组件提供可访问的属性，默认为当前属性的名称，可以指定名称</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">    @Provide() private info!:string;</span><br><span class="line">    @Provide(<span class="string">"next"</span>) private infoNext!:string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Inject-获取父级由Provide提供的属性，默认为当前属性的名称，可以指定名称，多个父级提供相同名称属性时，获取最近父级的名称属性"><a href="#4-Inject-获取父级由Provide提供的属性，默认为当前属性的名称，可以指定名称，多个父级提供相同名称属性时，获取最近父级的名称属性" class="headerlink" title="4. @Inject 获取父级由Provide提供的属性，默认为当前属性的名称，可以指定名称，多个父级提供相同名称属性时，获取最近父级的名称属性"></a>4. @Inject 获取父级由Provide提供的属性，默认为当前属性的名称，可以指定名称，多个父级提供相同名称属性时，获取最近父级的名称属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">    @Inject() private info!:string;</span><br><span class="line">    @Inject(<span class="string">"next"</span>) private infoNext!:string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Prop-由标签属性注入，获取对应标签属性上值-可配置具体prop内容，参照js版本props内容"><a href="#5-Prop-由标签属性注入，获取对应标签属性上值-可配置具体prop内容，参照js版本props内容" class="headerlink" title="5. @Prop 由标签属性注入，获取对应标签属性上值,可配置具体prop内容，参照js版本props内容"></a>5. @Prop 由标签属性注入，获取对应标签属性上值,可配置具体prop内容，参照js版本props内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">   @Prop() age!:number;</span><br><span class="line">   @Prop(&#123;<span class="attr">default</span>:<span class="number">1</span>&#125;) sex!:number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">:age</span>=<span class="string">"16"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span>  </span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./MyComponent.vue'</span>;</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    components:&#123; MyComponent &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="class"><span class="keyword">class</span> <span class="title">PComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="6-Model-是v-model的装饰器，当自定义组件想使用v-model时，可以使用这种方式，配合emit可以双向传递属性值"><a href="#6-Model-是v-model的装饰器，当自定义组件想使用v-model时，可以使用这种方式，配合emit可以双向传递属性值" class="headerlink" title="6. @Model 是v-model的装饰器，当自定义组件想使用v-model时，可以使用这种方式，配合emit可以双向传递属性值"></a>6. @Model 是v-model的装饰器，当自定义组件想使用v-model时，可以使用这种方式，配合emit可以双向传递属性值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:checked</span>=<span class="string">"checked"</span> @<span class="attr">change</span>=<span class="string">"changed"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line">@Component</span><br><span class="line"><span class="actionscript"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span></span><br><span class="line"><span class="actionscript">   @Model(<span class="string">"change"</span>) checked!:number;</span></span><br><span class="line"><span class="actionscript">   changed(event:any)&#123; <span class="comment">/* 这里是偷懒写的any，在实际项目中需要避免 */</span></span></span><br><span class="line"><span class="actionscript">       <span class="keyword">this</span>.$emit(<span class="string">"change"</span>,event.target.value)</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">:age</span>=<span class="string">"16"</span> <span class="attr">v-model</span>=<span class="string">"mycheck"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span> </span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./MyComponent.vue'</span>;</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    components:&#123; MyComponent &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="class"><span class="keyword">class</span> <span class="title">PComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">private</span> mycheck:boolean = <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-Watch-观察某个属性更新"><a href="#7-Watch-观察某个属性更新" class="headerlink" title="7. @Watch 观察某个属性更新"></a>7. @Watch 观察某个属性更新</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">   @Prop() age!:number;</span><br><span class="line">   @Watch(<span class="string">"age"</span>)</span><br><span class="line">   ageChange(newVal:number,<span class="attr">oldVal</span>:number)&#123;</span><br><span class="line">       <span class="comment">/*age属性更新时，处理相关内容*/</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-Emit-this-emit-的装饰器-如果没有指定名称，默认使用函数名称。有返回值时，使用返回值，没有则使用"><a href="#8-Emit-this-emit-的装饰器-如果没有指定名称，默认使用函数名称。有返回值时，使用返回值，没有则使用" class="headerlink" title="8. @Emit this.$emit 的装饰器,如果没有指定名称，默认使用函数名称。有返回值时，使用返回值，没有则使用"></a>8. @Emit this.$emit 的装饰器,如果没有指定名称，默认使用函数名称。有返回值时，使用返回值，没有则使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">   private myname = <span class="string">""</span>;</span><br><span class="line">   </span><br><span class="line">   @Emit()</span><br><span class="line">   ageChangeA()&#123; <span class="comment">/* 仅发送 this.$emit('ageChangeA') */</span>   &#125;</span><br><span class="line">   </span><br><span class="line">   @Emit()</span><br><span class="line">   ageChangeB(age:number)&#123; <span class="comment">/* 发送 age  this.$emit('ageChangeB',age) */</span>   &#125;</span><br><span class="line">   </span><br><span class="line">   @Emit()</span><br><span class="line">   ageChangeC(age:number)&#123;  <span class="keyword">return</span> <span class="number">1</span> <span class="comment">/* this.$emit('ageChangeC',1) 发送return 结果*/</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-Mixins"><a href="#9-Mixins" class="headerlink" title="9. Mixins"></a>9. Mixins</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyMixin.ts</span></span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMixin</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">   <span class="comment">/* 如果使用private 修饰，则两个相同的 私有属性混入时，会产生冲突 */</span></span><br><span class="line">   protected myname = <span class="string">"张三"</span>;</span><br><span class="line">   created()&#123;  <span class="comment">/* 混入对象有自己的 生命周期函数*/</span> &#125;</span><br><span class="line">   getMyName()&#123; <span class="built_in">console</span>.log(<span class="string">"张三混入"</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OtherMixin.ts</span></span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherMixin</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">   <span class="comment">/* 如果使用private 修饰，则两个相同的 私有属性混入时，会产生冲突 */</span></span><br><span class="line">   protected myname = <span class="string">"李四"</span>;</span><br><span class="line">   created()&#123;  <span class="comment">/* 混入对象有自己的 生命周期函数*/</span> &#125;</span><br><span class="line">   getMyName()&#123; <span class="built_in">console</span>.log(<span class="string">"李四混入"</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Mixins</span>(<span class="title">MyMixin</span>,<span class="title">OtherMixin</span>) </span>&#123; </span><br><span class="line">   private myname = <span class="string">""</span>; <span class="comment">/* 混入对象已经定义，这里产生属性冲突 */</span></span><br><span class="line">   mounted()&#123;</span><br><span class="line">       <span class="keyword">this</span>.getMyName() <span class="comment">// 李四混入</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对于computed，使用-get-替代"><a href="#对于computed，使用-get-替代" class="headerlink" title="对于computed，使用 get 替代"></a>对于computed，使用 get 替代</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">   private myname = <span class="string">""</span>; <span class="comment">/* 混入对象已经定义，这里产生属性冲突 */</span></span><br><span class="line">   <span class="keyword">get</span> upperName()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"A"</span> + <span class="keyword">this</span>.myname</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>装饰器可以参照 <a href="https://link.juejin.im/?target=http%3A%2F%2Fnpm.taobao.org%2Fpackage%2Fvue-property-decorator">vue-property-decorator</a></strong></p><ul><li>没有filters,没有指令相关装饰器，有需要可以在@Component里面补充，或者可以直接定义函数调用计算返回值 在class里定义的属性即data属性，需要赋值初始值。</li></ul><h2 id="typescript-混用js"><a href="#typescript-混用js" class="headerlink" title="typescript 混用js"></a>typescript 混用js</h2><p>当我们引用了一个js编写的模块时会报错，这时候，如果不在引入的index文件里面添加.d.ts描述文件，那么这个模块就没法在语义上一致通过.</p><h3 id="通用兼容性解决方案"><a href="#通用兼容性解决方案" class="headerlink" title="通用兼容性解决方案"></a>通用兼容性解决方案</h3><p>如果这个模块是由npm下载的，并且有@types版本，可以直接使用<code>npm install @types/xx</code>下载</p><p>可惜,大部分都是没有编写声明文件的.但是又需要使用到这个模块时,应该怎么做.</p><p><strong>自定义描述文件</strong></p><p>在项目的【根目录】下定义【模块相同的名称】的描述文件A.d.ts,在描述文件内编写模块声明描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.d.ts</span></span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*'</span>;</span><br></pre></td></tr></table></figure><p>这样属于一劳永逸的描述,但是无法描述到具体模块内容,因此这种方式仅仅引入的组件没有任何操作时,比如引入的是第三方开发的vue组件,可以用这种方式偷懒.</p><p><strong>详细描述文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.d.ts</span></span><br><span class="line">declare <span class="built_in">module</span>  <span class="string">"A"</span> &#123;</span><br><span class="line">    <span class="comment">// 添加具体的描述内容</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以从这里查询到<a href="http://microsoft.github.io/TypeSearch/" target="_blank" rel="noopener">@type</a>包查询，已经被编写的文件声明可以直接下载</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5c662a7de51d4562e71c4277#comment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h1&gt;&lt;p&gt;使用 vue-cli 创建项目&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vue create demo&lt;/code&gt; ，demo就是创建项目的名称&lt;br&gt;提示选择预设，选择 &lt;code&gt;Manually select features&lt;/code&gt; 回车确认&lt;br&gt;选择&lt;code&gt;typescript&lt;/code&gt; &lt;code&gt;vuex&lt;/code&gt;  &lt;code&gt;router&lt;/code&gt; &lt;code&gt;babel&lt;/code&gt; &lt;code&gt;css pre-processors&lt;/code&gt;，不使用&lt;code&gt;linter&lt;/code&gt;，不选单元测试有需要另说&lt;br&gt;回车后按照需要选择合适的选项&lt;br&gt;选择完毕后回车等待资源准备&lt;/p&gt;
&lt;h2 id=&quot;编码开始&quot;&gt;&lt;a href=&quot;#编码开始&quot; class=&quot;headerlink&quot; title=&quot;编码开始&quot;&gt;&lt;/a&gt;编码开始&lt;/h2&gt;&lt;p&gt;熟悉几个vue的装饰器 &lt;code&gt;vue-property-decorator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下的装饰器的功能和原js编写的功能相同/相似，可以参照官方文档类比解读。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Vue, Component, Inject, Provide, Prop, Model, Watch, Emit, Mixins &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vue-property-decorator&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-Vue-实际上就是-Vue-本身-继承vue相关属性和函数&quot;&gt;&lt;a href=&quot;#1-Vue-实际上就是-Vue-本身-继承vue相关属性和函数&quot; class=&quot;headerlink&quot; title=&quot;1. Vue 实际上就是 Vue 本身,继承vue相关属性和函数&quot;&gt;&lt;/a&gt;1. Vue 实际上就是 Vue 本身,继承vue相关属性和函数&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vue&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-Component-声明成一个vue的组件实例，如果不使用，则不能得到一个vue组件&quot;&gt;&lt;a href=&quot;#2-Component-声明成一个vue的组件实例，如果不使用，则不能得到一个vue组件&quot; class=&quot;headerlink&quot; title=&quot;2. @Component 声明成一个vue的组件实例，如果不使用，则不能得到一个vue组件&quot;&gt;&lt;/a&gt;2. @Component 声明成一个vue的组件实例，如果不使用，则不能得到一个vue组件&lt;/h3&gt;&lt;p&gt;第一种方式，不需要定义额外内容:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vue&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二种方式，定义相关内容:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 这里和js版本编写的 vue 组件内容相同，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 凡是不能在ts里面完成的都可以在这里完成 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 最终会被合并到一个实例中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 在这里定义的内容，不会被语法器获取到，因此必须要同步在class中声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&quot;attr&quot;&gt;myname&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vue&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private myname:string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mounted()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.myname;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;span class=&quot;comment&quot;&gt;// 语法器报错，当前类找不到age属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-Provide-向任意层级的子组件提供可访问的属性，默认为当前属性的名称，可以指定名称&quot;&gt;&lt;a href=&quot;#3-Provide-向任意层级的子组件提供可访问的属性，默认为当前属性的名称，可以指定名称&quot; class=&quot;headerlink&quot; title=&quot;3.@Provide 向任意层级的子组件提供可访问的属性，默认为当前属性的名称，可以指定名称&quot;&gt;&lt;/a&gt;3.@Provide 向任意层级的子组件提供可访问的属性，默认为当前属性的名称，可以指定名称&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ParentComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vue&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Provide() private info!:string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Provide(&lt;span class=&quot;string&quot;&gt;&quot;next&quot;&lt;/span&gt;) private infoNext!:string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-Inject-获取父级由Provide提供的属性，默认为当前属性的名称，可以指定名称，多个父级提供相同名称属性时，获取最近父级的名称属性&quot;&gt;&lt;a href=&quot;#4-Inject-获取父级由Provide提供的属性，默认为当前属性的名称，可以指定名称，多个父级提供相同名称属性时，获取最近父级的名称属性&quot; class=&quot;headerlink&quot; title=&quot;4. @Inject 获取父级由Provide提供的属性，默认为当前属性的名称，可以指定名称，多个父级提供相同名称属性时，获取最近父级的名称属性&quot;&gt;&lt;/a&gt;4. @Inject 获取父级由Provide提供的属性，默认为当前属性的名称，可以指定名称，多个父级提供相同名称属性时，获取最近父级的名称属性&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vue&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Inject() private info!:string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Inject(&lt;span class=&quot;string&quot;&gt;&quot;next&quot;&lt;/span&gt;) private infoNext!:string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;5-Prop-由标签属性注入，获取对应标签属性上值-可配置具体prop内容，参照js版本props内容&quot;&gt;&lt;a href=&quot;#5-Prop-由标签属性注入，获取对应标签属性上值-可配置具体prop内容，参照js版本props内容&quot; class=&quot;headerlink&quot; title=&quot;5. @Prop 由标签属性注入，获取对应标签属性上值,可配置具体prop内容，参照js版本props内容&quot;&gt;&lt;/a&gt;5. @Prop 由标签属性注入，获取对应标签属性上值,可配置具体prop内容，参照js版本props内容&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vue&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   @Prop() age!:number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   @Prop(&amp;#123;&lt;span class=&quot;attr&quot;&gt;default&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;) sex!:number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:age&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;16&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ts&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MyComponent &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./MyComponent.vue&#39;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    components:&amp;#123; MyComponent &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vue&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Js" scheme="https://zhanghao-web.github.io/categories/Js/"/>
    
    
      <category term="Ts" scheme="https://zhanghao-web.github.io/tags/Ts/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 的好处都有啥？和 JavaScript 的区别在哪？</title>
    <link href="https://zhanghao-web.github.io/2019/07/04/Ts/TypeScript-%E7%9A%84%E5%A5%BD%E5%A4%84%E9%83%BD%E6%9C%89%E5%95%A5%EF%BC%9F%E5%92%8C-JavaScript-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%9C%A8%E5%93%AA%EF%BC%9F/"/>
    <id>https://zhanghao-web.github.io/2019/07/04/Ts/TypeScript-的好处都有啥？和-JavaScript-的区别在哪？/</id>
    <published>2019-07-04T08:13:53.000Z</published>
    <updated>2020-01-28T10:04:15.066Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/38526585" target="_blank" rel="noopener">原文地址</a></p><p><strong>在我看来 TypeScript 相对于 JavaScript ，除了静态类型外没带来任何东西。</strong></p><p>既然如此</p><h2 id="静态类型有什么好处"><a href="#静态类型有什么好处" class="headerlink" title="静态类型有什么好处"></a>静态类型有什么好处</h2><p>静态类型的好处到处都有说，这里就不说得太详细了，随便列一点。</p><ul><li>杜绝手误导致的变量名错误</li><li>自动完成</li><li>重构支持</li><li>类型可以一定程度上充当文档</li></ul><p>静态类型解放脑容量，自动完成让我不需要记忆哪个变量里有哪些属性，也不需要记完整的变量名。</p><p>函数上的类型约束外加尽量主动写纯函数让我在写函数实现的时候不需要关注函数之外的任何东西，注意力聚焦在当前函数。</p><p>当然，也不只有好处。</p><h2 id="静态类型有什么不足"><a href="#静态类型有什么不足" class="headerlink" title="静态类型有什么不足"></a>静态类型有什么不足</h2><ul><li>类型标注麻烦。</li><li>现阶段大部分静态类型语言的类型系统还不够强。</li><li>eval 和 new Function() 这种骚操作类型系统管不到。</li><li>需要编译，类型检查会增加编译时长，语法和类型系统复杂的话时间特别特别长，比如 scala。</li></ul><p>标注麻烦的问题无法根绝，但是类型推导能解决大部分的类型标注问题。</p><p>类型系统不够强的问题会随着时间慢慢变好。</p><p>编译的问题在 ts 可能也并不算问题，ts 的类型检查并不影响 ts 编译成 js。</p><p>也就是说就算类型检查不通过 ts 也能跑起来。所以对 ts 来说类型检查可以从编译中提取出来，作为独立的编译和类型检查两部分。</p><p>先编译输出，再做类型检查，编译的部分相当于 babel 这种工具做的事。</p><p>类型检查也可以单独运行。</p><p>那么，</p><h2 id="TypeScript-的类型系统有哪些特点？"><a href="#TypeScript-的类型系统有哪些特点？" class="headerlink" title="TypeScript 的类型系统有哪些特点？"></a>TypeScript 的类型系统有哪些特点？</h2><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/Microsoft/TypeScript/issues/14833">图灵完备</a>。（虽然不太清楚这意味着什么）</li><li>渐进的类型系统，所有类型标注都是可选的，既是天使又是恶魔的 <a href="https://link.zhihu.com/?target=https%3A//github.com/Microsoft/TypeScript/blob/master/doc/spec.md%233.1">any</a> 类型。（被 Haskell 大牛 <a href="https://www.zhihu.com/people/axurez" target="_blank" rel="noopener">Colliot</a> 称为 ts 类型系统的漏洞）</li><li>支持局部类型推导。</li><li>丰富的类型层面的计算，如 <a href="https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/advanced-types.html">index types, mapped types, conditional types</a> 等等。</li><li>支持<a href="">鸭子类型</a>。（或叫结构子类型？）</li><li>像 js 支持对象字面量一样支持方便的对象字面类型（object literal type），字符串和数字还有布尔值字面类型。</li><li>空安全。</li><li>基于控制流的类型分析</li></ul><p>还有许多我觉得比较平常的点就没有列出来，比如支持类型别名，泛型，协变逆变双变等等。</p><p>ts 是一门非常非常非常工程的语言，很强大，但是可能和优雅沾不上半点关系。</p><p>可选的类型标注搭配类型推导，让 ts 的类型系统更像是工具，而不是枷锁。好的产品是用完即走的。</p><p>有时候，稍微开个洞，能让事情变简单很多。比如 any。</p><p><code>鸭子类型</code>加上上面提到的特性可以让你依旧感觉和 js 一样，像大海里的鱼一样自由。</p><p><a href="https://link.zhihu.com/?target=https%3A//www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">Null References: The Billion Dollar Mistake</a> ，而 js 里有两个 null（null 和 undefined），虽然前端通常不会造成非常严重的损失，但是 js 也慢慢被应用到不仅仅是前端的许多地方了。</p><p>ts 这么好，</p><h2 id="怎么学-TypeScript？"><a href="#怎么学-TypeScript？" class="headerlink" title="怎么学 TypeScript？"></a>怎么学 TypeScript？</h2><p>成也渐进，败也渐进，有部分人通过可选的类型标注，一步一步无痛地过渡到学会 ts。</p><p>而另一部分人玩了一会儿，发现和写 js 并没有一丁点区别，而且还离开了熟悉的环境，就放弃了。</p><p>ts 并不会强迫你使用类型，所以就需要更强的动力来推动自己学习。</p><p>如果身边有会 ts 的朋友的话，对学习 ts 会比较有帮助。</p><p>多让会 ts 的朋友看自己的代码，改良自己的写法。多写，很容易就能学会。</p><p>如果身边没有会 ts 的人，其实我更建议先用 <a href="https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript" target="_blank" rel="noopener">JSDoc</a>。</p><p>使用 vscode 或者 webstorm 的时候直接写 JSDoc 就行了，vsc 或 webstorm 会依靠 ts 来提供类型推导和自动完成。</p><p>这样可以在工作或自己写东西的时候慢慢习惯并且主动去使用类型标注。</p><p>在使用一段时间后感觉 JSDoc 已经不够用了，满足不了自己的需求了，再开始使用 ts。</p><p>同时也要多主动去了解和学习一些 ts 的代码，不然的话，不知道 ts 有多好，自然就不会觉得 JSDoc 不够用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38526585&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在我看来 TypeScript 相对于 JavaScript ，除了
      
    
    </summary>
    
      <category term="Js" scheme="https://zhanghao-web.github.io/categories/Js/"/>
    
    
      <category term="Ts" scheme="https://zhanghao-web.github.io/tags/Ts/"/>
    
  </entry>
  
  <entry>
    <title>vue中不常用的API的使用方法总结</title>
    <link href="https://zhanghao-web.github.io/2019/06/13/Vue/vue%E4%B8%AD%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84API%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://zhanghao-web.github.io/2019/06/13/Vue/vue中不常用的API的使用方法总结/</id>
    <published>2019-06-13T05:46:23.000Z</published>
    <updated>2020-01-28T10:04:15.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="errorHandler"><a href="#errorHandler" class="headerlink" title="errorHandler"></a>errorHandler</h2><p>官网介绍及使用：</p><p>指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="function"><span class="keyword">function</span> (<span class="params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//处理错误信息, 进行错误上报</span></span><br><span class="line">  <span class="comment">//err错误对象</span></span><br><span class="line">  <span class="comment">//vm Vue实例</span></span><br><span class="line">  <span class="comment">//`info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span></span><br><span class="line">  <span class="comment">//只在 2.2.0+ 可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-observable-object"><a href="#Vue-observable-object" class="headerlink" title="Vue.observable( object )"></a>Vue.observable( object )</h2><p>这个相当于一个简单的store管理，在不用vuex的情况下，不同组件之间通信可以用<code>Vue.observeable</code></p><p>官网介绍：</p><p>让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。</p><p>返回的对象可以直接用于渲染函数和计算属性内，并且会在发生改变时触发相应的更新。也可以作为最小化的跨组件状态存储器，用于简单的场景：</p><p>使用：</p><p>在store.js中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">impor vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = vue.observable(&#123;<span class="attr">count</span>:<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutation = &#123;</span><br><span class="line">    setCount(count)&#123;</span><br><span class="line">        store.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;p @click=<span class="string">"setCount(testCount + 1)"</span>&gt;+&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p @click="setCount(testCount - 1)"&gt;-&lt;/</span>p&gt;</span><br><span class="line">    &lt;test /&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;testCount&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import test from './</span>test<span class="string">'</span></span><br><span class="line"><span class="string">import &#123; store,  mutation&#125; from '</span>@/store<span class="string">'</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  name: '</span>HelloWorld<span class="string">',</span></span><br><span class="line"><span class="string">  data () &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      msg: '</span>Welcome to Your Vue.js App<span class="string">'</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  components: &#123;</span></span><br><span class="line"><span class="string">    test</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    setCount: mutation.setCount</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  computed: &#123;</span></span><br><span class="line"><span class="string">    testCount()&#123;</span></span><br><span class="line"><span class="string">      return store.count</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string">h1, h2 &#123;</span></span><br><span class="line"><span class="string">  font-weight: normal;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">ul &#123;</span></span><br><span class="line"><span class="string">  list-style-type: none;</span></span><br><span class="line"><span class="string">  padding: 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">li &#123;</span></span><br><span class="line"><span class="string">  display: inline-block;</span></span><br><span class="line"><span class="string">  margin: 0 10px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a &#123;</span></span><br><span class="line"><span class="string">  color: #42b983;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>test 组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;test&#123;&#123;testCount&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">'@/store'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    testCount()&#123;</span><br><span class="line">      <span class="keyword">return</span> store.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h1 id="errorCaptured-2-5-0新增的生命周期钩子"><a href="#errorCaptured-2-5-0新增的生命周期钩子" class="headerlink" title="errorCaptured(2.5.0新增的生命周期钩子)"></a>errorCaptured(2.5.0新增的生命周期钩子)</h1><p>官网介绍：</p><p>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p><p>与errorhandler的不同之处：</p><p>errorCaptured 和 errorHandler 的触发时机都是相同的，不同的是 errorCaptured 发生在前，且如果某个组件的 errorCaptured 方法返回了 false，那么这个异常信息不会再向上冒泡也不会再调用 errorHandler 方法</p><h1 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h1><p>官网介绍：</p><p>指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 this.$parent 访问父实例，子实例被推入父实例的 $children 数组中。</p><p>注意:节制地使用 $parent 和 $children - 它们的主要目的是作为访问组件的应急方法。更推荐用 props 和 events 实现父子组件通信</p><p>使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$parent.xxx() <span class="comment">//直接在子组件调用父组件中方法</span></span><br></pre></td></tr></table></figure><h1 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h1><p>官网介绍：</p><p>mixins 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 Vue.extend() 里最终选择使用相同的选项合并逻辑合并。举例：如果你的混入包含一个钩子而创建组件本身也有一个，两个函数将被调用。</p><p>mixins就是定义一部分公共的方法或者计算属性,然后混入到各个组件中使用,方便管理与统一修改</p><p>1、在assets文件夹下创建一个js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个需要混入的对象 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixinTest1 = &#123;</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="keyword">this</span>.hello();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        hello() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'mixinTest1'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、在组件中使用刚刚创建的混入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mixinTest1&#125; <span class="keyword">from</span> <span class="string">'./../assets/js/mixin'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mixins:[mixinTest1],</span><br><span class="line">    name: <span class="string">'hello'</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            msg: <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、如果组件中定义的方法与混入对象中的方法/属性一样,组件中的优先级大于混入对象中的(方法会调用多次)</p><p>4、混入对象中可以定义抽象方法,使用混入的组件必须重写该方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">methods: &#123;</span><br><span class="line">    handlePlaylist() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'component must implement handlePlaylist method'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide / inject"></a>provide / inject</h1><p>官网介绍：</p><p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。</p><p>provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 ES2015 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。</p><p>inject 选项应该是：</p><p>一个字符串数组，或<br>一个对象，对象的 key 是本地的绑定名，value 是：<br>在可用的注入内容中搜索用的 key (字符串或 Symbol)，或<br>一个对象，该对象的：<br>from 属性是在可用的注入内容中搜索用的 key (字符串或 Symbol)<br>default 属性是降级情况下使用的 value</p><ul><li>注意：provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。</li></ul><p>我之前使用到<code>provide / inject</code>是<strong>模拟页面数据回到初始状态</strong>，相当于刷新当前页面，但是直接刷新当前页面会有几秒的空白期，体验不好，所以用到了<code>provide / inject</code></p><p>使用方法：</p><p>1.修改App.vue代码如下图所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;router-view v-<span class="keyword">if</span>=<span class="string">"isRouterActive"</span>/&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        name: <span class="string">'App'</span>,</span><br><span class="line">        provide:&#123;</span><br><span class="line">            retrun&#123;</span><br><span class="line">                reload:<span class="keyword">this</span>.reload</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                isRouterActive: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            reload()&#123;</span><br><span class="line">                <span class="keyword">this</span>.isRouterActive = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                     <span class="keyword">this</span>.isRouterActive = <span class="literal">true</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>通过声明reload方法，控制isRouterAlice属性true or false 来控制router-view的显示或隐藏，从而控制页面的再次加载</p><p>2.在需要当前页面刷新的页面中注入App.vue组件提供（provide）的 reload 依赖，然后直接用this.reload来调用就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> defalut&#123;</span><br><span class="line">    inject:[<span class="string">'reload'</span>],</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        reloadPage()&#123;</span><br><span class="line">            <span class="keyword">this</span>.reload();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h1><p>官网介绍：</p><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p><p>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;errorHandler&quot;&gt;&lt;a href=&quot;#errorHandler&quot; class=&quot;headerlink&quot; title=&quot;errorHandler&quot;&gt;&lt;/a&gt;errorHandler&lt;/h2&gt;&lt;p&gt;官网介绍及使用：&lt;/p&gt;
&lt;p&gt;指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Vue.config.errorHandler = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, vm, info&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//处理错误信息, 进行错误上报&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//err错误对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//vm Vue实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//`info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//只在 2.2.0+ 可用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Vue-observable-object&quot;&gt;&lt;a href=&quot;#Vue-observable-object&quot; class=&quot;headerlink&quot; title=&quot;Vue.observable( object )&quot;&gt;&lt;/a&gt;Vue.observable( object )&lt;/h2&gt;&lt;p&gt;这个相当于一个简单的store管理，在不用vuex的情况下，不同组件之间通信可以用&lt;code&gt;Vue.observeable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;官网介绍：&lt;/p&gt;
&lt;p&gt;让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。&lt;/p&gt;
&lt;p&gt;返回的对象可以直接用于渲染函数和计算属性内，并且会在发生改变时触发相应的更新。也可以作为最小化的跨组件状态存储器，用于简单的场景：&lt;/p&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;p&gt;在store.js中&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;impor vue &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vue&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = vue.observable(&amp;#123;&lt;span class=&quot;attr&quot;&gt;count&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mutation = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setCount(count)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        store.count = count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在组件中使用&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p @click=&lt;span class=&quot;string&quot;&gt;&quot;setCount(testCount + 1)&quot;&lt;/span&gt;&amp;gt;+&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    &amp;lt;p @click=&quot;setCount(testCount - 1)&quot;&amp;gt;-&amp;lt;/&lt;/span&gt;p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;test /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt;&amp;#123;&amp;#123;testCount&amp;#125;&amp;#125;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &amp;lt;/&lt;/span&gt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/template&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;import test from &#39;./&lt;/span&gt;test&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;import &amp;#123; store,  mutation&amp;#125; from &#39;&lt;/span&gt;@/store&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;export default &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  name: &#39;&lt;/span&gt;HelloWorld&lt;span class=&quot;string&quot;&gt;&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  data () &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    return &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;      msg: &#39;&lt;/span&gt;Welcome to Your Vue.js App&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  components: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  methods: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    setCount: mutation.setCount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  computed: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    testCount()&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;      return store.count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;style scoped&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;h1, h2 &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  font-weight: normal;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;ul &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  list-style-type: none;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  padding: 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;li &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  display: inline-block;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  margin: 0 10px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;a &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  color: #42b983;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zhanghao-web.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://zhanghao-web.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 高级技巧</title>
    <link href="https://zhanghao-web.github.io/2019/06/12/Ts/TypeScript-%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/"/>
    <id>https://zhanghao-web.github.io/2019/06/12/Ts/TypeScript-高级技巧/</id>
    <published>2019-06-12T08:10:54.000Z</published>
    <updated>2020-01-28T10:04:15.066Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5cffb431f265da1b7401f466?utm_source=gold_browser_extension" target="_blank" rel="noopener">原文地址</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用了一段时间的 typescript 之后，深感中大型项目中 typescript 的必要性，它能够提前在编译期避免许多 bug，如很恶心的拼写问题。而越来越多的 package 也开始使用 ts，学习 ts 已是势在必行。</p><h2 id="01-keyof"><a href="#01-keyof" class="headerlink" title="01 keyof"></a>01 keyof</h2><p><code>keyof</code> 与 <code>Object.keys</code> 略有相似，只不过 <code>keyof</code> 取 <code>interface</code> 的键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface Point &#123;</span><br><span class="line">    x: number;</span><br><span class="line">    y: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type keys = "x" | "y"</span></span><br><span class="line">type keys = keyof Point;</span><br></pre></td></tr></table></figure><p>假设有一个 <code>object</code> 如下所示，我们需要使用 typescript 实现一个 get 函数来获取它的属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  a: <span class="number">3</span>,</span><br><span class="line">  hello: <span class="string">'world'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">o: object, name: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> o[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们刚开始可能会这么写，不过它有很多缺点<br>1.无法确认返回类型：这将损失 ts 最大的类型校验功能<br>2.无法对 key 做约束：可能会犯拼写错误的问题</p><p>这时可以使用 <code>keyof</code> 来加强 <code>get</code> 函数的类型功能，有兴趣的同学可以看看 <code>_.get</code> 的 <code>type</code> 标记以及实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function get&lt;T extends object, K extends keyof T&gt;(o: T, name: K): T[K] &#123;</span><br><span class="line">  <span class="keyword">return</span> o[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="02-Partial-amp-Pick"><a href="#02-Partial-amp-Pick" class="headerlink" title="02 Partial &amp; Pick"></a>02 Partial &amp; Pick</h2><p>既然了解了 <code>keyof</code>，可以使用它对属性做一些扩展， 如实现 <code>Partial</code> 和 <code>Pick</code>，<code>Pick</code> 一般用在 <code>_.pick</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type Pick&lt;T, K extends keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">interface User &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  age: number;</span><br><span class="line">  name: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于: type PartialUser = &#123; id?: number; age?: number; name?: string; &#125;</span></span><br><span class="line">type PartialUser = Partial&lt;User&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于: type PickUser = &#123; id: number; age: number; &#125;</span></span><br><span class="line">type PickUser = Pick&lt;User, <span class="string">"id"</span> | <span class="string">"age"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="03-Condition-Type"><a href="#03-Condition-Type" class="headerlink" title="03 Condition Type"></a>03 Condition Type</h2><p>类似于 js 中的 <code>?:</code> 运算符，可以使用它扩展一些基本类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T extends U ? X : Y</span><br><span class="line"></span><br><span class="line">type isTrue&lt;T&gt; = T extends <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"><span class="comment">// 相当于 type t = false</span></span><br><span class="line">type t = isTrue&lt;number&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于 type t = false</span></span><br><span class="line">type t1 = isTrue&lt;<span class="literal">false</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="04-never-amp-Exclude-amp-Omit"><a href="#04-never-amp-Exclude-amp-Omit" class="headerlink" title="04 never &amp; Exclude &amp; Omit"></a>04 never &amp; Exclude &amp; Omit</h2><p>官方文档对 <code>never</code> 的描述如下</p><blockquote><p>the never type represents the type of values that never occur.</p></blockquote><p>结合 <code>never</code> 与 <code>conditional type</code> 可以推出很多有意思而且实用的类型，比如 <code>Omit</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Exclude&lt;T, U&gt; = T extends U ? never : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于: type A = 'a'</span></span><br><span class="line">type A = Exclude&lt;<span class="string">'x'</span> | <span class="string">'a'</span>, <span class="string">'x'</span> | <span class="string">'y'</span> | <span class="string">'z'</span>&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>结合 <code>Exclude</code> 可以推出 <code>Omit</code> 的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line">interface User &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  age: number;</span><br><span class="line">  name: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于: type PickUser = &#123; age: number; name: string; &#125;</span></span><br><span class="line">type OmitUser = Omit&lt;User, <span class="string">"id"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="05-typeof"><a href="#05-typeof" class="headerlink" title="05 typeof"></a>05 typeof</h2><p>顾名思义，<code>typeof</code> 代表取某个值的 <code>type</code>，可以从以下示例来展示他们的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a: number = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于: const b: number = 4</span></span><br><span class="line"><span class="keyword">const</span> b: <span class="keyword">typeof</span> a = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>在一个典型的服务端项目中，我们经常需要把一些工具塞到 <code>context</code> 中，如<code>config</code>，<code>logger</code>，<code>db models</code>, <code>utils</code> 等，此时就使用到 <code>typeof</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'./logger'</span></span><br><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"></span><br><span class="line">interface Context extends KoaContect &#123;</span><br><span class="line">  logger: <span class="keyword">typeof</span> logger,</span><br><span class="line">  utils: <span class="keyword">typeof</span> utils</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx: Context</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.logger.info(<span class="string">'hello, world'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 会报错，因为 logger.ts 中没有暴露此方法，可以最大限度的避免拼写错误</span></span><br><span class="line">  ctx.loger.info(<span class="string">'hello, world'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="06-is"><a href="#06-is" class="headerlink" title="06 is"></a>06 is</h2><p>在此之前，先看一个 koa 的错误处理流程，以下是对 error 进行集中处理，并且标识 code 的过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">let</span> code = <span class="string">'BAD_REQUEST'</span></span><br><span class="line">    <span class="keyword">if</span> (err.isAxiosError) &#123;</span><br><span class="line">      code = <span class="string">`Axios-<span class="subst">$&#123;err.code&#125;</span>`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err <span class="keyword">instanceof</span> Sequelize.BaseError) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      code</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 <code>err.code</code> 处，会编译出错，提示 Property ‘code’ does not exist on type ‘Error’.ts(2339)。</p><p>此时可以使用 <code>as AxiosError</code> 或者 <code>as any</code> 来避免报错，不过强制类型转换也不够友好</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((err <span class="keyword">as</span> AxiosError).isAxiosError) &#123;</span><br><span class="line">  code = <span class="string">`Axios-<span class="subst">$&#123;(err <span class="keyword">as</span> AxiosError).code&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以使用 is 来判定值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAxiosError</span> (<span class="params">error: any</span>): <span class="title">error</span> <span class="title">is</span> <span class="title">AxiosError</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> error.isAxiosError</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isAxiosError(err)) &#123;</span><br><span class="line">  code = <span class="string">`Axios-<span class="subst">$&#123;err.code&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>GraphQL</code> 的源码中，有很多诸如此类的用法，用以标识类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type: any</span>): <span class="title">type</span> <span class="title">is</span> <span class="title">GraphQLType</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">export</span> <span class="title">function</span> <span class="title">isScalarType</span>(<span class="params">type: any</span>): <span class="title">type</span> <span class="title">is</span> <span class="title">GraphQLScalarType</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">export</span> <span class="title">function</span> <span class="title">isObjectType</span>(<span class="params">type: any</span>): <span class="title">type</span> <span class="title">is</span> <span class="title">GraphQLObjectType</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">export</span> <span class="title">function</span> <span class="title">isInterfaceType</span>(<span class="params">type: any</span>): <span class="title">type</span> <span class="title">is</span> <span class="title">GraphQLInterfaceType</span>;</span></span><br></pre></td></tr></table></figure><h2 id="07-interface-amp-type"><a href="#07-interface-amp-type" class="headerlink" title="07 interface &amp; type"></a>07 interface &amp; type</h2><p>interface 与 type 的区别是什么？可以参考以下 stackoverflow 的问题</p><p><a href="https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types" target="_blank" rel="noopener">https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types</a></p><p>一般来说，<code>1</code>interface<code>与</code>type` 区别很小，比如以下两种写法差不多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">  a: number;</span><br><span class="line">  b: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type B &#123;</span><br><span class="line">  a: number;</span><br><span class="line">  b: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 interface 可以如下合并多个，而 type 只能使用 &amp; 类进行连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">    a: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface A &#123;</span><br><span class="line">    b: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a: A = &#123;</span><br><span class="line">    a: <span class="number">3</span>,</span><br><span class="line">    b: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="08-Dictionary-amp-Many"><a href="#08-Dictionary-amp-Many" class="headerlink" title="08 Dictionary &amp; Many"></a>08 Dictionary &amp; Many</h2><p>这几个语法糖是从 <code>lodash</code> 的 <code>types</code> 源码中学到的，平时工作中的使用频率还挺高。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Dictionary&lt;T&gt; &#123;</span><br><span class="line">  [index: string]: T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">interface NumericDictionary&lt;T&gt; &#123;</span><br><span class="line">  [index: number]: T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data:Dictionary&lt;number&gt; = &#123;</span><br><span class="line">  a: <span class="number">3</span>,</span><br><span class="line">  b: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="09-使用-const-enum-维护常量表"><a href="#09-使用-const-enum-维护常量表" class="headerlink" title="09 使用 const enum 维护常量表"></a>09 使用 const enum 维护常量表</h2><p>相比使用字面量对象维护常量，const enum 可以提供更安全的类型检查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 object 维护常量</span></span><br><span class="line"><span class="keyword">const</span> enum TODO_STATUS &#123;</span><br><span class="line">    TODO = <span class="string">'TODO'</span>,</span><br><span class="line">    DONE = <span class="string">'DONE'</span>,</span><br><span class="line">    DOING = <span class="string">'DOING'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 const enum 伟华常量</span></span><br><span class="line"><span class="keyword">const</span> enum TODO_STATUS &#123;</span><br><span class="line">    TODO = <span class="string">'TODO'</span>,</span><br><span class="line">    DONE = <span class="string">'DONE'</span>,</span><br><span class="line">    DOING = <span class="string">'DOING'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function todos (status: TODO_STATUS): Todo[];</span><br><span class="line"></span><br><span class="line">todos(TODO_STATUS.TODO)</span><br></pre></td></tr></table></figure><h2 id="10-VS-Code-Tips-amp-Typescript-Command"><a href="#10-VS-Code-Tips-amp-Typescript-Command" class="headerlink" title="10 VS Code Tips &amp; Typescript Command"></a>10 VS Code Tips &amp; Typescript Command</h2><p>使用 VS Code 有时会出现，使用 tsc 编译时产生的问题与 vs code 提示的问题不一致</p><p>找到项目右下角的 Typescript 字样，右侧显示它的版本号，可以点击选择 Use Workspace Version，它表示与项目依赖的 typescript 版本一直。</p><p>或者编辑 <code>.vs-code/settings.json</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"typescript.tsdk"</span>: <span class="string">"node_modules/typescript/lib"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-Typescript-Roadmap"><a href="#11-Typescript-Roadmap" class="headerlink" title="11 Typescript Roadmap"></a>11 Typescript Roadmap</h2><p>最后一条也是最重要的一条，翻阅 Roadmap，了解 ts 的一些新的特性与 bug 修复情况。</p><p><a href="https://github.com/Microsoft/TypeScript/wiki/Roadmap" target="_blank" rel="noopener">Typescript Roadmap</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5cffb431f265da1b7401f466?utm_source=gold_browser_extension&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;用了一段时间的 typescript 之后，深感中大型项目中 typescript 的必要性，它能够提前在编译期避免许多 bug，如很恶心的拼写问题。而越来越多的 package 也开始使用 ts，学习 ts 已是势在必行。&lt;/p&gt;
&lt;h2 id=&quot;01-keyof&quot;&gt;&lt;a href=&quot;#01-keyof&quot; class=&quot;headerlink&quot; title=&quot;01 keyof&quot;&gt;&lt;/a&gt;01 keyof&lt;/h2&gt;&lt;p&gt;&lt;code&gt;keyof&lt;/code&gt; 与 &lt;code&gt;Object.keys&lt;/code&gt; 略有相似，只不过 &lt;code&gt;keyof&lt;/code&gt; 取 &lt;code&gt;interface&lt;/code&gt; 的键。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface Point &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x: number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y: number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// type keys = &quot;x&quot; | &quot;y&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type keys = keyof Point;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设有一个 &lt;code&gt;object&lt;/code&gt; 如下所示，我们需要使用 typescript 实现一个 get 函数来获取它的属性值&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hello: &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o: object, name: string&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们刚开始可能会这么写，不过它有很多缺点&lt;br&gt;1.无法确认返回类型：这将损失 ts 最大的类型校验功能&lt;br&gt;2.无法对 key 做约束：可能会犯拼写错误的问题&lt;/p&gt;
&lt;p&gt;这时可以使用 &lt;code&gt;keyof&lt;/code&gt; 来加强 &lt;code&gt;get&lt;/code&gt; 函数的类型功能，有兴趣的同学可以看看 &lt;code&gt;_.get&lt;/code&gt; 的 &lt;code&gt;type&lt;/code&gt; 标记以及实现&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function get&amp;lt;T extends object, K extends keyof T&amp;gt;(o: T, name: K): T[K] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;02-Partial-amp-Pick&quot;&gt;&lt;a href=&quot;#02-Partial-amp-Pick&quot; class=&quot;headerlink&quot; title=&quot;02 Partial &amp;amp; Pick&quot;&gt;&lt;/a&gt;02 Partial &amp;amp; Pick&lt;/h2&gt;&lt;p&gt;既然了解了 &lt;code&gt;keyof&lt;/code&gt;，可以使用它对属性做一些扩展， 如实现 &lt;code&gt;Partial&lt;/code&gt; 和 &lt;code&gt;Pick&lt;/code&gt;，&lt;code&gt;Pick&lt;/code&gt; 一般用在 &lt;code&gt;_.pick&lt;/code&gt; 中&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type Partial&amp;lt;T&amp;gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [P &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; keyof T]?: T[P];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type Pick&amp;lt;T, K extends keyof T&amp;gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [P &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; K]: T[P];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interface User &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  id: number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 相当于: type PartialUser = &amp;#123; id?: number; age?: number; name?: string; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type PartialUser = Partial&amp;lt;User&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 相当于: type PickUser = &amp;#123; id: number; age: number; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type PickUser = Pick&amp;lt;User, &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;03-Condition-Type&quot;&gt;&lt;a href=&quot;#03-Condition-Type&quot; class=&quot;headerlink&quot; title=&quot;03 Condition Type&quot;&gt;&lt;/a&gt;03 Condition Type&lt;/h2&gt;&lt;p&gt;类似于 js 中的 &lt;code&gt;?:&lt;/code&gt; 运算符，可以使用它扩展一些基本类型&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;T extends U ? X : Y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type isTrue&amp;lt;T&amp;gt; = T extends &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; ? &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 相当于 type t = false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type t = isTrue&amp;lt;number&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 相当于 type t = false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type t1 = isTrue&amp;lt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;04-never-amp-Exclude-amp-Omit&quot;&gt;&lt;a href=&quot;#04-never-amp-Exclude-amp-Omit&quot; class=&quot;headerlink&quot; title=&quot;04 never &amp;amp; Exclude &amp;amp; Omit&quot;&gt;&lt;/a&gt;04 never &amp;amp; Exclude &amp;amp; Omit&lt;/h2&gt;&lt;p&gt;官方文档对 &lt;code&gt;never&lt;/code&gt; 的描述如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the never type represents the type of values that never occur.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结合 &lt;code&gt;never&lt;/code&gt; 与 &lt;code&gt;conditional type&lt;/code&gt; 可以推出很多有意思而且实用的类型，比如 &lt;code&gt;Omit&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type Exclude&amp;lt;T, U&amp;gt; = T extends U ? never : T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 相当于: type A = &#39;a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type A = Exclude&amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Js" scheme="https://zhanghao-web.github.io/categories/Js/"/>
    
    
      <category term="Ts" scheme="https://zhanghao-web.github.io/tags/Ts/"/>
    
  </entry>
  
  <entry>
    <title>Node学习(十四) --Node项目-商品列表</title>
    <link href="https://zhanghao-web.github.io/2019/05/25/Node/Node%E5%AD%A6%E4%B9%A0(%E5%8D%81%E5%9B%9B)%20--Node%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8/"/>
    <id>https://zhanghao-web.github.io/2019/05/25/Node/Node学习(十四) --Node项目-商品列表/</id>
    <published>2019-05-25T09:23:20.000Z</published>
    <updated>2020-01-28T10:04:15.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js项目介绍"><a href="#Node-js项目介绍" class="headerlink" title="Node.js项目介绍"></a>Node.js项目介绍</h1><p>利用学到的知识，实现一个简单但实用的小项目如下：</p><p>这是一个商品列表，具有展示商品信息，添加商品，删除商品的功能。</p><h2 id="项目的文件夹结构"><a href="#项目的文件夹结构" class="headerlink" title="项目的文件夹结构"></a>项目的文件夹结构</h2><p>├── package.json<br>├── server.js # 服务器代码<br>├── config # 项目配置文件夹<br>│     ├── config.dev.js # 开发环境配置<br>│     ├── config.prod.js # 生产环境配置<br>│     ├── index.js # 导出当前所处环境及配置<br>├── libs # 项目工具文件夹<br>│     ├── database.js # 连接数据库<br>│     ├── http.js # 服务器配置<br>│     ├── router.js # 处理路由<br>├── router # 项目路由配置文件夹<br>│     ├── index.js # 连接数据库<br>│     ├── list.js # 获取商品列表接口配置<br>│     ├── add.js # 增加商品接口配置<br>│     ├── del.js # 删除商品接口配置<br>├── static # 静态资源文件夹<br>│     ├── index.html # 前端HTML页面<br>│     ├── js # 前端JavaScript文件夹<br>│     ├── css # 前端CSS文件夹<br>│     ├── fonts # 前端字体文件夹<br>│     ├── upload # 前端上传文件夹</p><h2 id="判断当前所处环境"><a href="#判断当前所处环境" class="headerlink" title="判断当前所处环境"></a>判断当前所处环境</h2><p>通常项目在开发环境和生产环境要采用不同的，服务器、账号、域名、端口等配置，如果用人工进行切换操作麻烦且容易出错，因此通常使用环境变量进行判断。</p><p>首先引入process模块<code>const process=require(&#39;process&#39;)</code>，该模块提供了当前Node.js进程的信息。</p><p>1.可以通过process.env环境变量获取开发环境和生产环境系统等参数差异，如开发环境运行在Windows系统上，而生产环境运行在Linux系统，那么就可以使用<code>process.env.OS === &#39;Windows_NT&#39;</code>判断当前所处的是否开发环境。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mode = process.env.OS === <span class="string">'Windows_NT'</span> ? <span class="string">'env'</span> : <span class="string">'prod'</span></span><br></pre></td></tr></table></figure><p>2.也可以通过package.json中配置的启动命令判断处于开发还是生产环境，如开发环境命令<code>npm start --dev</code>和生产环境命令<code>npm run build --build</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mode = process.argv[<span class="number">2</span>] === <span class="string">'--dev'</span> ? <span class="string">'env'</span> : <span class="string">'prod'</span></span><br></pre></td></tr></table></figure><h2 id="初始化开发和生产环境配置"><a href="#初始化开发和生产环境配置" class="headerlink" title="初始化开发和生产环境配置"></a>初始化开发和生产环境配置</h2><p>在/config/index.js中，判断所处的环境，并将相应环境的标识和参数作为模块导出。开发过程中，可以直接引用相应的配置使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">'process'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过开发环境和生产环境系统等参数差异，判断处于哪个环境。</span></span><br><span class="line"><span class="comment">// const mode = process.env.OS === 'Windows_NT' ? 'env' : 'prod'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以通过package.json中配置的启动命令判断处于开发还是生产环境。</span></span><br><span class="line"><span class="keyword">const</span> mode = process.argv[<span class="number">2</span>] === <span class="string">'--dev'</span> ? <span class="string">'env'</span> : <span class="string">'prod'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode, <span class="comment">// 当前所处环境</span></span><br><span class="line">  ...(mode === <span class="string">'env'</span> ? <span class="built_in">require</span>(<span class="string">'./config.dev'</span>) : <span class="built_in">require</span>(<span class="string">'./config.prod'</span>))  <span class="comment">// 当前环境的配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.以开发环境为例，需要使用的配置为服务器域名、端口号、账号、密码、数据库名，以及HTTP端口、静态文件绝对路径、上传文件保存绝对路径，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 数据库配置</span></span><br><span class="line">  DB_HOST: <span class="string">'localhost'</span>,</span><br><span class="line">  DB_PORT: <span class="number">3306</span>,</span><br><span class="line">  DB_USER: <span class="string">'root'</span>,</span><br><span class="line">  DB_PASS: <span class="string">''</span>,</span><br><span class="line">  DB_NAME: <span class="string">'test'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// HTTP端口</span></span><br><span class="line">  HTTP_PORT: <span class="number">8080</span>,</span><br><span class="line">  <span class="comment">// 静态文件绝对路径</span></span><br><span class="line">  HTTP_ROOT: path.resolve(__dirname, <span class="string">'../static/'</span>),</span><br><span class="line">  <span class="comment">// 上传文件保存绝对路径</span></span><br><span class="line">  HTTP_UPLOAD: path.resolve(__dirname, <span class="string">'../static/upload'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>在lib文件夹下，创建database.js，用于连接数据库。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mysql和co-mysql，用于连接数据库</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="keyword">const</span> coMysql = <span class="built_in">require</span>(<span class="string">'co-mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入数据库配置</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  DB_HOST,</span><br><span class="line">  DB_PORT,</span><br><span class="line">  DB_USER,</span><br><span class="line">  DB_PASS,</span><br><span class="line">  DB_NAME</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建服务器连接池</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">  host: DB_HOST,</span><br><span class="line">  port: DB_PORT,</span><br><span class="line">  user: DB_USER,</span><br><span class="line">  password: DB_PASS,</span><br><span class="line">  database: DB_NAME</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用co-mysql包装连接池，将连接转换为Async/Await异步方式</span></span><br><span class="line"><span class="keyword">const</span> connection = coMysql(pool)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 作为模块导出使用</span></span><br><span class="line"><span class="built_in">module</span>.exports = connection</span><br></pre></td></tr></table></figure><p>创建数据库连接后，可以在server.js中，创建一个数据库连接，并查看item_table表的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = <span class="built_in">require</span>(<span class="string">'./lib/database'</span>)</span><br><span class="line"></span><br><span class="line">;<span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 查询item_table表中的数据</span></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> connection.query(<span class="string">`SELECT * FROM item_table`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>若正常连接，即可打印数据如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ RowDataPacket &#123; <span class="attr">ID</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'运动服'</span>, <span class="attr">price</span>: <span class="number">299</span>, <span class="attr">count</span>: <span class="number">998</span> &#125; ]ice: <span class="number">199</span>, <span class="attr">count</span>: <span class="number">999</span> &#125;,</span><br><span class="line">  RowDataPacket &#123; <span class="attr">ID</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'运动裤'</span>, <span class="attr">price</span>: <span class="number">299</span>, <span class="attr">count</span>: <span class="number">998</span> &#125; ]</span><br></pre></td></tr></table></figure><h2 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h2><p>在之前的例子中，我们总是要通过if else语句来判断请求的接口路径，并进行相应操作。</p><p>这样会极大地降低开发效率，也不利于后期代码维护。</p><p>因此，通常的开发中，都会使用路由对不同的接口进行操作。</p><p>现在我们就来自己实现一个简单的路由：</p><p><strong>1.先创建一个router对象，用于存储路由表。其中有2个属性，分别为get、post，分别用于存储相应get、post请求地址的回调方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由表</span></span><br><span class="line"><span class="keyword">let</span> router = &#123;</span><br><span class="line">  <span class="comment">// 存储get请求的路由</span></span><br><span class="line">  <span class="keyword">get</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 存储post请求的路由</span></span><br><span class="line">  post: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 创建一个addRouter方法，用于添加路由配置，参数method为请求方法，url为请求地址，callback为处理该请求的回调函数。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加路由的方法，method为请求方法，url为请求地址，callback为处理该请求的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addRouter</span>(<span class="params">method, url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 为便于处理，将method和url统一转换成小写</span></span><br><span class="line">  method = method.toLowerCase()</span><br><span class="line">  url = url.toLowerCase()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将处理请求的回调函数，按方法名和地址储存到路由表中</span></span><br><span class="line">  router[method][url] = callback</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 创建一个findRouter方法，用于查找相应路由的回调函数。参数method为请求方法，url为请求地址，返回处理路由的回调函数。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找处理请求的回调函数的方法，method为请求方法，url为请求地址，返回处理路由的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findRouter</span>(<span class="params">method, url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 为便于处理，将method和url统一转换成小写</span></span><br><span class="line">  method = method.toLowerCase()</span><br><span class="line">  url = url.toLowerCase()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找到路由对应的回调函数，不存在则默认返回null</span></span><br><span class="line">  <span class="keyword">const</span> callback = router[method][url] || <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将回调函数返回</span></span><br><span class="line">  <span class="keyword">return</span> callback</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 将路由配置作为模块导出</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将添加路由和查找路由方法导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  addRouter,</span><br><span class="line">  findRouter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><p>在实现了路由之后，就可以以此为基础实现服务器了。</p><p>实现服务器分为以下几个步骤：</p><p>1.引入所需Node.js模块、服务器配置、路由模块<br>2.封装统一处理请求数据的方法<br>3.接收到的请求分为POST请求、GET请求，区分并进行处理<br>4.POST请求分为数据请求、文件上传请求，区分并进行处理<br>5.GET请求分为数据请求、读取文件请求，区分并进行处理</p><p>接下来，按步骤实现每部分代码。</p><p><strong>1. 引入所需Node.js模块、服务器配置、路由模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入创建服务器所需的模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; Form &#125; = <span class="built_in">require</span>(<span class="string">'multiparty'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入服务器配置</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  HTTP_PORT,</span><br><span class="line">  HTTP_ROOT,</span><br><span class="line">  HTTP_UPLOAD</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由模块的查找路由方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; findRouter &#125; = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 服务器代码</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听配置的端口</span></span><br><span class="line">server.listen(HTTP_PORT)</span><br><span class="line"><span class="comment">// 打印创建服务器成功信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server started at <span class="subst">$&#123;HTTP_PORT&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p><strong>2. 封装统一处理请求数据的方法</strong></p><p>要处理所有请求接口，需要的参数为method（请求方法）、pathname（请求接口路径）、query（query数据）、post（post数据）、files（文件数据）。</p><p>首先，根据method（请求方法）、pathname（请求接口路径），获取在路由配置时，已经配置好的相应接口的回调函数。<br>其次，若回调函数存在，则直接将参数传入回调函数处理。<br>最后，若回调函数不存在，则默认为请求一个静态文件，即可将文件读取之后发送给前端。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入创建服务器所需的模块</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入服务器配置</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由模块的查找路由方法</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过路由处理请求数据的公共方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">processData</span>(<span class="params">method, pathname, query, post, files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> callback = findRouter(method, pathname)  <span class="comment">// 获取处理请求的回调函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若回调函数存在，则表示路由有配置相应的数据处理，即该请求不是获取静态文件。</span></span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 根据路由处理接口数据</span></span><br><span class="line">        <span class="keyword">await</span> callback(res, query, post, files)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 出现错误的处理</span></span><br><span class="line">        res.writeHead(<span class="number">500</span>)</span><br><span class="line">        res.write(<span class="string">'Internal Server Error'</span>)</span><br><span class="line">        res.end()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 若回调函数不存在，则表示该请求为请求一个静态文件，如html、css、js等</span></span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听配置的端口</span></span><br><span class="line">server.listen(HTTP_PORT)</span><br><span class="line"><span class="comment">// 打印创建服务器成功信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server started at <span class="subst">$&#123;HTTP_PORT&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p><strong>3. 接收到的请求分为POST请求、GET请求，区分并进行处理</strong></p><p>根据请求的method，将请求分为POST请求、GET请求。</p><p>若为POST请求，则需要进一步判断是普通数据请求，还是文件请求，并分别进行处理。</p><p>而GET请求，只需要将数据传入processData方法进行处理，在processData方法中，区分GET请求获取数据，还是获取静态文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入创建服务器所需的模块</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入服务器配置</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由模块的查找路由方法</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 解析请求数据</span></span><br><span class="line">  <span class="comment">// 获取请求路径及query数据</span></span><br><span class="line">  <span class="keyword">const</span> method = req.method</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    pathname,</span><br><span class="line">    query</span><br><span class="line">  &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理POST请求</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    <span class="comment">// POST请求分为数据请求、文件上传请求，区分并进行处理</span></span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 处理GET请求</span></span><br><span class="line">    <span class="comment">// 通过路由处理数据，因为此时是GET请求，只有query数据</span></span><br><span class="line">    processData(method, url, query, &#123;&#125;, &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过路由处理请求数据的公共方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">processData</span>(<span class="params">method, pathname, query, post, files</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听配置的端口</span></span><br><span class="line">server.listen(HTTP_PORT)</span><br><span class="line"><span class="comment">// 打印创建服务器成功信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server started at <span class="subst">$&#123;HTTP_PORT&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p><strong>4. POST请求分为数据请求、文件上传请求，区分并进行处理</strong></p><p>判断请求头的content-type为<code>application/x-www-form-urlencoded</code>时，表示该请求只是单纯传输数据，可以直接当做字符串处理。<br>若请求头的content-type不对，则表示该请求是上传文件，可以用multiparty进行处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入创建服务器所需的模块</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入服务器配置</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由模块的查找路由方法</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 解析请求数据</span></span><br><span class="line">  <span class="comment">// 获取请求路径及query数据</span></span><br><span class="line">  <span class="keyword">const</span> method = req.method</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    pathname,</span><br><span class="line">    query</span><br><span class="line">  &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理POST请求</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    <span class="comment">// 根据请求头的content-type属性值，区分是普通POST请求，还是文件请求。</span></span><br><span class="line">    <span class="comment">// content-type为application/x-www-form-urlencoded时，表示是普通POST请求</span></span><br><span class="line">    <span class="comment">// 普通POST请求直接进行处理，文件请求使用multiparty处理</span></span><br><span class="line">    <span class="keyword">if</span> (req.headers[<span class="string">'content-type'</span>].startsWith(<span class="string">'application/x-www-form-urlencoded'</span>)) &#123;</span><br><span class="line">      <span class="comment">// 普通POST请求</span></span><br><span class="line">      <span class="keyword">let</span> arr = []  <span class="comment">// 存储Buffer数据</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 接收数据</span></span><br><span class="line">      req.on(<span class="string">'data'</span>, (buffer) =&gt; &#123;</span><br><span class="line">        arr.push(buffer)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 数据接收完成</span></span><br><span class="line">      req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> data = Buffer.concat(arr)  <span class="comment">// 合并接收到的数据</span></span><br><span class="line">        <span class="keyword">const</span> post = querystring.parse(data.toString()) <span class="comment">// 将接收到的数据转换为JSON</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过路由处理数据，因为此时是普通POST请求，不存在文件数据</span></span><br><span class="line">        processData(method, pathname, query, post, &#123;&#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 文件POST请求</span></span><br><span class="line">      <span class="keyword">const</span> form = <span class="keyword">new</span> Form(&#123;</span><br><span class="line">        uploadDir: HTTP_UPLOAD  <span class="comment">// 指定文件存储目录</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理请求数据</span></span><br><span class="line">      form.parse(req)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> post = &#123;&#125; <span class="comment">// 存储数据参数</span></span><br><span class="line">      <span class="keyword">let</span> files = &#123;&#125;  <span class="comment">// 存储文件数据</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过field事件处理普通数据</span></span><br><span class="line">      form.on(<span class="string">'field'</span>, (name, value) =&gt; &#123;</span><br><span class="line">        post[name] = value</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过file时间处理文件数据</span></span><br><span class="line">      form.on(<span class="string">'file'</span>, (name, file) =&gt; &#123;</span><br><span class="line">        files[name] = file</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理错误</span></span><br><span class="line">      form.on(<span class="string">'error'</span>, (error) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 数据传输完成时，触发close事件</span></span><br><span class="line">      form.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 通过路由处理数据，因为此时是POST文件请求，query、post、files数据都存在</span></span><br><span class="line">        processData(method, pathname, query, post, files)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 处理GET请求</span></span><br><span class="line">    <span class="comment">// 通过路由处理数据，因为此时是GET请求，只有query数据</span></span><br><span class="line">    processData(method, url, query, &#123;&#125;, &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过路由处理请求数据的公共方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">processData</span>(<span class="params">method, pathname, query, post, files</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听配置的端口</span></span><br><span class="line">server.listen(HTTP_PORT)</span><br><span class="line"><span class="comment">// 打印创建服务器成功信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server started at <span class="subst">$&#123;HTTP_PORT&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p><strong>5. GET请求分为数据请求、读取文件请求，区分并进行处理</strong></p><p>GET请求可以直接用<code>processData</code>方法统一处理，若路由中未配置处理数据的方法，则表示该请求为获取静态文件，需要进行单独处理，否则只需要调用路由配置的回调函数处理即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入创建服务器所需的模块</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入服务器配置</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由模块的查找路由方法</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 解析请求数据</span></span><br><span class="line">  <span class="comment">// 获取请求路径及query数据</span></span><br><span class="line">  <span class="keyword">const</span> method = req.method</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    pathname,</span><br><span class="line">    query</span><br><span class="line">  &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理POST请求</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 处理GET请求</span></span><br><span class="line">    <span class="comment">// 通过路由处理数据，因为此时是GET请求，只有query数据</span></span><br><span class="line">    processData(method, url, query, &#123;&#125;, &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过路由处理请求数据的公共方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">processData</span>(<span class="params">method, pathname, query, post, files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> callback = findRouter(method, pathname)  <span class="comment">// 获取处理请求的回调函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若回调函数存在，则表示路由有配置相应的数据处理，即该请求不是获取静态文件。</span></span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 根据路由处理接口数据</span></span><br><span class="line">        <span class="keyword">await</span> callback(res, query, post, files)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 出现错误的处理</span></span><br><span class="line">        res.writeHead(<span class="number">500</span>)</span><br><span class="line">        res.write(<span class="string">'Internal Server Error'</span>)</span><br><span class="line">        res.end()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 若回调函数不存在，则表示该请求为请求一个静态文件，如html、css、js等</span></span><br><span class="line">      <span class="keyword">const</span> filePath = HTTP_ROOT + pathname</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 检查文件是否存在</span></span><br><span class="line">      fs.stat(filePath, (error, stat) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="comment">// 出现错误表示文件不存在</span></span><br><span class="line">          res.writeHead(<span class="number">404</span>)</span><br><span class="line">          res.write(<span class="string">'Not Found'</span>)</span><br><span class="line">          res.end()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 文件存在则进行读取</span></span><br><span class="line">          <span class="comment">// 创建一个可读流。</span></span><br><span class="line">          <span class="keyword">const</span> readStream = fs.createReadStream(filePath)</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 创建一个Gzip对象，用于将文件压缩成</span></span><br><span class="line">          <span class="keyword">const</span> gz = zlib.createGzip()</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 向浏览器发送经过gzip压缩的文件，设置响应头，否则浏览器无法识别，会自动进行下载。</span></span><br><span class="line">          res.setHeader(<span class="string">'content-encoding'</span>, <span class="string">'gzip'</span>)</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 将读取的内容，通过gzip压缩之后，在通过管道推送到res中，由于res继承自Stream流，因此也可以接收管道的推送。</span></span><br><span class="line">          readStream.pipe(gz).pipe(res)</span><br><span class="line"></span><br><span class="line">          readStream.on(<span class="string">'error'</span>, (error) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(error)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听配置的端口</span></span><br><span class="line">server.listen(HTTP_PORT)</span><br><span class="line"><span class="comment">// 打印创建服务器成功信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server started at <span class="subst">$&#123;HTTP_PORT&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><h2 id="测试服务器"><a href="#测试服务器" class="headerlink" title="测试服务器"></a>测试服务器</h2><p>在server.js中引入封装的http模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'./lib/http'</span>)</span><br></pre></td></tr></table></figure><p>再使用node server.js启动服务器，就可以在浏览器中访问<code>http://localhost:8080/index.html</code>，看到html页面</p><h2 id="添加各接口路由配置"><a href="#添加各接口路由配置" class="headerlink" title="添加各接口路由配置"></a>添加各接口路由配置</h2><p>获取商品列表路由回调函数</p><p>查询<code>item_table</code>表中的商品数据后，返回给前台，并将回调函数作为模块导出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = <span class="built_in">require</span>(<span class="string">'../lib/database'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (res, query, post, files) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 查询商品列表</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> connection.query(<span class="string">`SELECT * FROM item_table`</span>)</span><br><span class="line"></span><br><span class="line">    res.writeJson(&#123;</span><br><span class="line">      error: <span class="number">0</span>, <span class="comment">// error为0则表示接口正常</span></span><br><span class="line">      data  <span class="comment">// 查询到的商品列表数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error)</span><br><span class="line">    res.writeJson(&#123;</span><br><span class="line">      error: <span class="number">1</span>, <span class="comment">// error为1则表示接口出错</span></span><br><span class="line">      msg: <span class="string">'数据库出错'</span> <span class="comment">// 接口的错误信息</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.end()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加商品路由回调函数"><a href="#添加商品路由回调函数" class="headerlink" title="添加商品路由回调函数"></a>添加商品路由回调函数</h3><p>应禁止query语句使用如下写法，容易造成注入攻击。<br><code>connection.query(INSERT INTO item_table (title, price, count) VALUES(&#39;${title}, ${price} ${count}&#39;))</code><br>此时若用户传入参数如下：</p><p><code>http://localhost:8080/add?title=a&#39;)%3B%20DELETE%20FROM%20item_table%3B%20SELECT%20(1&amp;price=19.8&amp;count=200</code></p><p>就会让服务器执行一个这样的语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO item_table (title, price, count) VALUES(<span class="string">'a'</span>); DELETE FROM item_table; SELECT (<span class="string">'1'</span>, <span class="number">19.8</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>其意义为：</p><p>1.插入一个虚假数据<br>2.删除item_table表中所有数据<br>3.返回一个虚假数据</p><p>这样就会导致item_table表中的所有数据被删除。</p><p>为防止注入攻击，可以使用占位符?代替需要插入数据库的参数，第二个数组参数中的3个值会按顺序填充占位符，该方法可以避免大部分注入攻击，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> connection.query(<span class="string">`INSERT INTO item_table (title, price, count) VALUES(?,?,?)`</span>, [title, price, count])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = <span class="built_in">require</span>(<span class="string">'../lib/database'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (res, query, post, files) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;</span><br><span class="line">    title,</span><br><span class="line">    price,</span><br><span class="line">    count</span><br><span class="line">  &#125; = post</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有传参</span></span><br><span class="line">  <span class="keyword">if</span> (!title || !price || !count) &#123;</span><br><span class="line">    res.writeJson(&#123;</span><br><span class="line">      error: <span class="number">1</span>,</span><br><span class="line">      msg: <span class="string">'参数不合法'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 将价格和数量转为数字</span></span><br><span class="line">    price = <span class="built_in">Number</span>(price)</span><br><span class="line">    count = <span class="built_in">Number</span>(count)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断价格和数量是否非数字</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(price) || <span class="built_in">isNaN</span>(count)) &#123;</span><br><span class="line">      res.writeJson(&#123;</span><br><span class="line">        error: <span class="number">1</span>,</span><br><span class="line">        msg: <span class="string">'参数不合法'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 使用占位符?代替需要插入数据库的参数，第二个数组参数中的3个值会按顺序填充占位符，该方法可以避免大部分注入攻击。</span></span><br><span class="line">        <span class="keyword">await</span> connection.query(<span class="string">`INSERT INTO item_table (title, price, count) VALUES(?,?,?)`</span>, [title, price, count])</span><br><span class="line"></span><br><span class="line">        res.writeJson(&#123;</span><br><span class="line">          error: <span class="number">0</span>,</span><br><span class="line">          msg: <span class="string">'添加商品成功'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error)</span><br><span class="line">        res.writeJson(&#123;</span><br><span class="line">          error: <span class="number">1</span>,</span><br><span class="line">          msg: <span class="string">'数据库内部错误'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.end()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除商品路由回调函数"><a href="#删除商品路由回调函数" class="headerlink" title="删除商品路由回调函数"></a>删除商品路由回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = <span class="built_in">require</span>(<span class="string">'../lib/database'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (res, query, post, files) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ID = query.id</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!ID) &#123;</span><br><span class="line">    res.writeJson(&#123;</span><br><span class="line">      error: <span class="number">1</span>,</span><br><span class="line">      msg: <span class="string">'参数不合法'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> connection.query(<span class="string">`DELETE FROM item_table WHERE ID=<span class="subst">$&#123;ID&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    res.writeJson(&#123;</span><br><span class="line">      error: <span class="number">0</span>,</span><br><span class="line">      msg: <span class="string">'删除成功'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.end()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加各接口路由配置-1"><a href="#添加各接口路由配置-1" class="headerlink" title="添加各接口路由配置"></a>添加各接口路由配置</h3><p>在<code>/router/index.js</code>中，引用各个接口的配置，并用addRouter方法添加到路由表中，即可在接收到请求时，查找路由并进行处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  addRouter</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'../lib/router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加获取商品列表接口</span></span><br><span class="line">addRouter(<span class="string">'get'</span>, <span class="string">'/list'</span>, <span class="built_in">require</span>(<span class="string">'./list'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加商品接口</span></span><br><span class="line">addRouter(<span class="string">'post'</span>, <span class="string">'/add'</span>, <span class="built_in">require</span>(<span class="string">'./add'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除商品接口</span></span><br><span class="line">addRouter(<span class="string">'get'</span>, <span class="string">'/del'</span>, <span class="built_in">require</span>(<span class="string">'./del'</span>))</span><br></pre></td></tr></table></figure><h3 id="在主模块中引用路由"><a href="#在主模块中引用路由" class="headerlink" title="在主模块中引用路由"></a>在主模块中引用路由</h3><p>在/server.js中，引用router模块，就可以完成整个服务端的配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = <span class="built_in">require</span>(<span class="string">'./lib/database'</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'./lib/http'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br></pre></td></tr></table></figure><h3 id="完成前端功能"><a href="#完成前端功能" class="headerlink" title="完成前端功能"></a>完成前端功能</h3><p>在/static/index.html中，使用jquery为前端页面实现如下功能：</p><p>1.显示商品列表<br>2.添加随机名称、价格、库存的商品<br>3.删除对应商品</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询商品列表的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/list'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">``</span></span><br><span class="line"></span><br><span class="line">    res.data.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      html += (</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;tr&gt;</span></span><br><span class="line"><span class="string">              &lt;td&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;td&gt;￥<span class="subst">$&#123;item.price&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;td&gt;<span class="subst">$&#123;item.count&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;td&gt;</span></span><br><span class="line"><span class="string">                &lt;a data-id="<span class="subst">$&#123;item.ID&#125;</span>" href="#" class="glyphicon glyphicon-trash"&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">              &lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;/tr&gt;</span></span><br><span class="line"><span class="string">          `</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'tbody'</span>).html(html)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; getList()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击添加按钮，随机添加一个商品</span></span><br><span class="line">$(<span class="string">'#addBtn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/add'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      title: <span class="string">`test<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span>)&#125;</span>`</span>,</span><br><span class="line">      price: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span>),</span><br><span class="line">      count: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      getList()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击删除按钮</span></span><br><span class="line">$(<span class="string">'tbody'</span>).on(<span class="string">'click'</span>, <span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/del'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      id: $(<span class="keyword">this</span>).attr(<span class="string">'data-id'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      getList()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node-js项目介绍&quot;&gt;&lt;a href=&quot;#Node-js项目介绍&quot; class=&quot;headerlink&quot; title=&quot;Node.js项目介绍&quot;&gt;&lt;/a&gt;Node.js项目介绍&lt;/h1&gt;&lt;p&gt;利用学到的知识，实现一个简单但实用的小项目如下：&lt;/p&gt;
&lt;p&gt;这是一个商品列表，具有展示商品信息，添加商品，删除商品的功能。&lt;/p&gt;
&lt;h2 id=&quot;项目的文件夹结构&quot;&gt;&lt;a href=&quot;#项目的文件夹结构&quot; class=&quot;headerlink&quot; title=&quot;项目的文件夹结构&quot;&gt;&lt;/a&gt;项目的文件夹结构&lt;/h2&gt;&lt;p&gt;├── package.json&lt;br&gt;├── server.js # 服务器代码&lt;br&gt;├── config # 项目配置文件夹&lt;br&gt;│     ├── config.dev.js # 开发环境配置&lt;br&gt;│     ├── config.prod.js # 生产环境配置&lt;br&gt;│     ├── index.js # 导出当前所处环境及配置&lt;br&gt;├── libs # 项目工具文件夹&lt;br&gt;│     ├── database.js # 连接数据库&lt;br&gt;│     ├── http.js # 服务器配置&lt;br&gt;│     ├── router.js # 处理路由&lt;br&gt;├── router # 项目路由配置文件夹&lt;br&gt;│     ├── index.js # 连接数据库&lt;br&gt;│     ├── list.js # 获取商品列表接口配置&lt;br&gt;│     ├── add.js # 增加商品接口配置&lt;br&gt;│     ├── del.js # 删除商品接口配置&lt;br&gt;├── static # 静态资源文件夹&lt;br&gt;│     ├── index.html # 前端HTML页面&lt;br&gt;│     ├── js # 前端JavaScript文件夹&lt;br&gt;│     ├── css # 前端CSS文件夹&lt;br&gt;│     ├── fonts # 前端字体文件夹&lt;br&gt;│     ├── upload # 前端上传文件夹&lt;/p&gt;
&lt;h2 id=&quot;判断当前所处环境&quot;&gt;&lt;a href=&quot;#判断当前所处环境&quot; class=&quot;headerlink&quot; title=&quot;判断当前所处环境&quot;&gt;&lt;/a&gt;判断当前所处环境&lt;/h2&gt;&lt;p&gt;通常项目在开发环境和生产环境要采用不同的，服务器、账号、域名、端口等配置，如果用人工进行切换操作麻烦且容易出错，因此通常使用环境变量进行判断。&lt;/p&gt;
&lt;p&gt;首先引入process模块&lt;code&gt;const process=require(&amp;#39;process&amp;#39;)&lt;/code&gt;，该模块提供了当前Node.js进程的信息。&lt;/p&gt;
&lt;p&gt;1.可以通过process.env环境变量获取开发环境和生产环境系统等参数差异，如开发环境运行在Windows系统上，而生产环境运行在Linux系统，那么就可以使用&lt;code&gt;process.env.OS === &amp;#39;Windows_NT&amp;#39;&lt;/code&gt;判断当前所处的是否开发环境。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mode = process.env.OS === &lt;span class=&quot;string&quot;&gt;&#39;Windows_NT&#39;&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&#39;env&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;prod&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.也可以通过package.json中配置的启动命令判断处于开发还是生产环境，如开发环境命令&lt;code&gt;npm start --dev&lt;/code&gt;和生产环境命令&lt;code&gt;npm run build --build&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mode = process.argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] === &lt;span class=&quot;string&quot;&gt;&#39;--dev&#39;&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&#39;env&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;prod&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;初始化开发和生产环境配置&quot;&gt;&lt;a href=&quot;#初始化开发和生产环境配置&quot; class=&quot;headerlink&quot; title=&quot;初始化开发和生产环境配置&quot;&gt;&lt;/a&gt;初始化开发和生产环境配置&lt;/h2&gt;&lt;p&gt;在/config/index.js中，判断所处的环境，并将相应环境的标识和参数作为模块导出。开发过程中，可以直接引用相应的配置使用。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; process = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;process&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 可以通过开发环境和生产环境系统等参数差异，判断处于哪个环境。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// const mode = process.env.OS === &#39;Windows_NT&#39; ? &#39;env&#39; : &#39;prod&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 也可以通过package.json中配置的启动命令判断处于开发还是生产环境。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mode = process.argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] === &lt;span class=&quot;string&quot;&gt;&#39;--dev&#39;&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&#39;env&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;prod&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mode, &lt;span class=&quot;comment&quot;&gt;// 当前所处环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...(mode === &lt;span class=&quot;string&quot;&gt;&#39;env&#39;&lt;/span&gt; ? &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./config.dev&#39;&lt;/span&gt;) : &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./config.prod&#39;&lt;/span&gt;))  &lt;span class=&quot;comment&quot;&gt;// 当前环境的配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;1.以开发环境为例，需要使用的配置为服务器域名、端口号、账号、密码、数据库名，以及HTTP端口、静态文件绝对路径、上传文件保存绝对路径，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 数据库配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DB_HOST: &lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DB_PORT: &lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DB_USER: &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DB_PASS: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DB_NAME: &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// HTTP端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HTTP_PORT: &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 静态文件绝对路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HTTP_ROOT: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;../static/&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 上传文件保存绝对路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HTTP_UPLOAD: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;../static/upload&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;连接数据库&quot;&gt;&lt;a href=&quot;#连接数据库&quot; class=&quot;headerlink&quot; title=&quot;连接数据库&quot;&gt;&lt;/a&gt;连接数据库&lt;/h2&gt;&lt;p&gt;在lib文件夹下，创建database.js，用于连接数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="https://zhanghao-web.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://zhanghao-web.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node学习(十三) --Stream流</title>
    <link href="https://zhanghao-web.github.io/2019/05/06/Node/Node%E5%AD%A6%E4%B9%A0(%E5%8D%81%E4%B8%89)%20--Stream%E6%B5%81/"/>
    <id>https://zhanghao-web.github.io/2019/05/06/Node/Node学习(十三) --Stream流/</id>
    <published>2019-05-06T07:50:06.000Z</published>
    <updated>2020-01-28T10:04:15.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File-System的问题"><a href="#File-System的问题" class="headerlink" title="File System的问题"></a>File System的问题</h2><p>我们通常会使用File System模块对文件进行读取，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'./test.txt'</span>, (error, buffer) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 读取文件成功</span></span><br><span class="line">    res.write(buffer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样操作简单有效，但这也存在一些问题：</p><p>1.占用内存<br>使用fs读取文件，它是一次性将文件的所有内容读取到内存中，再一次性发送到客户端，因此会占用大量内存。</p><p>2.资源使用效率低<br>从磁盘读取文件期间，磁盘处于忙碌状态，而网络处于空闲状态。<br>磁盘读取完成后，开始发送文件时，情况正相反，网络处于忙碌状态，此时磁盘却处于空闲状态</p><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><p>相比File System，Stream流读取文件是读一份，发一份，Stream流的写入操作也有同样特点，因此可以解决File System在上面提到的2个问题。</p><p>接下来实现一个简单的流，将1.txt文件的内容写入到2.txt中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可读流。</span></span><br><span class="line"><span class="keyword">const</span> readStream = fs.createReadStream(<span class="string">'./1.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可写流。</span></span><br><span class="line"><span class="keyword">const</span> writeStream = fs.createWriteStream(<span class="string">'./2.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将可读流读取的数据，通过管道pipe推送到写入流中，即可将1.txt的内容，写入到2.txt中。</span></span><br><span class="line">readStream.pipe(writeStream)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取出现错误时会触发error事件。</span></span><br><span class="line">readStream.on(<span class="string">'error'</span>, (error) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入完成时，触发finish事件。</span></span><br><span class="line">writeStream.on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'finish'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="使用Zlib压缩文件"><a href="#使用Zlib压缩文件" class="headerlink" title="使用Zlib压缩文件"></a>使用Zlib压缩文件</h2><p>可以使用Zlib模块，配合Stream流，实现文件压缩功能，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">// 引入zlib模块，用于实现压缩功能</span></span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可读流。</span></span><br><span class="line"><span class="keyword">const</span> readStream = fs.createReadStream(<span class="string">'./google.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可写流。</span></span><br><span class="line"><span class="keyword">const</span> writeStream = fs.createWriteStream(<span class="string">'./google.jpg.gz'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Gzip对象，用于将文件压缩成.gz文件</span></span><br><span class="line"><span class="keyword">const</span> gzip = zlib.createGzip()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将可读流读取的数据，先通过管道pipe推送到gzip中，再推送到写入流中。</span></span><br><span class="line"><span class="comment">// 也就是先将可读流的数据压缩，再推送到可写流中。</span></span><br><span class="line">readStream.pipe(gzip).pipe(writeStream)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取出现错误时会触发error事件。</span></span><br><span class="line">readStream.on(<span class="string">'error'</span>, (error) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入完成时，触发finish事件。</span></span><br><span class="line">writeStream.on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'finish'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用流传输文件到前台"><a href="#使用流传输文件到前台" class="headerlink" title="使用流传输文件到前台"></a>使用流传输文件到前台</h2><p>学习了流，我们就可以更加高效地将文件传输到前台：</p><!-- more --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    pathname</span><br><span class="line">  &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可读流。</span></span><br><span class="line">  <span class="keyword">const</span> readStream = fs.createReadStream(<span class="string">`./<span class="subst">$&#123;pathname&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个Gzip对象，用于将文件压缩成.gz文件</span></span><br><span class="line">  <span class="keyword">const</span> gzip = zlib.createGzip()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将读取的内容，在通过管道推送到res中，该方法不经过压缩</span></span><br><span class="line">  readStream.pipe(res)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理可读流报错，防止请求不存在的文件</span></span><br><span class="line">  readStream.on(<span class="string">'error'</span>, (error) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">    res.writeHead(<span class="number">404</span>)</span><br><span class="line">    res.write(<span class="string">'Not Found'</span>)</span><br><span class="line">    res.end()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>但可以看到，在这个例子里，虽然实现了使用流传输文件，但并没有用到gzip压缩，在传输时还是更多地消耗网络资源，接下来可以引入gzip压缩。</p><h2 id="文件经过gzip压缩后传输到前台"><a href="#文件经过gzip压缩后传输到前台" class="headerlink" title="文件经过gzip压缩后传输到前台"></a>文件经过gzip压缩后传输到前台</h2><p>但此时如果只是简单的用<code>readStream.pipe(gzip).pipe(res)</code>传输文件，浏览器在访问时无法直接打开，而是会触发文件下载。<br>这是因为未设置请求头属性<code>content-encoding</code>的值，导致浏览器无法识别用gzip压缩过的文件，这就需要修改请求头<code>res.setHeader(&#39;content-encoding&#39;, &#39;gzip&#39;)</code>，让浏览器可以识别。</p><p>这样浏览器就可以正常打开文件了，但若浏览器访问的是不存在的文件，浏览器会报错“无法访问此网站”，这是因为请求头属性<code>content-encoding</code>已被设置为gzip，但服务端传给浏览器的是Not Found字符串，浏览器无法识别。</p><p>此时可以使用<code>fs.stat</code>方法，先检查文件是否存在，若不存在则返回Not Found，若存在则继续传输。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    pathname</span><br><span class="line">  &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 文件的相对路径</span></span><br><span class="line">  <span class="keyword">const</span> filepath = <span class="string">`./<span class="subst">$&#123;pathname&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查文件是否存在</span></span><br><span class="line">  fs.stat(filepath, (error, stat) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error);</span><br><span class="line">      res.setHeader(<span class="string">'content-encoding'</span>, <span class="string">'identity'</span>)</span><br><span class="line">      res.writeHead(<span class="number">404</span>)</span><br><span class="line">      res.write(<span class="string">'Not Found'</span>)</span><br><span class="line">      res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 创建一个可读流。</span></span><br><span class="line">      <span class="keyword">const</span> readStream = fs.createReadStream(filepath)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建一个Gzip对象，用于将文件压缩成.gz文件</span></span><br><span class="line">      <span class="keyword">const</span> gzip = zlib.createGzip()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 向浏览器发送经过gzip压缩的文件，设置响应头，否则浏览器无法识别，会自动进行下载。</span></span><br><span class="line">      res.setHeader(<span class="string">'content-encoding'</span>, <span class="string">'gzip'</span>)</span><br><span class="line">      <span class="comment">// 将读取的内容，通过gzip压缩之后，在通过管道推送到res中，由于res继承自Stream流，因此也可以接收管道的推送。</span></span><br><span class="line">      readStream.pipe(gzip).pipe(res)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理可读流报错，防止文件中途被删除或出错，导致报错。</span></span><br><span class="line">      readStream.on(<span class="string">'error'</span>, (error) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        res.setHeader(<span class="string">'content-encoding'</span>, <span class="string">'identity'</span>)</span><br><span class="line">        res.writeHead(<span class="number">404</span>)</span><br><span class="line">        res.write(<span class="string">'Not Found'</span>)</span><br><span class="line">        res.end()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h2><p>常用的启动器有forever、pm2等，它们主要用在项目部署阶段</p><p>1.使应用不间断运行，如果不使用启动器，命令行窗口一旦关闭，或者出现报错，应用就会停止运行，启动器会帮助应用自动重启。<br>2.若出现服务器重启，启动器会自动启动应用，不需要手动操作。</p><p>常用的启动器有<code>forever、pm2</code>等，接下来介绍一下forever的使用。</p><h3 id="forever"><a href="#forever" class="headerlink" title="forever"></a>forever</h3><p>forever文档可参考：<a href="https://github.com/foreverjs/forever#readme" target="_blank" rel="noopener">github.com/foreverjs/f…</a></p><blockquote><p>使用forever启动一个服务：</p></blockquote><ul><li>安装forever：<code>npm install forever -g</code></li><li>在命令行运行<code>forever start server.js</code>，替代<code>node server.js</code>命令。</li><li>命令行窗口提示<code>info: Forever processing file: server.js</code>，表示启动成功，此时如果将窗口关闭，应用照样可以访问。</li><li>如果需要关闭服务，可以运行<code>forever stop server.js</code>。还有一个命令是<code>forever stopall</code>，停止全部在运行的任务，但使用要慎重。</li></ul><p>forever启动时，还可以添加一些配置，例如<code>forever start xxx.js -l c:/xxx.log -e c:/xxx_err.log -a，forever start xxx.js</code>表示启动xxx.js。</p><p>-l c:/xxx.log表示将log信息输出到c:/xxx.log文件。<br>-e c:/xxx_err.log表示将错误信息输出到c:/xxx_err.log文件。<br>-a 表示新的日志添加到旧日志之后，即保留旧日志。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;File-System的问题&quot;&gt;&lt;a href=&quot;#File-System的问题&quot; class=&quot;headerlink&quot; title=&quot;File System的问题&quot;&gt;&lt;/a&gt;File System的问题&lt;/h2&gt;&lt;p&gt;我们通常会使用File System模块对文件进行读取，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;./test.txt&#39;&lt;/span&gt;, (error, buffer) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 读取文件成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.write(buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样操作简单有效，但这也存在一些问题：&lt;/p&gt;
&lt;p&gt;1.占用内存&lt;br&gt;使用fs读取文件，它是一次性将文件的所有内容读取到内存中，再一次性发送到客户端，因此会占用大量内存。&lt;/p&gt;
&lt;p&gt;2.资源使用效率低&lt;br&gt;从磁盘读取文件期间，磁盘处于忙碌状态，而网络处于空闲状态。&lt;br&gt;磁盘读取完成后，开始发送文件时，情况正相反，网络处于忙碌状态，此时磁盘却处于空闲状态&lt;/p&gt;
&lt;h2 id=&quot;Stream流&quot;&gt;&lt;a href=&quot;#Stream流&quot; class=&quot;headerlink&quot; title=&quot;Stream流&quot;&gt;&lt;/a&gt;Stream流&lt;/h2&gt;&lt;p&gt;相比File System，Stream流读取文件是读一份，发一份，Stream流的写入操作也有同样特点，因此可以解决File System在上面提到的2个问题。&lt;/p&gt;
&lt;p&gt;接下来实现一个简单的流，将1.txt文件的内容写入到2.txt中：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个可读流。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; readStream = fs.createReadStream(&lt;span class=&quot;string&quot;&gt;&#39;./1.txt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个可写流。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; writeStream = fs.createWriteStream(&lt;span class=&quot;string&quot;&gt;&#39;./2.txt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将可读流读取的数据，通过管道pipe推送到写入流中，即可将1.txt的内容，写入到2.txt中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;readStream.pipe(writeStream)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 读取出现错误时会触发error事件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;readStream.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, (error) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 写入完成时，触发finish事件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;writeStream.on(&lt;span class=&quot;string&quot;&gt;&#39;finish&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;finish&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用Zlib压缩文件&quot;&gt;&lt;a href=&quot;#使用Zlib压缩文件&quot; class=&quot;headerlink&quot; title=&quot;使用Zlib压缩文件&quot;&gt;&lt;/a&gt;使用Zlib压缩文件&lt;/h2&gt;&lt;p&gt;可以使用Zlib模块，配合Stream流，实现文件压缩功能，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 引入zlib模块，用于实现压缩功能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; zlib = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;zlib&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个可读流。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; readStream = fs.createReadStream(&lt;span class=&quot;string&quot;&gt;&#39;./google.jpg&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个可写流。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; writeStream = fs.createWriteStream(&lt;span class=&quot;string&quot;&gt;&#39;./google.jpg.gz&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个Gzip对象，用于将文件压缩成.gz文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; gzip = zlib.createGzip()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将可读流读取的数据，先通过管道pipe推送到gzip中，再推送到写入流中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 也就是先将可读流的数据压缩，再推送到可写流中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;readStream.pipe(gzip).pipe(writeStream)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 读取出现错误时会触发error事件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;readStream.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, (error) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 写入完成时，触发finish事件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;writeStream.on(&lt;span class=&quot;string&quot;&gt;&#39;finish&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;finish&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node" scheme="https://zhanghao-web.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://zhanghao-web.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node学习(十二) --使用async/await异步操作数据库</title>
    <link href="https://zhanghao-web.github.io/2019/04/29/Node/Node%E5%AD%A6%E4%B9%A0(%E5%8D%81%E4%BA%8C)%20--%E4%BD%BF%E7%94%A8async-await%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://zhanghao-web.github.io/2019/04/29/Node/Node学习(十二) --使用async-await异步操作数据库/</id>
    <published>2019-04-29T07:08:07.000Z</published>
    <updated>2020-01-28T10:04:15.048Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇使用Node.js操作数据库，虽然能实现功能，但是异步操作需要不断写回调函数，代码严重冗余，而且阅读困难。</p><p>可以使用<a href="https://github.com/haoxins/co-mysql" target="_blank" rel="noopener">co-mysql</a>，将<code>query</code>方法该写为返回一个<code>Promise</code>，就可以使用<code>async/await</code>进行异步处理。</p><p>我们可以参考一下它的源码，看看它是如何实现将回调函数转换为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = wrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slice = [].slice;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该模块导出为一个包装函数，运行它的返回值是一个带有query方法的对象。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapper</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// client即为mysql.createPool或mysql.createConnection方法创建的连接对象。</span></span><br><span class="line">  <span class="keyword">var</span> query = client.query;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  o.query = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 提取调用query方法时，传入的所有参数，将其存入一个数组。</span></span><br><span class="line">    <span class="keyword">var</span> args = slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个Promise对象，它将作为o.query的返回值，让其支持async/await方式调用。</span></span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 为args增加一个回调函数，它将作为client.query方法的回调函数运行，它接收到结果时，将进行判断运行reject还是resolve</span></span><br><span class="line">      args.push(<span class="function"><span class="keyword">function</span> (<span class="params">err, rows</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(rows);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用apply方法，将o.query接收到的参数都传给client.query，它可以等同于</span></span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">        client.query(args[0], function(err, rows) &#123;</span></span><br><span class="line"><span class="comment">          if (err) &#123;</span></span><br><span class="line"><span class="comment">            reject(err);</span></span><br><span class="line"><span class="comment">          &#125; else &#123;</span></span><br><span class="line"><span class="comment">            resolve(rows);</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      query.apply(client, args);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是上一篇的代码可以进行如下优化：<br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="keyword">const</span> coMysql = <span class="built_in">require</span>(<span class="string">'co-mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 连接服务器</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">  connectionLimit: <span class="number">10</span>,  <span class="comment">// 建立的连接数量，默认为10个</span></span><br><span class="line">  host: <span class="string">'localhost'</span>,  <span class="comment">// 地址</span></span><br><span class="line">  port: <span class="number">3306</span>,  <span class="comment">// 端口，不传则默认3306</span></span><br><span class="line">  user: <span class="string">'root'</span>,  <span class="comment">// 登录名</span></span><br><span class="line">  password: <span class="string">''</span>,  <span class="comment">// 密码</span></span><br><span class="line">  database: <span class="string">'test'</span>  <span class="comment">// 连接的数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = coMysql(pool)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* const username = 'lily'</span></span><br><span class="line"><span class="comment">const password = '888888'</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 向数据库中插入数据</span></span><br><span class="line"><span class="comment">connection.query(`INSERT INTO user_table (username, password) VALUES ('$&#123;username&#125;', '$&#123;password&#125;')`, (err, data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  if (err) &#123;</span></span><br><span class="line"><span class="comment">    console.error(err)</span></span><br><span class="line"><span class="comment">  &#125; else &#123;</span></span><br><span class="line"><span class="comment">    console.log(data)</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 查询user_table表的数据</span></span><br><span class="line"><span class="comment">connection.query(`SELECT * FROM User_table`, (err, data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  if (err) &#123;</span></span><br><span class="line"><span class="comment">    console.error(err)</span></span><br><span class="line"><span class="comment">  &#125; else &#123;</span></span><br><span class="line"><span class="comment">    console.log(data)</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"><span class="comment">// more</span></span><br><span class="line"><span class="comment">// 2. 与HTTP模块配合使用</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    pathname,</span><br><span class="line">    query</span><br><span class="line">  &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/reg'</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取get请求数据</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      username,</span><br><span class="line">      password</span><br><span class="line">    &#125; = query</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验参数是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (!username || !password) &#123;</span><br><span class="line">      res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        error: <span class="number">1</span>,</span><br><span class="line">        msg: <span class="string">'用户名或密码不可为空'</span></span><br><span class="line">      &#125;))</span><br><span class="line">      res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (username.length &gt; <span class="number">32</span>) &#123;</span><br><span class="line">      res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        error: <span class="number">1</span>,</span><br><span class="line">        msg: <span class="string">'用户名的长度不可超过32位'</span></span><br><span class="line">      &#125;))</span><br><span class="line">      res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (password.length &gt; <span class="number">32</span>) &#123;</span><br><span class="line">      res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        error: <span class="number">1</span>,</span><br><span class="line">        msg: <span class="string">'密码的长度不可超过32位'</span></span><br><span class="line">      &#125;))</span><br><span class="line">      res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 校验通过，开始注册流程</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 检查用户名是否已存在</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> connection.query(<span class="string">`SELECT ID FROM User_table WHERE username='<span class="subst">$&#123;username&#125;</span>'`</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (data.length) &#123;</span><br><span class="line">          res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            error: <span class="number">1</span>,</span><br><span class="line">            msg: <span class="string">'此用户名已被占用'</span></span><br><span class="line">          &#125;))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 将用户名和密码插入数据库</span></span><br><span class="line">          <span class="keyword">await</span> connection.query(<span class="string">`INSERT INTO userddd_table (username, password) VALUES('<span class="subst">$&#123;username&#125;</span>', '<span class="subst">$&#123;password&#125;</span>')`</span>)</span><br><span class="line"></span><br><span class="line">          res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            error: <span class="number">0</span>,</span><br><span class="line">            msg: <span class="string">'注册成功'</span></span><br><span class="line">          &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error)</span><br><span class="line">        res.writeHead(<span class="number">500</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      res.end()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'data'</span>, (buffer) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 获取POST请求的Buffer数据</span></span><br><span class="line">      arr.push(buffer)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// 将Buffer数据合并</span></span><br><span class="line">      <span class="keyword">let</span> buffer = Buffer.concat(arr)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理接收到的POST数据</span></span><br><span class="line">      <span class="keyword">const</span> post = <span class="built_in">JSON</span>.parse(buffer.toString())</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取post请求数据</span></span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        username,</span><br><span class="line">        password</span><br><span class="line">      &#125; = post</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 根据用户名查询</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> connection.query(<span class="string">`SELECT username, password FROM User_table WHERE username='<span class="subst">$&#123;username&#125;</span>'`</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!data.length) &#123;</span><br><span class="line">          <span class="comment">// 用户不存在</span></span><br><span class="line">          res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            error: <span class="number">1</span>,</span><br><span class="line">            msg: <span class="string">'用户名或密码错误'</span></span><br><span class="line">          &#125;))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data[<span class="number">0</span>].password !== password) &#123;</span><br><span class="line">          <span class="comment">// 密码不正确</span></span><br><span class="line">          res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            error: <span class="number">1</span>,</span><br><span class="line">            msg: <span class="string">'用户名或密码错误'</span></span><br><span class="line">          &#125;))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            error: <span class="number">0</span>,</span><br><span class="line">            msg: <span class="string">'登录成功'</span></span><br><span class="line">          &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error)</span><br><span class="line">        res.writeHead(<span class="number">500</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      res.end()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 若请求不为接口，则默认为请求文件</span></span><br><span class="line">    <span class="keyword">if</span> (pathname !== <span class="string">'/favicon.ico'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">`.<span class="subst">$&#123;pathname&#125;</span>`</span>, (err, buffer) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          res.writeHead(<span class="number">404</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.write(buffer)</span><br><span class="line">        &#125;</span><br><span class="line">        res.end()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>)</span><br><span class="line">      res.end()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇使用Node.js操作数据库，虽然能实现功能，但是异步操作需要不断写回调函数，代码严重冗余，而且阅读困难。&lt;/p&gt;
&lt;p&gt;可以使用&lt;a href=&quot;https://github.com/haoxins/co-mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;co-mysql&lt;/a&gt;，将&lt;code&gt;query&lt;/code&gt;方法该写为返回一个&lt;code&gt;Promise&lt;/code&gt;，就可以使用&lt;code&gt;async/await&lt;/code&gt;进行异步处理。&lt;/p&gt;
&lt;p&gt;我们可以参考一下它的源码，看看它是如何实现将回调函数转换为&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = wrapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice = [].slice;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 该模块导出为一个包装函数，运行它的返回值是一个带有query方法的对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;client&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// client即为mysql.createPool或mysql.createConnection方法创建的连接对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = client.query;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  o.query = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 提取调用query方法时，传入的所有参数，将其存入一个数组。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = slice.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建一个Promise对象，它将作为o.query的返回值，让其支持async/await方式调用。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 为args增加一个回调函数，它将作为client.query方法的回调函数运行，它接收到结果时，将进行判断运行reject还是resolve&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      args.push(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, rows&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          reject(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          resolve(rows);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 用apply方法，将o.query接收到的参数都传给client.query，它可以等同于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;/* &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        client.query(args[0], function(err, rows) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          if (err) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;            reject(err);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          &amp;#125; else &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;            resolve(rows);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;      */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      query.apply(client, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;于是上一篇的代码可以进行如下优化：&lt;br&gt;
    
    </summary>
    
      <category term="Node" scheme="https://zhanghao-web.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://zhanghao-web.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node学习(十一) --使用Nodejs操作数据库</title>
    <link href="https://zhanghao-web.github.io/2019/04/21/Node/Node%E5%AD%A6%E4%B9%A0(%E5%8D%81%E4%B8%80%EF%BC%89--%E4%BD%BF%E7%94%A8Nodejs%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://zhanghao-web.github.io/2019/04/21/Node/Node学习(十一）--使用Nodejs操作数据库/</id>
    <published>2019-04-21T13:51:12.000Z</published>
    <updated>2020-01-28T10:04:15.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nodejs操作数据库"><a href="#Nodejs操作数据库" class="headerlink" title="Nodejs操作数据库"></a>Nodejs操作数据库</h2><p>Nodejs操作数据库需要用到<code>mysql</code>模块，通过<code>npm i mysql -D</code>进行安装。</p><p>之后可以通过<code>mysql.createConnection</code>方法新建一个数据库连接，需要传入的参数有地址、端口、登录名、密码，以及需要连接的数据库。</p><p><code>mysql.createConnection</code>会返回一个<code>connection</code>对象，可使用<code>connection.query</code>方法，传入SQL语句，对数据库进行相应操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 连接服务器</span></span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,  <span class="comment">// 地址</span></span><br><span class="line">  port: <span class="number">3306</span>,  <span class="comment">// 端口，不传则默认3306</span></span><br><span class="line">  user: <span class="string">'root'</span>,  <span class="comment">// 登录名</span></span><br><span class="line">  password: <span class="string">''</span>,  <span class="comment">// 密码</span></span><br><span class="line">  database: <span class="string">'test'</span>  <span class="comment">// 连接的数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> username = <span class="string">'zzz'</span></span><br><span class="line"><span class="keyword">const</span> password = <span class="string">'888888'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向数据库中插入数据</span></span><br><span class="line">connection.query(<span class="string">`INSERT INTO user_table (username, password) VALUES ('<span class="subst">$&#123;username&#125;</span>', '<span class="subst">$&#123;password&#125;</span>')`</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询user_table表的数据</span></span><br><span class="line">db.query(<span class="string">`SELECT * FROM User_table`</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>INSERT语句的打印的是插入结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OkPacket &#123;</span><br><span class="line">  fieldCount: <span class="number">0</span>,</span><br><span class="line">  affectedRows: <span class="number">1</span>,</span><br><span class="line">  insertId: <span class="number">8</span>,<span class="comment">// 返回了当前插入语句的id，可以用来告知前端插入数据的id</span></span><br><span class="line">  serverStatus: <span class="number">2</span>,</span><br><span class="line">  warningCount: <span class="number">0</span>,</span><br><span class="line">  message: <span class="string">''</span>,</span><br><span class="line">  protocol41: <span class="literal">true</span>,</span><br><span class="line">  changedRows: <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><p>SELECT语句的打印结果为查询到的所有数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ RowDataPacket &#123; <span class="attr">ID</span>: <span class="number">1</span>, <span class="attr">username</span>: <span class="string">'lee'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;,</span><br><span class="line">  RowDataPacket &#123; <span class="attr">ID</span>: <span class="number">3</span>, <span class="attr">username</span>: <span class="string">'chen'</span>, <span class="attr">password</span>: <span class="string">'654321'</span> &#125;,</span><br><span class="line">  RowDataPacket &#123; <span class="attr">ID</span>: <span class="number">8</span>, <span class="attr">username</span>: <span class="string">'zzz'</span>, <span class="attr">password</span>: <span class="string">'888888'</span> &#125; ]</span><br></pre></td></tr></table></figure><p>但<code>mysql.createConnection</code>方法有一个缺陷，就是它一次只能创建一个连接，一旦有多个用户同时请求，就会造成请求排队等待。</p><p>因此为了提高性能，可以改用<code>mysql.createPool</code>方法，创建一个连接池，它可以创建n个与服务器之间的连接，需要使用时，可以自动从中选取一个空闲的连接使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = mysql.createPool(&#123;</span><br><span class="line">  connectionLimit: <span class="number">10</span>,  <span class="comment">// 建立的连接数量，默认为10个</span></span><br><span class="line">  host: <span class="string">'localhost'</span>,  <span class="comment">// 地址</span></span><br><span class="line">  port: <span class="number">3306</span>,  <span class="comment">// 端口，不传则默认3306</span></span><br><span class="line">  user: <span class="string">'root'</span>,  <span class="comment">// 登录名</span></span><br><span class="line">  password: <span class="string">''</span>,  <span class="comment">// 密码</span></span><br><span class="line">  database: <span class="string">'test'</span>  <span class="comment">// 连接的数据库</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="与HTTP模块配合实现接口"><a href="#与HTTP模块配合实现接口" class="headerlink" title="与HTTP模块配合实现接口"></a>与HTTP模块配合实现接口</h2><p>完成了基本操作后，就可以实现一个完整的注册、登录流程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 连接服务器</span></span><br><span class="line"><span class="keyword">const</span> connection = mysql.createPool(&#123;</span><br><span class="line">  connectionLimit: <span class="number">10</span>,  <span class="comment">// 建立的连接数量，默认为10个</span></span><br><span class="line">  host: <span class="string">'localhost'</span>,  <span class="comment">// 地址</span></span><br><span class="line">  port: <span class="number">3306</span>,  <span class="comment">// 端口，不传则默认3306</span></span><br><span class="line">  user: <span class="string">'root'</span>,  <span class="comment">// 登录名</span></span><br><span class="line">  password: <span class="string">''</span>,  <span class="comment">// 密码</span></span><br><span class="line">  database: <span class="string">'test'</span>  <span class="comment">// 连接的数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 与HTTP模块配合使用</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    pathname,</span><br><span class="line">    query</span><br><span class="line">  &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/reg'</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取get请求数据</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      username,</span><br><span class="line">      password</span><br><span class="line">    &#125; = query</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验参数是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (!username || !password) &#123;</span><br><span class="line">      res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        error: <span class="number">1</span>,</span><br><span class="line">        msg: <span class="string">'用户名或密码不可为空'</span></span><br><span class="line">      &#125;))</span><br><span class="line">      res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (username.length &gt; <span class="number">32</span>) &#123;</span><br><span class="line">      res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        error: <span class="number">1</span>,</span><br><span class="line">        msg: <span class="string">'用户名的长度不可超过32位'</span></span><br><span class="line">      &#125;))</span><br><span class="line">      res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (password.length &gt; <span class="number">32</span>) &#123;</span><br><span class="line">      res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        error: <span class="number">1</span>,</span><br><span class="line">        msg: <span class="string">'密码的长度不可超过32位'</span></span><br><span class="line">      &#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 校验通过，开始注册流程</span></span><br><span class="line">      <span class="comment">// 检查用户名是否已存在</span></span><br><span class="line">      connection.query(<span class="string">`SELECT ID FROM User_table WHERE username='<span class="subst">$&#123;username&#125;</span>'`</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          res.writeHead(<span class="number">500</span>)</span><br><span class="line">          res.end()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (data.length) &#123;</span><br><span class="line">            res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">              error: <span class="number">1</span>,</span><br><span class="line">              msg: <span class="string">'此用户名已被占用'</span></span><br><span class="line">            &#125;))</span><br><span class="line">            res.end()</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 将用户名和密码插入数据库</span></span><br><span class="line">            connection.query(<span class="string">`INSERT INTO user_table (username, password) VALUES('<span class="subst">$&#123;username&#125;</span>', '<span class="subst">$&#123;password&#125;</span>')`</span>, (err, data) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                res.writeHead(<span class="number">500</span>)</span><br><span class="line">                res.end()</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                  error: <span class="number">0</span>,</span><br><span class="line">                  msg: <span class="string">'注册成功'</span></span><br><span class="line">                &#125;))</span><br><span class="line">                res.end()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'data'</span>, (buffer) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 获取POST请求的Buffer数据</span></span><br><span class="line">      arr.push(buffer)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">// 将Buffer数据合并</span></span><br><span class="line">      <span class="keyword">let</span> buffer = Buffer.concat(arr)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理接收到的POST数据</span></span><br><span class="line">      <span class="keyword">const</span> post = <span class="built_in">JSON</span>.parse(buffer.toString())</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取post请求数据</span></span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        username,</span><br><span class="line">        password</span><br><span class="line">      &#125; = post</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 根据用户名查询</span></span><br><span class="line">      connection.query(<span class="string">`SELECT username, password FROM User_table WHERE username='<span class="subst">$&#123;username&#125;</span>'`</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!data.length) &#123;</span><br><span class="line">            <span class="comment">// 用户不存在</span></span><br><span class="line">            res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">              error: <span class="number">1</span>,</span><br><span class="line">              msg: <span class="string">'用户名或密码错误'</span></span><br><span class="line">            &#125;))</span><br><span class="line">            res.end()</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data[<span class="number">0</span>].password !== password) &#123;</span><br><span class="line">            <span class="comment">// 密码不正确</span></span><br><span class="line">            res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">              error: <span class="number">1</span>,</span><br><span class="line">              msg: <span class="string">'用户名或密码错误'</span></span><br><span class="line">            &#125;))</span><br><span class="line">            res.end()</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">              error: <span class="number">0</span>,</span><br><span class="line">              msg: <span class="string">'登录成功'</span></span><br><span class="line">            &#125;))</span><br><span class="line">            res.end()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 若请求不为接口，则默认为请求文件</span></span><br><span class="line">    fs.readFile(<span class="string">`.<span class="subst">$&#123;pathname&#125;</span>`</span>, (err, buffer) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        res.writeHead(<span class="number">404</span>)</span><br><span class="line">        res.write(buffer)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.write(buffer)</span><br><span class="line">      &#125;</span><br><span class="line">      res.end()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nodejs操作数据库&quot;&gt;&lt;a href=&quot;#Nodejs操作数据库&quot; class=&quot;headerlink&quot; title=&quot;Nodejs操作数据库&quot;&gt;&lt;/a&gt;Nodejs操作数据库&lt;/h2&gt;&lt;p&gt;Nodejs操作数据库需要用到&lt;code&gt;mysql&lt;/code&gt;模块，通过&lt;code&gt;npm i mysql -D&lt;/code&gt;进行安装。&lt;/p&gt;
&lt;p&gt;之后可以通过&lt;code&gt;mysql.createConnection&lt;/code&gt;方法新建一个数据库连接，需要传入的参数有地址、端口、登录名、密码，以及需要连接的数据库。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mysql.createConnection&lt;/code&gt;会返回一个&lt;code&gt;connection&lt;/code&gt;对象，可使用&lt;code&gt;connection.query&lt;/code&gt;方法，传入SQL语句，对数据库进行相应操作。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mysql = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mysql&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. 连接服务器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; connection = mysql.createConnection(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  host: &lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  port: &lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 端口，不传则默认3306&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  user: &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 登录名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  password: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  database: &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 连接的数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; username = &lt;span class=&quot;string&quot;&gt;&#39;zzz&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; password = &lt;span class=&quot;string&quot;&gt;&#39;888888&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 向数据库中插入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connection.query(&lt;span class=&quot;string&quot;&gt;`INSERT INTO user_table (username, password) VALUES (&#39;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;username&amp;#125;&lt;/span&gt;&#39;, &#39;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;password&amp;#125;&lt;/span&gt;&#39;)`&lt;/span&gt;, (err, data) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 查询user_table表的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.query(&lt;span class=&quot;string&quot;&gt;`SELECT * FROM User_table`&lt;/span&gt;, (err, data) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;INSERT语句的打印的是插入结果：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OkPacket &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fieldCount: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  affectedRows: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  insertId: &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,	&lt;span class=&quot;comment&quot;&gt;// 返回了当前插入语句的id，可以用来告知前端插入数据的id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  serverStatus: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  warningCount: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  message: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  protocol41: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  changedRows: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;SELECT语句的打印结果为查询到的所有数据：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ RowDataPacket &amp;#123; &lt;span class=&quot;attr&quot;&gt;ID&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;lee&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;123456&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RowDataPacket &amp;#123; &lt;span class=&quot;attr&quot;&gt;ID&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;chen&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;654321&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RowDataPacket &amp;#123; &lt;span class=&quot;attr&quot;&gt;ID&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;zzz&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;888888&#39;&lt;/span&gt; &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但&lt;code&gt;mysql.createConnection&lt;/code&gt;方法有一个缺陷，就是它一次只能创建一个连接，一旦有多个用户同时请求，就会造成请求排队等待。&lt;/p&gt;
&lt;p&gt;因此为了提高性能，可以改用&lt;code&gt;mysql.createPool&lt;/code&gt;方法，创建一个连接池，它可以创建n个与服务器之间的连接，需要使用时，可以自动从中选取一个空闲的连接使用。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; connection = mysql.createPool(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  connectionLimit: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 建立的连接数量，默认为10个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  host: &lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  port: &lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 端口，不传则默认3306&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  user: &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 登录名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  password: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  database: &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 连接的数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node" scheme="https://zhanghao-web.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://zhanghao-web.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node学习(十) --数据库入门</title>
    <link href="https://zhanghao-web.github.io/2019/04/21/Node/Node%E5%AD%A6%E4%B9%A0(%E5%8D%81)%20--%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%A5%E9%97%A8/"/>
    <id>https://zhanghao-web.github.io/2019/04/21/Node/Node学习(十) --数据库入门/</id>
    <published>2019-04-21T13:43:12.000Z</published>
    <updated>2020-01-28T10:04:15.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h2><p>1.<strong>文件数据库</strong> 它的优点是：数据保存在单一文件中，因此部署十分方便，常用来嵌入到APP中保存数据，以及手机中的短信、通话记录等。</p><p>常用的有SQLite、Access等。</p><p>2.<strong>关系型数据库</strong> 关系型数据库的功能强大，适用场景丰富，它的特点是数据之间互相是关联的。</p><p>比如淘宝，一个用户下有个人信息、订单信息、聊天记录等，可以分别存储在不同表中，通过用户ID相互关联起来。但它的性能不是最强的。</p><p>常用有SQL。</p><p>3.<strong>分布式数据库</strong> 它的特点是可以安装在多台机器上，可以将查询等操作分散开，合理利用服务器资源。</p><p>还可以将数据设置多个备份，一旦其中一台服务器异常，可以由其他服务器同步数据。</p><p>常用的有MongoDB。</p><p>4.<strong>NoSQL</strong> 它只能支持简单查询，但性能强于关系型数据库，常用来做接口、数据缓存等。</p><p>常用的有MongoDB、Memcached、Redis等。</p><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p>结构化查询语言(Structured Query Language)简称SQL，它主要用来存取、查询、更新和管理关系数据库系统。</p><p>SQL 分为两个部分：数据定义语言 (DDL)和数据操作语言 (DML) 。</p><h2 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h2><p>CREATE DATABASE - 创建新数据库<br>ALTER DATABASE - 修改数据库<br>CREATE TABLE - 创建新表<br>ALTER TABLE - 变更（改变）数据库表<br>DROP TABLE - 删除表<br>CREATE INDEX - 创建索引（搜索键）<br>DROP INDEX - 删除索引</p><h2 id="DDM语句"><a href="#DDM语句" class="headerlink" title="DDM语句"></a>DDM语句</h2><p>数据操作语言 (DML) 是最常用的操作，即增删改查，它包括如下部分：</p><p>1.增INSERT INTO - 向数据库表中插入数据<br>INSERT INTO &lt;表&gt; (字段, …) VALUES(值, …);<br>INSERT INTO user_table (username, password) VALUES(‘lee’, ‘123456’);<br>在user_table表中插入一条数据。</p><p>2.删DELETE - 从数据库表中删除数据<br>DELETE FROM &lt;表&gt; WHERE 条件;<br>DELETE FROM user_table WHERE ID=2;<br>删除user_table表中ID为2的项目。</p><p>3.改UPDATE - 更新数据库表中的数据<br>UPDATE &lt;表&gt; SET 字段=新值,字段=新值,… WHERE 条件;<br>UPDATE user_table SET password=’888888’, username=’chen’ WHERE ID=1;<br>将user_table表中ID为1的用户名和密码更新。</p><p>4.查SELECT - 从数据库表中获取数据<br>SELECT 字段列表 FROM &lt;表&gt; WHERE 条件 ORDER BY 字段 LIMIT 30,30;<br>SELECT ID FROM user_table WHERE username=‘lee’ ORDER BY ID ASC LIMIT 0,10;<br>查询user_table表中username为lee的用户的ID，取0~10个，按升序排列。</p><h2 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h2><p>数据库的索引需要作用是提高查询性能，另外还可以对数据进行限制，如限制为“唯一”。</p><p>索引的类型有四种，如下：</p><p>1.主键</p><p>具有“唯一”和“索引”的双重优点。</p><p>2.唯一</p><p>定义字段为唯一，即不可重复。</p><p>3.索引</p><p>优点：提高查询性能，相当于书的目录。</p><p>缺点：降低增、删、改的性能，因为这些操作可能会触发数据库整理、重建索引。另外，索引也会占用磁盘空间。</p><p>4.全文索引</p><p>适合文本搜索，常用在搜索引擎中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库的分类&quot;&gt;&lt;a href=&quot;#数据库的分类&quot; class=&quot;headerlink&quot; title=&quot;数据库的分类&quot;&gt;&lt;/a&gt;数据库的分类&lt;/h2&gt;&lt;p&gt;1.&lt;strong&gt;文件数据库&lt;/strong&gt; 它的优点是：数据保存在单一文件中，因此部署十分方便，常用来
      
    
    </summary>
    
      <category term="Node" scheme="https://zhanghao-web.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://zhanghao-web.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node学习(九)--Websocket</title>
    <link href="https://zhanghao-web.github.io/2019/04/20/Node/Node%E5%AD%A6%E4%B9%A0(%E4%B9%9D)%20--Websocket/"/>
    <id>https://zhanghao-web.github.io/2019/04/20/Node/Node学习(九) --Websocket/</id>
    <published>2019-04-20T01:45:03.000Z</published>
    <updated>2020-01-28T10:04:15.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebSocket的优势"><a href="#WebSocket的优势" class="headerlink" title="WebSocket的优势"></a>WebSocket的优势</h1><p>1.性能高。</p><p>根据测试环境数据的不同，大约会比普通Ajax请求高2-10倍。 HTTP是文本协议，数据量比较大。</p><p>而WebSocket是基于二进制的协议，在建立连接时用的虽然是文本数据，但之后传输的都是二进制数据，因此性能比Ajax请求高。</p><p>2.双向通信。</p><p>如果是普通Ajax请求，需要实时获取数据，只能用计时器定时发送请求，这样会浪费服务器资源和流量。</p><p>而通过WebSocket，服务器可以主动向前端发送信息。</p><p>3.安全性高</p><p>由于WebSocket出现较晚，相比HTTP协议，在安全性上考虑的更加充分。</p><p>接下来，尝试用<code>Socket.io</code>建立一个基于WebSocket的双向通信。</p><h2 id="Socket-io"><a href="#Socket-io" class="headerlink" title="Socket.io"></a>Socket.io</h2><p><code>Socket.io</code>是在使用WebSocket时的一个常用库，它会自动判断在支持WebSocket的浏览器中使用WebSocket，在其他浏览器中，会使用如flash等方式完成通信。</p><p>1.操作简单<br>2.兼容低端浏览器，如IE6<br>3.自动进行数据解析<br>4.自动重连 若出现连接断开的情况，WebSocket会进行自动重连。</p><h2 id="使用Socket-io建立一个WebSocket应用"><a href="#使用Socket-io建立一个WebSocket应用" class="headerlink" title="使用Socket.io建立一个WebSocket应用"></a>使用Socket.io建立一个WebSocket应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 建立HTTP服务器。</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 建立WebSocket，让socket.io监听HTTP服务器，一旦发现是WebSocket请求，则会自动进行处理。</span></span><br><span class="line"><span class="keyword">const</span> ws = io.listen(server)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接完成后，触发connection事件。</span></span><br><span class="line"><span class="comment">// 该事件会返回一个socket对象（https://socket.io/docs/server-api/#Socket），可以利用socket对象进行发送、接收数据操作。</span></span><br><span class="line">ws.on(<span class="string">'connection'</span>, (socket) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 根据事件名，向客户端发送数据，数据数量不限。</span></span><br><span class="line">  socket.emit(<span class="string">'msg'</span>, <span class="string">'服务端向客户端发送数据第一条'</span>, <span class="string">'服务端向客户端发送数据第二条'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据事件名接收客户端返回的数据</span></span><br><span class="line">  socket.on(<span class="string">'msg'</span>, (...msgs) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msgs)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用计时器向客户端发送数据</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    socket.emit(<span class="string">'timer'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引用Socket.io的客户端js文件，由于Socket.io已在服务端监听了HTTP服务器的请求，一旦收到对该文件的请求，则会自动返回该文件，不需要开发人员配置。 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 该文件在服务端的位置为/node_modules/socket.io/node_modules/socket.io-client/dist/socket.io.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/socket.io/socket.io.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 与服务器建立WebSocket连接，该连接为ws协议，socket.io不需要担心跨域问题。</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> socket = io.connect(<span class="string">'ws://localhost:8080/'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 根据事件名，向服务端发送数据，数据数量不限。</span></span></span><br><span class="line"><span class="actionscript">    socket.emit(<span class="string">'msg'</span>, <span class="string">'客户端向服务端发送数据第一条'</span>, <span class="string">'客户端向服务端发送数据第二条'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 根据事件名接收服务端返回的数据</span></span></span><br><span class="line"><span class="actionscript">    socket.on(<span class="string">'msg'</span>, (...msgs) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(msgs)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 接收服务端通过计时器发送来的数据</span></span></span><br><span class="line"><span class="actionscript">    socket.on(<span class="string">'timer'</span>, (time) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(time)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>用浏览器打开index.html，即可在控制台看到打印的消息。</p><h1 id="原生实现WebSocket应用"><a href="#原生实现WebSocket应用" class="headerlink" title="原生实现WebSocket应用"></a>原生实现WebSocket应用</h1><p>上面使用了Socket.io实现WebSocket，也是开发中常用的方式。</p><p>但这样不利于了解其原理，这里使用Nodejs的Net模块和Web端的WebSocket API实现WebSocket服务器。</p><h2 id="服务端创建一个Net服务器"><a href="#服务端创建一个Net服务器" class="headerlink" title="服务端创建一个Net服务器"></a>服务端创建一个Net服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入net模块</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用net模块创建服务器，返回的是一个原始的socket对象，与Socket.io的socket对象不同。</span></span><br><span class="line"><span class="keyword">const</span> server = net.createServer(<span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="Web端创建一个WebSocket链接"><a href="#Web端创建一个WebSocket链接" class="headerlink" title="Web端创建一个WebSocket链接"></a>Web端创建一个WebSocket链接</h2><p>创建一个WebSocket连接，此时控制台的Network模块可以看到一个处于pending状态的HTTP连接。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/13/16977a451448747d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="socket"></p><p>这个连接是一个HTTP请求，与普通HTTP请求的请求你头相比，增加了以下内容：</p><ul><li>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits  // 扩展信息</li><li>Sec-WebSocket-Key: O3PKSb95qaSB7/+XfaTg7Q== // 发送一个Key到服务端，用于校验服务端是否支持WebSocket</li><li>Sec-WebSocket-Version: 13 // WebSocket版本</li><li>Upgrade: websocket  // 告知服务器通信协议将会升级到WebSocket若服务器支持则继续下一步</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080/'</span>)</span><br></pre></td></tr></table></figure><h2 id="服务端使用socket-once，触发一次data事件处理HTTP请求头数据"><a href="#服务端使用socket-once，触发一次data事件处理HTTP请求头数据" class="headerlink" title="服务端使用socket.once，触发一次data事件处理HTTP请求头数据"></a>服务端使用socket.once，触发一次data事件处理HTTP请求头数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">socket.once(<span class="string">'data'</span>, (buffer) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 接收到HTTP请求头数据</span></span><br><span class="line">  <span class="keyword">const</span> str = buffer.toString()</span><br><span class="line">  <span class="built_in">console</span>.log(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印结果如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: localhost:<span class="number">8080</span></span><br><span class="line">Connection: Upgrade</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Origin: file:<span class="comment">//</span></span><br><span class="line">Sec-WebSocket-Version: <span class="number">13</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML,</span><br><span class="line">like Gecko) Chrome/<span class="number">72.0</span><span class="number">.3626</span><span class="number">.121</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">Cookie: _ga=GA1<span class="number">.1</span><span class="number">.1892261700</span><span class="number">.1545540050</span>; _gid=GA1<span class="number">.1</span><span class="number">.774798563</span><span class="number">.1552221410</span>; io=<span class="number">7</span>X0VY8jhwRTdRHBfAAAB</span><br><span class="line">Sec-WebSocket-Key: JStOineTIKaQskxefzer7Q==</span><br><span class="line">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span><br></pre></td></tr></table></figure><p>将回车符转换为\r\n显示，结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span>\r\nHost: localhost:<span class="number">8080</span>\r\nConnection: Upgrade\r\nPragma: no-cache\r\nCache-Control: no-cache\r\nUpgrade: websocket\r\nOrigin: file:<span class="comment">//\r\nSec-WebSocket-Version: 13\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: zh-CN,zh;q=0.9\r\nCookie: _ga=GA1.1.1892261700.1545540050; _gid=GA1.1.774798563.1552221410; io=7X0VY8jhwRTdRHBfAAAB\r\nSec-WebSocket-Key: dRB1xDJ/vV+IAGnG7TscNQ==\r\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits\r\n\r\n</span></span><br></pre></td></tr></table></figure><h2 id="将请求头字符串转为对象"><a href="#将请求头字符串转为对象" class="headerlink" title="将请求头字符串转为对象"></a>将请求头字符串转为对象</h2><p>创建一个parseHeader方法处理请求头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseHeader</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将请求头数据按回车符切割为数组，得到每一行数据</span></span><br><span class="line">  <span class="keyword">let</span> arr = str.split(<span class="string">'\r\n'</span>).filter(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第一行数据为GET / HTTP/1.1，可以丢弃。</span></span><br><span class="line">  arr.shift()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(arr)</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    处理结果为：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [ 'Host: localhost:8080',</span></span><br><span class="line"><span class="comment">      'Connection: Upgrade',</span></span><br><span class="line"><span class="comment">      'Pragma: no-cache',</span></span><br><span class="line"><span class="comment">      'Cache-Control: no-cache',</span></span><br><span class="line"><span class="comment">      'Upgrade: websocket',</span></span><br><span class="line"><span class="comment">      'Origin: file://',</span></span><br><span class="line"><span class="comment">      'Sec-WebSocket-Version: 13',</span></span><br><span class="line"><span class="comment">      'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36',</span></span><br><span class="line"><span class="comment">      'Accept-Encoding: gzip, deflate, br',</span></span><br><span class="line"><span class="comment">      'Accept-Language: zh-CN,zh;q=0.9',</span></span><br><span class="line"><span class="comment">      'Cookie: _ga=GA1.1.1892261700.1545540050; _gid=GA1.1.774798563.1552221410; io=7X0VY8jhwRTdRHBfAAAB',</span></span><br><span class="line"><span class="comment">      'Sec-WebSocket-Key: jqxd7P0Xx9TGkdMfogptRw==',</span></span><br><span class="line"><span class="comment">      'Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits' ]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> headers = &#123;&#125;  <span class="comment">// 存储最终处理的数据</span></span><br><span class="line"></span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 需要用":"将数组切割成key和value</span></span><br><span class="line">    <span class="keyword">let</span> [name, value] = item.split(<span class="string">':'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去除无用的空格，将属性名转为小写</span></span><br><span class="line">    name = name.replace(<span class="regexp">/^\s|\s+$/g</span>, <span class="string">''</span>).toLowerCase()</span><br><span class="line">    value = value.replace(<span class="regexp">/^\s|\s+$/g</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有的请求头属性</span></span><br><span class="line">    headers[name] = value</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> headers</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">host</span>: <span class="string">'localhost'</span>,</span><br><span class="line">  connection: <span class="string">'Upgrade'</span>,</span><br><span class="line">  pragma: <span class="string">'no-cache'</span>,</span><br><span class="line">  <span class="string">'cache-control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">  upgrade: <span class="string">'websocket'</span>,</span><br><span class="line">  origin: <span class="string">'file'</span>,</span><br><span class="line">  <span class="string">'sec-websocket-version'</span>: <span class="string">'13'</span>,</span><br><span class="line">  <span class="string">'user-agent'</span>:</span><br><span class="line">   <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>,</span><br><span class="line">  <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">  <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">  cookie:</span><br><span class="line">   <span class="string">'_ga=GA1.1.1892261700.1545540050; _gid=GA1.1.585339125.1552405260'</span>,</span><br><span class="line">  <span class="string">'sec-websocket-key'</span>: <span class="string">'TipyPZNW+KNvV3fePNpriw=='</span>,</span><br><span class="line">  <span class="string">'sec-websocket-extensions'</span>: <span class="string">'permessage-deflate; client_max_window_bits'</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="根据请求头参数，判断是否WebSocket请求"><a href="#根据请求头参数，判断是否WebSocket请求" class="headerlink" title="根据请求头参数，判断是否WebSocket请求"></a>根据请求头参数，判断是否WebSocket请求</h2><p>根据<code>headers[&#39;upgrade&#39;] !== &#39;websocket&#39;</code>，判断该HTTP连接是否可升级为WebSocket，若可以升级，表示为WebSocket请求。<br>根据<code>headers[&#39;sec-websocket-version&#39;] !== &#39;13&#39;</code>，判断WebSocket的版本是否为13，以免因为版本不同出现兼容问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">socket.once(<span class="string">'data'</span>, (buffer) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 接收到HTTP请求头数据</span></span><br><span class="line">  <span class="keyword">const</span> str = buffer.toString()</span><br><span class="line">  <span class="built_in">console</span>.log(str)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 将请求头数据转为对象</span></span><br><span class="line">  <span class="keyword">const</span> headers = parseHeader(str)</span><br><span class="line">  <span class="built_in">console</span>.log(headers)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 判断请求是否为WebSocket连接</span></span><br><span class="line">  <span class="keyword">if</span> (headers[<span class="string">'upgrade'</span>] !== <span class="string">'websocket'</span>) &#123;</span><br><span class="line">    <span class="comment">// 若当前请求不是WebSocket连接，则关闭连接</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'非WebSocket连接'</span>)</span><br><span class="line">    socket.end()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (headers[<span class="string">'sec-websocket-version'</span>] !== <span class="string">'13'</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断WebSocket版本是否为13，防止是其他版本，造成兼容错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'WebSocket版本错误'</span>)</span><br><span class="line">    socket.end()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 请求为WebSocket连接时，进一步处理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="校验Sec-WebSocket-Key，完成连接"><a href="#校验Sec-WebSocket-Key，完成连接" class="headerlink" title="校验Sec-WebSocket-Key，完成连接"></a>校验Sec-WebSocket-Key，完成连接</h2><p>根据协议规定的方式，向前端返回一个请求头，完成建立WebSocket连接的过程。</p><p>若客户端校验结果正确，在控制台的Network模块可以看到HTTP请求的状态码变为101 Switching Protocols，同时客户端的ws.onopen事件被触发。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/13/16977a4514369b43?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="console"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">socket.once(<span class="string">'data'</span>, (buffer) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 接收到HTTP请求头数据</span></span><br><span class="line">  <span class="keyword">const</span> str = buffer.toString()</span><br><span class="line">  <span class="built_in">console</span>.log(str)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 将请求头数据转为对象</span></span><br><span class="line">  <span class="keyword">const</span> headers = parseHeader(str)</span><br><span class="line">  <span class="built_in">console</span>.log(headers)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 判断请求是否为WebSocket连接</span></span><br><span class="line">  <span class="keyword">if</span> (headers[<span class="string">'upgrade'</span>] !== <span class="string">'websocket'</span>) &#123;</span><br><span class="line">    <span class="comment">// 若当前请求不是WebSocket连接，则关闭连接</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'非WebSocket连接'</span>)</span><br><span class="line">    socket.end()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (headers[<span class="string">'sec-websocket-version'</span>] !== <span class="string">'13'</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断WebSocket版本是否为13，防止是其他版本，造成兼容错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'WebSocket版本错误'</span>)</span><br><span class="line">    socket.end()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 6. 校验Sec-WebSocket-Key，完成连接</span></span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">        协议中规定的校验用GUID，可参考如下链接：</span></span><br><span class="line"><span class="comment">        https://tools.ietf.org/html/rfc6455#section-5.5.2</span></span><br><span class="line"><span class="comment">        https://stackoverflow.com/questions/13456017/what-does-258eafa5-e914-47da-95ca-c5ab0dc85b11-means-in-websocket-protocol</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">const</span> GUID = <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span></span><br><span class="line">      <span class="keyword">const</span> key = headers[<span class="string">'sec-websocket-key'</span>]</span><br><span class="line">      <span class="keyword">const</span> hash = crypto.createHash(<span class="string">'sha1'</span>)  <span class="comment">// 创建一个签名算法为sha1的哈希对象</span></span><br><span class="line"></span><br><span class="line">      hash.update(<span class="string">`<span class="subst">$&#123;key&#125;</span><span class="subst">$&#123;GUID&#125;</span>`</span>)  <span class="comment">// 将key和GUID连接后，更新到hash</span></span><br><span class="line">      <span class="keyword">const</span> result = hash.digest(<span class="string">'base64'</span>) <span class="comment">// 生成base64字符串</span></span><br><span class="line">  <span class="keyword">const</span> header = <span class="string">`HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-Websocket-Accept: <span class="subst">$&#123;result&#125;</span>\r\n\r\n`</span> <span class="comment">// 生成供前端校验用的请求头</span></span><br><span class="line"></span><br><span class="line">      socket.write(header)  <span class="comment">// 返回HTTP头，告知客户端校验结果，HTTP状态码101表示切换协议：https://httpstatuses.com/101。</span></span><br><span class="line">      <span class="comment">// 若客户端校验结果正确，在控制台的Network模块可以看到HTTP请求的状态码变为101 Switching Protocols，同时客户端的ws.onopen事件被触发。</span></span><br><span class="line">      <span class="built_in">console</span>.log(header)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 处理聊天数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="建立连接后，通过data事件接收客户端的数据并处理"><a href="#建立连接后，通过data事件接收客户端的数据并处理" class="headerlink" title="建立连接后，通过data事件接收客户端的数据并处理"></a>建立连接后，通过data事件接收客户端的数据并处理</h2><p>连接开始后，可以在控制台的Network模块看到，该连接会一直保留在pending状态，直到连接断开。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/13/16977a4524cc9dca?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="console1"></p><p>此时可以通过data事件处理客户端的数据，但此时双方通信的数据为二进制，需要按照其格式进行处理后才可以正常使用。</p><p>格式如下：</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/13/16977a45146a18d6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="console2"></p><p>处理收到的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decodeWsFrame</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> frame = &#123;</span><br><span class="line">    isFinal: (data[start] &amp; <span class="number">0x80</span>) === <span class="number">0x80</span>,</span><br><span class="line">    opcode: data[start++] &amp; <span class="number">0xF</span>,</span><br><span class="line">    masked: (data[start] &amp; <span class="number">0x80</span>) === <span class="number">0x80</span>,</span><br><span class="line">    payloadLen: data[start++] &amp; <span class="number">0x7F</span>,</span><br><span class="line">    maskingKey: <span class="string">''</span>,</span><br><span class="line">    payloadData: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (frame.payloadLen === <span class="number">126</span>) &#123;</span><br><span class="line">    frame.payloadLen = (data[start++] &lt;&lt; <span class="number">8</span>) + data[start++];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (frame.payloadLen === <span class="number">127</span>) &#123;</span><br><span class="line">    frame.payloadLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">      frame.payloadLen += (data[start++] &lt;&lt; (i * <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (frame.payloadLen) &#123;</span><br><span class="line">    <span class="keyword">if</span> (frame.masked) &#123;</span><br><span class="line">      <span class="keyword">const</span> maskingKey = [</span><br><span class="line">        data[start++],</span><br><span class="line">        data[start++],</span><br><span class="line">        data[start++],</span><br><span class="line">        data[start++]</span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line">      frame.maskingKey = maskingKey;</span><br><span class="line"></span><br><span class="line">      frame.payloadData = data</span><br><span class="line">        .slice(start, start + frame.payloadLen)</span><br><span class="line">        .map(<span class="function">(<span class="params">byte, idx</span>) =&gt;</span> byte ^ maskingKey[idx % <span class="number">4</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      frame.payloadData = data.slice(start, start + frame.payloadLen);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.dir(frame)</span><br><span class="line">  <span class="keyword">return</span> frame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理发出的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeWsFrame</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isFinal = data.isFinal !== <span class="literal">undefined</span> ? data.isFinal : <span class="literal">true</span>,</span><br><span class="line">    opcode = data.opcode !== <span class="literal">undefined</span> ? data.opcode : <span class="number">1</span>,</span><br><span class="line">    payloadData = data.payloadData ? Buffer.from(data.payloadData) : <span class="literal">null</span>,</span><br><span class="line">    payloadLen = payloadData ? payloadData.length : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> frame = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isFinal) frame.push((<span class="number">1</span> &lt;&lt; <span class="number">7</span>) + opcode);</span><br><span class="line">  <span class="keyword">else</span> frame.push(opcode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (payloadLen &lt; <span class="number">126</span>) &#123;</span><br><span class="line">    frame.push(payloadLen);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payloadLen &lt; <span class="number">65536</span>) &#123;</span><br><span class="line">    frame.push(<span class="number">126</span>, payloadLen &gt;&gt; <span class="number">8</span>, payloadLen &amp; <span class="number">0xFF</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    frame.push(<span class="number">127</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">      frame.push((payloadLen &amp; (<span class="number">0xFF</span> &lt;&lt; (i * <span class="number">8</span>))) &gt;&gt; (i * <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  frame = payloadData ? Buffer.concat([Buffer.from(frame), payloadData]) : Buffer.from(frame);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.dir(decodeWsFrame(frame));</span><br><span class="line">  <span class="keyword">return</span> frame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对聊天数据进行处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">socket.once(<span class="string">'data'</span>, (buffer) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 接收到HTTP请求头数据</span></span><br><span class="line">  <span class="keyword">const</span> str = buffer.toString()</span><br><span class="line">  <span class="built_in">console</span>.log(str)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 将请求头数据转为对象</span></span><br><span class="line">  <span class="keyword">const</span> headers = parseHeader(str)</span><br><span class="line">  <span class="built_in">console</span>.log(headers)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 判断请求是否为WebSocket连接</span></span><br><span class="line">  <span class="keyword">if</span> (headers[<span class="string">'upgrade'</span>] !== <span class="string">'websocket'</span>) &#123;</span><br><span class="line">    <span class="comment">// 若当前请求不是WebSocket连接，则关闭连接</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'非WebSocket连接'</span>)</span><br><span class="line">    socket.end()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (headers[<span class="string">'sec-websocket-version'</span>] !== <span class="string">'13'</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断WebSocket版本是否为13，防止是其他版本，造成兼容错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'WebSocket版本错误'</span>)</span><br><span class="line">    socket.end()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 6. 校验Sec-WebSocket-Key，完成连接</span></span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">        协议中规定的校验用GUID，可参考如下链接：</span></span><br><span class="line"><span class="comment">        https://tools.ietf.org/html/rfc6455#section-5.5.2</span></span><br><span class="line"><span class="comment">        https://stackoverflow.com/questions/13456017/what-does-258eafa5-e914-47da-95ca-c5ab0dc85b11-means-in-websocket-protocol</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">const</span> GUID = <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span></span><br><span class="line">      <span class="keyword">const</span> key = headers[<span class="string">'sec-websocket-key'</span>]</span><br><span class="line">      <span class="keyword">const</span> hash = crypto.createHash(<span class="string">'sha1'</span>)  <span class="comment">// 创建一个签名算法为sha1的哈希对象</span></span><br><span class="line"></span><br><span class="line">      hash.update(<span class="string">`<span class="subst">$&#123;key&#125;</span><span class="subst">$&#123;GUID&#125;</span>`</span>)  <span class="comment">// 将key和GUID连接后，更新到hash</span></span><br><span class="line">      <span class="keyword">const</span> result = hash.digest(<span class="string">'base64'</span>) <span class="comment">// 生成base64字符串</span></span><br><span class="line">  <span class="keyword">const</span> header = <span class="string">`HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-Websocket-Accept: <span class="subst">$&#123;result&#125;</span>\r\n\r\n`</span> <span class="comment">// 生成供前端校验用的请求头</span></span><br><span class="line"></span><br><span class="line">      socket.write(header)  <span class="comment">// 返回HTTP头，告知客户端校验结果，HTTP状态码101表示切换协议：https://httpstatuses.com/101。</span></span><br><span class="line">      <span class="comment">// 若客户端校验结果正确，在控制台的Network模块可以看到HTTP请求的状态码变为101 Switching Protocols，同时客户端的ws.onopen事件被触发。</span></span><br><span class="line">      <span class="built_in">console</span>.log(header)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 7. 建立连接后，通过data事件接收客户端的数据并处理</span></span><br><span class="line">      socket.on(<span class="string">'data'</span>, (buffer) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> data = decodeWsFrame(buffer)</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="built_in">console</span>.log(data.payloadData &amp;&amp; data.payloadData.toString())</span><br><span class="line"></span><br><span class="line">        <span class="comment">// opcode为8，表示客户端发起了断开连接</span></span><br><span class="line">        <span class="keyword">if</span> (data.opcode === <span class="number">8</span>) &#123;</span><br><span class="line">          socket.end()  <span class="comment">// 与客户端断开连接</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 接收到客户端数据时的处理，此处默认为返回接收到的数据。</span></span><br><span class="line">          socket.write(encodeWsFrame(&#123; <span class="attr">payloadData</span>: <span class="string">`服务端接收到的消息为：<span class="subst">$&#123;data.payloadData ? data.payloadData.toString() : <span class="string">''</span>&#125;</span>`</span> &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这样，一个简单的基于WebSocket的聊天应用就创建完成了，在启动服务器后，可以打开index.html看到效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WebSocket的优势&quot;&gt;&lt;a href=&quot;#WebSocket的优势&quot; class=&quot;headerlink&quot; title=&quot;WebSocket的优势&quot;&gt;&lt;/a&gt;WebSocket的优势&lt;/h1&gt;&lt;p&gt;1.性能高。&lt;/p&gt;
&lt;p&gt;根据测试环境数据的不同，大约会比普通Ajax请求高2-10倍。 HTTP是文本协议，数据量比较大。&lt;/p&gt;
&lt;p&gt;而WebSocket是基于二进制的协议，在建立连接时用的虽然是文本数据，但之后传输的都是二进制数据，因此性能比Ajax请求高。&lt;/p&gt;
&lt;p&gt;2.双向通信。&lt;/p&gt;
&lt;p&gt;如果是普通Ajax请求，需要实时获取数据，只能用计时器定时发送请求，这样会浪费服务器资源和流量。&lt;/p&gt;
&lt;p&gt;而通过WebSocket，服务器可以主动向前端发送信息。&lt;/p&gt;
&lt;p&gt;3.安全性高&lt;/p&gt;
&lt;p&gt;由于WebSocket出现较晚，相比HTTP协议，在安全性上考虑的更加充分。&lt;/p&gt;
&lt;p&gt;接下来，尝试用&lt;code&gt;Socket.io&lt;/code&gt;建立一个基于WebSocket的双向通信。&lt;/p&gt;
&lt;h2 id=&quot;Socket-io&quot;&gt;&lt;a href=&quot;#Socket-io&quot; class=&quot;headerlink&quot; title=&quot;Socket.io&quot;&gt;&lt;/a&gt;Socket.io&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Socket.io&lt;/code&gt;是在使用WebSocket时的一个常用库，它会自动判断在支持WebSocket的浏览器中使用WebSocket，在其他浏览器中，会使用如flash等方式完成通信。&lt;/p&gt;
&lt;p&gt;1.操作简单&lt;br&gt;2.兼容低端浏览器，如IE6&lt;br&gt;3.自动进行数据解析&lt;br&gt;4.自动重连 若出现连接断开的情况，WebSocket会进行自动重连。&lt;/p&gt;
&lt;h2 id=&quot;使用Socket-io建立一个WebSocket应用&quot;&gt;&lt;a href=&quot;#使用Socket-io建立一个WebSocket应用&quot; class=&quot;headerlink&quot; title=&quot;使用Socket.io建立一个WebSocket应用&quot;&gt;&lt;/a&gt;使用Socket.io建立一个WebSocket应用&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; io = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;socket.io&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. 建立HTTP服务器。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; server = http.createServer(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. 建立WebSocket，让socket.io监听HTTP服务器，一旦发现是WebSocket请求，则会自动进行处理。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ws = io.listen(server)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 建立连接完成后，触发connection事件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 该事件会返回一个socket对象（https://socket.io/docs/server-api/#Socket），可以利用socket对象进行发送、接收数据操作。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ws.on(&lt;span class=&quot;string&quot;&gt;&#39;connection&#39;&lt;/span&gt;, (socket) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 根据事件名，向客户端发送数据，数据数量不限。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  socket.emit(&lt;span class=&quot;string&quot;&gt;&#39;msg&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;服务端向客户端发送数据第一条&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;服务端向客户端发送数据第二条&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 根据事件名接收客户端返回的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  socket.on(&lt;span class=&quot;string&quot;&gt;&#39;msg&#39;&lt;/span&gt;, (...msgs) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(msgs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 使用计时器向客户端发送数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket.emit(&lt;span class=&quot;string&quot;&gt;&#39;timer&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getTime())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;meta-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 引用Socket.io的客户端js文件，由于Socket.io已在服务端监听了HTTP服务器的请求，一旦收到对该文件的请求，则会自动返回该文件，不需要开发人员配置。 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 该文件在服务端的位置为/node_modules/socket.io/node_modules/socket.io-client/dist/socket.io.js --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://localhost:8080/socket.io/socket.io.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 与服务器建立WebSocket连接，该连接为ws协议，socket.io不需要担心跨域问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; socket = io.connect(&lt;span class=&quot;string&quot;&gt;&#39;ws://localhost:8080/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 根据事件名，向服务端发送数据，数据数量不限。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;    socket.emit(&lt;span class=&quot;string&quot;&gt;&#39;msg&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;客户端向服务端发送数据第一条&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;客户端向服务端发送数据第二条&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 根据事件名接收服务端返回的数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;    socket.on(&lt;span class=&quot;string&quot;&gt;&#39;msg&#39;&lt;/span&gt;, (...msgs) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(msgs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 接收服务端通过计时器发送来的数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;    socket.on(&lt;span class=&quot;string&quot;&gt;&#39;timer&#39;&lt;/span&gt;, (time) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(time)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node" scheme="https://zhanghao-web.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://zhanghao-web.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node学习(八)--Ajax跨域</title>
    <link href="https://zhanghao-web.github.io/2019/04/20/Node/Node%E5%AD%A6%E4%B9%A0(%E5%85%AB)%20--Ajax%E8%B7%A8%E5%9F%9F/"/>
    <id>https://zhanghao-web.github.io/2019/04/20/Node/Node学习(八) --Ajax跨域/</id>
    <published>2019-04-20T01:41:27.000Z</published>
    <updated>2020-01-28T10:04:15.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax跨域问题的产生原因"><a href="#Ajax跨域问题的产生原因" class="headerlink" title="Ajax跨域问题的产生原因"></a>Ajax跨域问题的产生原因</h2><p>Ajax请求无法跨域，在前端开发中是个常见问题，它的产生原因是，<strong>在浏览器接收服务端返回数据时，会检查该数据是否和当前发起请求的网址在同一域名下。若不是，则会丢弃该数据，并返回一个跨域错误</strong>。</p><blockquote><p>在Ajax请求中，遵循如下流程：<br>网页提交一个Ajax请求到浏览器，浏览器将请求发至服务器，服务器接收到请求后，返回响应数据给浏览器（服务器通常不会对域名进行区分），浏览器接收到响应数据时，检测返回数据的域名是否和当前页面域名相同，若相同则将数据返回给网页，不同则丢弃数据。</p></blockquote><h2 id="Ajax跨域的处理方法"><a href="#Ajax跨域的处理方法" class="headerlink" title="Ajax跨域的处理方法"></a>Ajax跨域的处理方法</h2><p>既然跨域问题的产生原因在于浏览器的限制，那么网页端在请求时无法主动规避，此时就需要服务端进行处理。</p><p>服务端只需要在响应Ajax请求时，在请求头中加入一个<code>Access-Control-Allow-Origin</code>属性，并设置为<code>*</code>（表示全部域名）或者当前域名就可以让浏览器不再进行限制.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers.origin)</span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">  res.write(<span class="string">`&#123;"resultCode": "0000", "msg": "success"&#125;`</span>)</span><br><span class="line">  res.end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>当然在实际项目中，不可以简单地设置<code>res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;)</code>，而是要通过<code>req.headers.origin</code>判断发起请求的域名是否合法，再设置<code>Access-Control-Allow-Origin</code>属性，以免出现安全问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ajax跨域问题的产生原因&quot;&gt;&lt;a href=&quot;#Ajax跨域问题的产生原因&quot; class=&quot;headerlink&quot; title=&quot;Ajax跨域问题的产生原因&quot;&gt;&lt;/a&gt;Ajax跨域问题的产生原因&lt;/h2&gt;&lt;p&gt;Ajax请求无法跨域，在前端开发中是个常见问题，它的
      
    
    </summary>
    
      <category term="Node" scheme="https://zhanghao-web.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://zhanghao-web.github.io/tags/Node/"/>
    
  </entry>
  
</feed>
